// Code generated for package frontend by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x77\x13\x37\xf6\x7f\xef\x4f\x71\x3b\xa1\xcc\x4c\x63\xc6\x76\xa0\xf0\xc7\x89\xf9\x1f\x1a\x48\x9b\x2d\x84\x6e\x49\xbb\xe7\xac\xe3\x0d\xf2\xcc\xb5\xad\x44\x96\xa6\x92\xc6\x49\x4a\xf3\xdd\xf7\x48\x9a\x07\x8d\x63\x07\xd8\xee\xee\xab\x85\x73\x88\x22\xdd\xfb\xd3\x7d\x90\xee\x83\x86\x15\x91\x30\xa3\x4c\xa3\x54\x87\xa2\xe0\x1a\x46\xd0\xdf\xef\x74\x1e\x44\x99\x48\x8b\x25\x72\x1d\x27\x12\x49\x76\x13\xcd\x0a\x9e\x6a\x2a\x78\x14\xc3\xc7\x0e\x80\xe1\x53\x9a\x48\xc3\x30\x13\x72\x49\xf4\x29\x5d\xa2\xd2\x64\x99\x47\x1c\xaf\xe0\x15\xd1\x18\x45\xcd\x30\x86\x1e\x0c\xfa\xfd\x7e\x0c\x8f\xe0\x79\xbf\x0f\x8f\xa0\x59\x4a\xe6\x68\xb9\x7f\x17\x1c\xdf\xcd\x66\x0a\x75\x14\xc3\x37\xf0\xb4\x1f\x7f\xe3\x78\xe2\xfd\x0e\x00\x9d\x41\xf4\x20\x0a\x76\x34\x5d\xe2\xb9\xdd\x3a\x88\x93\x15\x61\x51\x0c\xa3\x11\x04\x81\x93\x0b\x60\x23\x8d\x1d\x5b\x98\xdb\x4e\x29\x3d\xf2\xec\x5f\x90\xfd\x4f\x49\x8d\x3c\xfb\x84\xcc\x0d\x05\xf2\xac\x91\xd7\xac\x3b\x2f\xfd\xc4\x0a\x15\xc4\x49\xca\x68\x7a\x19\x91\x2c\x3b\xb2\xb3\x96\xf2\x41\x14\x18\x6d\x82\x38\x11\x3c\x0a\x55\x31\x5d\x52\x1d\x76\xc1\x0d\xfe\x5a\xa0\xbc\x89\xf7\x0d\xd8\x5c\x88\x39\xc3\x24\x5d\x10\xa9\x55\xc2\x04\xc9\xa2\x30\x2d\xa4\x44\x6e\xc8\xad\x40\x61\x4e\xd2\x4b\x32\x47\x15\x0e\x61\x1c\xa6\x42\xa2\xa5\x0e\x27\x46\x20\xbb\x19\x74\x00\xae\x28\xcf\xc4\x55\x22\xf8\x82\xa8\x45\xba\x20\x7c\x8e\xc6\xa2\xe5\x41\x81\xa8\xd2\xae\xbd\xa1\x42\xfd\x8e\xbf\x11\x24\x3b\x24\x8c\x4d\x49\x7a\x19\x65\x92\x5c\x1d\x2e\x5a\x0e\xfa\x12\x96\x0e\x40\x2e\xf2\x82\x11\x8d\x47\x14\x59\xa6\xa2\x78\xbf\x63\xa4\xec\xd4\xa2\xd4\x86\x2a\x65\x4a\x05\x57\xba\x3c\xf7\xa7\xb8\xcc\x0d\x2f\x8c\x3c\x33\x57\x93\x41\x9c\x2c\xf4\x92\x45\xe6\x16\xe4\x8c\xa4\x18\xf5\xce\xcf\x4f\x7e\x79\x7b\x7e\xde\x9b\x77\x5b\x17\xa7\x72\x41\x09\x60\x9c\x44\xf2\x1c\x79\x16\xb5\x11\x9d\xc0\x4e\x80\x07\x6e\xc9\x4a\x6d\xb7\xff\x50\x72\x9f\xcf\xcc\xd4\xd9\xd9\xf8\xc1\x47\x7f\x8f\xdb\xb3\xb3\xc9\x07\xbb\x51\x8b\xff\x57\xc2\x0a\x6c\xf3\xaf\xcc\xd4\xe7\xf2\xff\x8c\x4b\xb1\x5a\x03\x90\x76\x6e\x2b\x82\xd1\xd5\x13\x3e\x71\xde\x5f\x0f\x12\x8d\xa1\x91\x65\x27\x64\xe9\xf6\xd0\x0b\xaa\xca\x5b\xb0\xdf\x22\x32\x70\x27\xc5\xd2\x23\x22\x5a\xcb\x28\xa0\xe6\x4e\x2c\x89\x4e\x17\x51\xef\x2c\xdb\xed\xc5\xe3\xfe\xc4\x71\xfa\x06\x28\x89\x39\x59\x62\xd0\x6d\xb6\x2c\xf7\x30\xc7\xdc\x92\xa9\xa8\xde\x68\x9d\xea\xb6\xa5\x98\xb3\x4a\x79\xd3\xee\x28\x56\x49\x98\x32\xa1\x50\xe9\x28\x4c\xa4\xb8\x0a\xcd\x31\x31\x5c\x91\x8f\xe7\xdb\x6f\x77\x77\xbf\x73\xdb\xf1\x4e\x66\x4e\xa4\xc2\x9f\x88\x24\x4b\x15\x29\x2d\x1d\xbc\x44\x5d\x48\x0e\x4a\xcb\x44\xe5\x8c\xea\x28\x7c\x68\xa1\xb3\x22\xf5\x6c\x9c\x5b\xae\x2e\xd8\x9f\x6d\x83\x8f\x2f\xf1\xa6\x0b\xf6\x10\x4c\x60\xe4\x28\x2a\xa8\x51\x68\x8c\x99\x47\x19\xa6\x22\xc3\x5f\x7e\x3e\x3e\x14\xcb\x5c\x70\x2c\x8f\x30\x38\x6a\x65\x20\x0c\xaf\x05\x69\x4e\xff\xd9\xae\x39\xf8\x21\x84\x25\x71\x29\xaa\xe3\xb1\x4a\x77\xe1\xa3\x51\xfc\xd6\x57\x72\xed\x7a\xd6\x19\xe4\x37\x13\x95\x60\x04\x4c\xa4\xc4\x50\x26\x0b\x89\xb3\x52\xd0\x60\x27\x88\xc7\x83\x49\x15\x44\xbf\xb2\xb4\x95\x9a\x6e\xdb\x56\x3c\xb7\xeb\xaf\x7f\x2b\x2c\x90\x82\x91\x9b\xf0\x0c\x68\xa8\x67\x42\x42\x64\xa8\xa9\x4d\x74\x40\xe1\x60\x8d\x31\x61\xc8\xe7\x7a\xb1\x0f\x74\x77\xb7\xda\xcd\xa6\x8b\x0a\xb1\xa6\x1c\xd3\x89\x67\xd3\xfd\x9a\xf2\x12\x46\x80\xf5\x11\x35\x33\x2b\x18\xc1\x5d\x73\x47\x38\x1e\x4c\xdc\x11\x71\x2a\x5e\xda\xa4\x30\x95\x48\x2e\x33\x71\xc5\xeb\xec\xe0\xe2\x4a\x3d\x0f\x22\x37\xfb\x8f\xad\x67\x46\x01\xec\xc2\x0a\x76\x21\x98\x04\xe5\x7d\x09\x15\x32\x4c\x35\x66\x61\x17\x9a\x71\x29\xa0\x3d\x21\x9a\xf2\x02\xdd\xef\xb7\xf6\xdf\x35\x11\xfc\xf4\xd9\x92\xe1\x4e\x5e\x5d\x7d\x31\xac\xcd\x70\x77\x41\x9b\xc4\xb7\x1d\x72\x1d\x4e\xe4\x47\x4c\x5c\xa9\x75\xb8\x7a\xfa\xb3\xe1\xaa\xe0\xf2\x0f\x3f\xfa\xf6\xe2\x06\x77\x23\xab\x2b\x9d\x90\x65\xc7\x3c\xc3\x6b\x18\xf9\x59\x66\xbf\x4e\xeb\x6b\x01\xdd\xb8\xcb\x63\xda\x85\xe0\xec\x6c\x52\x8a\x7a\xf9\xe5\x6c\x5a\xd2\xf9\x1c\x65\x14\xb8\x00\x1c\xdc\x45\xa8\x32\xc1\x7d\x1b\xaf\xca\xc4\xeb\xdf\x59\xaf\x6c\x28\x2f\x2c\xae\x90\xeb\x24\x97\xf6\xe7\x2b\x9c\x91\x82\xe9\xc8\x9d\xdf\x5e\x0f\x7e\x25\x8c\x66\x26\x8d\x86\x95\x03\x42\x98\x8a\xeb\x3a\xd7\x54\xb3\x36\xba\x87\xb5\x97\x42\x2f\x13\xb4\x09\x8f\x6d\x31\x6a\xe3\xe3\x31\xd7\x51\x35\xdd\x85\x41\xbf\xae\xac\xa8\x3a\x21\x27\x91\xc7\x11\xc3\x1f\x7f\xb4\x10\x0e\x60\xb0\x3e\xf5\xc2\x96\x67\xfd\xca\xbb\x84\xa1\xd4\x51\x70\xcc\x53\x21\x25\xa6\x1a\xc2\x53\x91\x83\x13\x6e\x08\x39\x43\xa2\x10\x90\x6b\x94\x40\x4c\x34\xa4\x19\x50\xae\x71\x8e\x12\xa6\xa8\xaf\x10\x39\x0c\x80\xf0\xcc\xa1\x26\x41\x3b\x30\xce\x08\x53\x58\xc7\x29\x17\x26\x9d\x09\x4c\xad\x16\xc6\x89\x42\x49\x09\xa3\xbf\x97\x39\xa3\xa4\xd8\x1d\x41\xf8\xb0\x12\x7a\x14\xc2\x2e\x20\xbf\x13\x3f\xaa\x75\xcb\xd8\x0a\xa1\x30\x82\x60\xc7\x78\xdc\xc1\x75\xda\xe2\xb4\xfc\x5c\x57\x52\x5f\x16\x96\x3f\x27\x2a\x3f\x48\xc8\x05\xb9\x8e\xdc\x9a\xbe\xc9\x71\x08\xc1\xf7\xaf\x4f\x83\xae\x9d\x28\x24\x1b\x42\xd0\xb3\x00\xff\x6f\x64\xb5\x23\xb7\x96\x11\x4d\x4e\x1d\x83\xc6\x6b\x5d\x72\xa8\x22\x4d\x51\xa9\x61\x5d\x62\x46\xd2\x10\x76\x4d\x23\xa2\x0b\xd5\x85\xeb\x85\x6c\xee\xac\x11\xcf\xae\x9b\x60\x51\xf0\x0c\x67\x94\x63\xd6\xac\xbb\x5b\x62\x2b\xcc\xf3\x8c\xae\xcc\x65\xc2\x6b\x1d\x05\x27\xc2\x6e\x0f\x33\x51\x98\x98\x54\x53\x57\xea\xd5\x13\xb7\x9d\x6a\x9a\x67\x28\x9d\x0d\xed\x86\x8e\xe7\xd6\x09\x8d\x52\x0a\xe9\x89\xdc\x92\x71\xa3\x04\xd7\x0b\x99\x48\x54\xb9\xe0\x0a\x4f\xf1\x5a\xc7\x75\x44\xbd\x8d\x5b\xae\xbb\xbb\xb1\x05\xce\x25\x9a\x23\xf6\x13\xc9\x49\x62\xaf\x8f\x5b\x34\xb1\x62\x19\xc5\xee\xc2\x36\x6d\x1f\x9a\xca\x73\x6c\x78\x12\x43\x35\xee\x4f\x26\x77\x12\xe5\xc0\x25\xca\x9a\x68\x5b\x8e\x94\xe2\xca\x5c\xd9\x1a\x8b\x7a\x39\x70\x41\xd4\x89\xe0\x7f\x47\x29\x60\x64\x08\x13\xc5\x68\x8a\xd1\x20\x4e\x94\x58\x7a\x55\xcd\x8a\xb0\xc6\x3e\x86\x91\xdb\x8a\xd0\x2a\x72\xc4\x04\xd1\x91\x21\x31\x77\x3a\x0c\xe3\x46\x27\xdf\x43\xf0\x95\x8b\x0b\xbc\x58\xc6\xf0\xf0\xa1\x45\xf8\x6a\x64\x1b\x5b\x6b\xc9\x92\xdc\x1c\x90\x46\xaa\x66\xd3\xca\x2e\x49\x5e\xa8\x45\x24\xc5\x55\xdc\xe4\xb4\xba\xda\x70\x07\x0b\xc6\x77\x8d\x55\x56\x15\x35\xca\x06\x5b\x95\xc6\xa9\xf9\x3d\x84\x0b\x87\x70\xe1\x21\x98\x3a\xa3\x02\xb9\x68\x40\x9c\x1c\x26\xef\x78\x84\xe3\x8b\xc9\xbe\x77\xfe\xa9\xd3\xdb\x18\xe1\xc2\x0d\xfd\xf3\x7f\xbd\x66\xd7\xeb\x2d\x56\xf5\x63\xed\x75\x1c\x5b\xbe\x7e\xb5\x58\xdd\x82\x52\xa7\xf1\x85\x51\xeb\x7a\xcd\x62\x36\x54\x94\xed\xa2\x09\x78\xa8\x7e\xa5\x8a\x4e\x29\xa3\xfa\xc6\x6c\xba\x65\xa9\x54\xdb\x4a\x5e\x1e\xce\x6a\xea\x11\x0c\x2a\x55\xb6\xe1\x8e\xe0\xa5\x94\xe4\x26\xda\xc0\x99\xcc\x28\x63\x91\x96\x05\xb6\xdf\x04\x2a\x4b\xbe\xfa\x94\x77\x3f\x7d\x0b\xc6\x95\x41\xcc\x85\x32\x09\x92\xb0\x2b\x72\xa3\xe0\x12\x31\x07\x5d\xbd\x37\xdc\x75\xfe\xc0\x39\xbf\xe4\xde\xec\x78\x63\xce\x2d\x5a\x8f\x2f\x8c\x82\x13\xdf\xcd\xe6\xb2\xd9\xa3\xdc\xb8\x28\x6e\x7b\xcf\xfd\xeb\x2b\xdf\x3e\xfb\xb5\x0f\x7d\x12\xcf\xa4\x07\xb0\xe7\xbf\x64\x6c\x8c\xa9\x4e\x50\xa8\xea\xd1\x3a\x4f\x56\xef\x4c\xc9\x1c\xf5\x6b\x86\x66\xf8\xdd\xcd\xb1\x7d\x92\x50\x5a\x2c\xcf\x19\xce\x91\x67\x61\x9c\x50\xce\x51\xfe\x70\xfa\xf6\x0d\x8c\x20\x0c\xf7\xb7\xb5\x01\x76\xf3\xd2\x7f\xe5\x2b\xc2\x8a\xaa\xc2\xa4\x58\x97\xcb\x88\x39\x14\xa7\xc2\x90\x9c\x92\x29\xc3\x96\x52\x4d\x74\x74\x45\xb6\x09\xa4\x4e\x31\xaa\xde\x6b\x92\x5e\x62\x36\x74\x49\xd4\x45\x77\x4d\x35\xc3\x21\x84\x26\x0f\xc3\xdb\x69\xae\x42\x6f\xde\x04\xef\xf7\xfa\xc6\x10\xd4\xb1\x45\x70\xfd\x9e\xfe\x8e\x43\xd8\x7b\xd2\x2d\xe7\xa6\x82\x65\x43\x30\x87\xb1\x5b\x97\x9b\xcc\xe4\x8c\x70\xe7\xf1\xe3\xc7\xa1\x9f\x4c\x16\x2f\xaf\xa9\x6a\xd0\xaa\xdd\x4f\xe9\x12\xc3\x8a\x59\x31\xc2\x35\x66\x66\xf3\x36\xaa\xb7\xf0\x92\xcf\x0d\xe3\xd3\x7e\xbd\xb6\x10\x57\x66\xe1\xf5\x0a\xe5\xcd\x10\x06\xf5\xc2\x36\x45\xd6\x84\xec\x36\xa1\x42\x13\x46\xd3\x96\x91\x36\x2b\xe9\x1b\x63\xf0\x7f\xd5\x79\xac\x56\xe7\x92\x66\x8c\x72\x54\x1b\xb7\x9c\x3d\x36\x7f\xbd\x5d\x53\xd3\x5c\x1b\xb9\xd7\x71\x96\x94\x0b\xf9\xfd\xbd\x60\xf8\xdc\xfc\x0d\xd7\x39\xf5\x17\x28\xed\x69\xb2\xd7\xbe\x59\x8e\x66\xd5\xf6\xdb\x92\x72\xfb\x16\x31\x84\xb6\x9d\x87\x10\xbe\xc5\x39\x99\x52\xad\x20\x47\x09\x0a\x53\xc1\xb3\xf0\x7f\xbe\xf8\x77\xfa\x62\x81\x74\xbe\xd0\x43\x50\xa9\x44\xe4\x89\xfb\x15\xbe\x81\x7e\xf2\xcc\x11\xd8\x08\xf2\x52\x22\x69\x36\xbb\xa2\x99\x5e\x0c\x21\x7c\xde\xff\x3a\xec\x42\x39\x59\x01\x85\xcf\xcc\x6c\x25\xa9\xc8\x87\x10\x7e\xdb\x4c\x4c\x49\x7a\x39\x97\xa6\x96\x3c\x74\xf2\x36\x0a\x28\x2d\xc5\xa5\x71\xfa\x4e\x9a\xa6\x9e\x06\x6e\xfe\x6f\x6e\xcf\xc1\x26\x1d\xee\x80\x86\x3b\x33\xfb\xa7\x44\xb1\xa6\x51\x43\x18\x87\x3b\x7b\x83\xe7\x4f\x8f\x1e\x87\x5d\x08\x77\x9e\x1c\xbe\x3c\xfa\xb6\x6f\x87\x47\x47\x87\x83\xfe\xb3\x72\xf8\xed\xb3\xbd\x3d\x3b\x7c\x7e\xb8\xf7\xec\xbb\x7e\x38\x71\x20\x84\xd3\xa5\x0d\x99\x8d\xcc\xb6\xf5\x2f\xf2\xf6\xe1\xc9\x0a\x59\x92\x99\x0e\xa8\x9a\x45\xa2\x28\x9f\x0f\x21\x14\x85\x6e\xc5\x30\x17\xd0\x1b\xcc\x5c\x28\xea\xd8\x43\x2e\x38\xb6\x68\xb5\x10\x4c\xd3\xdc\x8b\x78\x7f\xf2\x20\xf8\xf1\xce\x9a\xee\x50\x64\xe8\xd4\x69\xc9\x48\x79\x65\xff\x3d\x37\x93\x0b\x5a\xa3\x95\xdd\x88\x4d\x68\x8d\x1c\xfd\x21\x7c\xb4\x8c\xaf\x88\x5a\x94\x32\x8e\x9f\x74\xe1\xc9\xa4\xd9\x76\xb0\x89\x66\xaf\x0b\x7b\x1e\xcd\xde\x16\x1c\x9f\xe6\xf1\x16\x1c\x7f\xaf\x27\x9b\x68\x06\x5d\x18\x4c\xbc\xac\x7f\xbb\xdf\xca\x9b\x30\xb2\x1f\x38\x36\xe6\x4d\x73\x23\x5c\xaf\xb1\x3d\x65\x57\x89\x3f\x74\xc5\xa3\xfd\x3d\x31\x1d\x66\x54\xa7\xe5\x6e\x95\x59\xfd\x87\x70\x97\xeb\xdf\xd8\x93\xf1\x8a\xda\xe7\xb2\xcf\x2c\x0b\xec\x36\x6d\xee\x56\xa5\xf0\xa1\x03\x70\x90\xd1\x15\xa4\x8c\x28\x35\x0a\x1c\xdf\xa3\x05\xb2\xfc\x91\xa6\x79\xf0\xc2\x9a\xe2\xc0\x5c\x39\x3e\x7f\xf1\x83\xb8\x02\x2d\xa0\x50\x38\x3c\xe8\x95\x73\x07\x53\xe9\x88\x0e\x19\x4d\x2f\x81\xc0\x8c\x39\x2a\x73\x86\x40\x70\x76\x03\x54\x27\xd5\xea\x9c\x50\x6e\x16\xe7\xc2\x5e\x52\x33\x24\x8c\x59\x1e\x95\x34\x50\x5a\xb2\xde\xe1\x32\xeb\xbd\xb3\xb6\x80\x5d\xb0\xcf\xcc\x43\x20\x59\xd6\x73\x4f\xc8\x25\x8b\x11\xbf\x97\xd1\xd5\x8b\xce\x07\xdf\x5e\xf6\x7e\xc3\xa8\xb2\x65\xe2\x26\xf6\x7d\x82\x62\x69\xab\x97\x76\xf5\xeb\x61\x68\x53\xfc\xf8\x96\x4e\x25\x12\x8d\xa5\xb1\xa3\xd0\xae\x3b\x03\xdb\x61\x62\x2d\xf8\x86\x2a\x9d\x90\x2c\xab\xd6\xbb\xe0\x06\x8f\xd4\xb2\x19\x4f\x85\xcc\x4c\x45\x15\xfa\xcf\x3a\x53\x91\xdd\xdc\xb7\x9d\x59\x0f\xcb\x17\x73\x53\x10\x33\xd4\x7e\xf3\x59\x6a\xd4\xaa\xb6\x1d\xb2\xab\xb7\xb7\xe2\xca\xb0\xf5\x99\xc1\x5a\xea\x10\x19\xbb\x8f\x27\x6b\x78\x4a\xea\x44\x99\x1b\x94\xac\x05\x5e\x18\x95\xae\x18\x47\xd4\xb5\x24\x5f\x97\x13\xa5\xbd\x27\x9b\x61\x6c\x3e\x31\x75\xec\x5e\x3f\xbf\x0e\x7d\xf1\x18\x99\x22\xfb\x6c\xf1\x6a\x6a\x5b\x67\x1f\x0a\xae\xd1\xbe\x9a\x95\x4e\xaf\x1b\x70\xd3\x02\xb8\xaf\x51\x87\x0b\xca\xb2\xa8\x96\x27\xde\xbc\x5e\xe3\x96\xeb\xd6\x39\x2d\x0a\xd7\x1a\xd4\x7d\xf4\xb6\xe6\x6e\x4c\xd7\xda\x11\xdb\xf9\x5b\x1b\x88\x9c\xa4\xae\x4d\x0b\xfb\xc9\x93\xd2\x08\xb7\x80\x4c\xe1\xfd\xd4\x83\xa4\x1f\xb6\x1e\x62\xad\xf4\x59\xf6\x7a\x85\x5c\x9b\xf3\x89\x1c\x65\x14\xda\x1b\x15\x76\x9b\x97\x17\xfb\x6e\xd9\x7a\xd3\x55\x1a\x56\x46\x54\x86\xd5\xb7\xef\x6d\x8d\xa8\xeb\x11\xa2\xef\x84\x60\x48\x78\x5c\xdf\x26\x07\x65\x2c\xe0\x5e\x47\x53\x2d\xd9\x8f\x68\x7b\x5a\x37\xb1\x44\x4d\x5a\x13\x84\xe9\x1f\xf1\xc6\xef\xcf\x7a\xbd\xed\xf1\x40\x8b\xf9\x9c\x21\xe8\x05\x55\x65\xc2\x69\xf5\xe4\xf7\x5b\xdd\xb4\xfd\x6d\xfd\x46\xa3\xa6\x6d\xae\x37\x3f\x9e\x39\x7c\xaa\x40\x2f\xd0\x45\xb4\x92\xad\xea\xda\x08\xcf\x4c\x50\x94\xa0\xed\xaf\x5a\xc0\x82\x66\x08\x54\x77\x5d\x14\x24\x8c\x79\x98\x9f\x6a\xc8\xab\xe0\xb4\xa1\x13\x2f\xd3\x74\xfb\x14\xdc\x83\x59\x69\x3a\x82\x4f\x9c\x40\x0f\xbc\xb3\x65\x93\x5e\x0f\x7e\xc6\x79\xc1\x4c\x32\x74\xd6\xa7\x33\x67\x0d\xcf\xfc\xc6\x4a\xa5\x71\x1a\xdd\xf7\x1d\x54\x93\x10\xfe\x73\xfe\xfa\x2f\xda\xf6\x1e\x4c\xdb\x50\x78\xa0\x9f\xe1\x1f\x23\xc6\x06\x27\x54\x17\xfd\xce\x53\x66\xfd\x56\x07\xee\x43\x92\xbd\xeb\x2e\x11\xf9\x71\xc8\x46\xa6\x8d\x55\x40\x8b\xca\xf0\xad\x7d\x94\x5c\xff\x9f\x1f\x19\xd1\xd8\xfa\xfc\x6a\x26\x12\x2d\x8e\xdf\xbf\x7b\xaf\x25\xe5\xf3\x28\x4e\x54\x31\x55\x5a\x46\xfd\x2e\x0c\x9e\xb6\xdf\x62\xef\xf9\xbe\xdc\x7e\x1d\x87\x07\xa6\xa4\xf9\xcb\xfb\x77\x27\x51\xd0\xcb\x68\xaa\xdd\x17\x1a\xd5\x0b\x76\x2d\xb5\x17\xb0\x9a\x27\x5d\xf7\x67\xeb\x57\x9d\xea\xc3\x79\xfd\x51\x87\x14\x5a\xa4\x62\x99\x33\xd4\x18\xf9\xae\x06\x50\xa2\x90\x29\x0e\x6d\x8a\x68\x6a\xe5\xdb\xc6\xde\x9d\xdb\xce\x3f\x03\x00\x00\xff\xff\xcd\x4f\x8d\x39\x15\x24\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 9237, mode: os.FileMode(436), modTime: time.Unix(1747737469, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xe3\xb8\x11\x7e\xdf\xbf\x62\xca\xbc\xb4\xe8\x51\xb4\xb3\x59\xe0\xea\x93\xfc\xd0\x6b\xb7\x2f\xd7\xc3\xb6\xdd\x7b\x2a\x8a\x80\x12\x47\x16\x63\xfe\x50\x49\xca\x3f\x2e\xc8\xff\x5e\x50\x92\x6d\x49\xb1\xb3\x0e\x60\x14\x97\x00\x96\x44\x0e\xbf\xf9\x38\x33\x1f\x45\x31\xfd\x9d\xb0\x45\xd8\xd7\x08\x55\xd0\x6a\xf9\x21\x8d\x17\x50\xdc\xac\x32\x82\x86\x2c\x3f\x00\xa4\x15\x72\x11\x6f\x00\x52\x8d\x81\x43\x51\x71\xe7\x31\x64\xa4\x09\x25\xfd\x9e\x0c\xbb\x0c\xd7\x98\x91\x8d\xc4\x6d\x6d\x5d\x20\x50\x58\x13\xd0\x84\x8c\x6c\xa5\x08\x55\x26\x70\x23\x0b\xa4\xed\xc3\x77\x20\x8d\x0c\x92\x2b\xea\x0b\xae\x30\x9b\x7f\x07\xbe\x72\xd2\xac\x69\xb0\xb4\x94\x21\x33\xf6\x00\xad\xa4\x59\x83\x43\x95\x11\x1f\xf6\x0a\x7d\x85\x18\x08\x54\x0e\xcb\x8c\x54\x21\xd4\x7e\xc1\x98\x0f\xbc\x58\xd7\x3c\x54\x49\x6e\x6d\xf0\xc1\xf1\xba\x10\x26\x29\xac\x66\xc7\x06\xf6\x90\x7c\x4a\xee\x59\xe1\xfd\xa9\x2d\xd1\xd2\x24\x85\xf7\x04\xde\xe1\xac\xb0\x02\x93\xa7\xff\x36\xe8\xf6\xad\x87\x46\xb2\x79\x32\xbf\x4f\xe6\x2c\x54\xa8\xd1\xb3\x9c\x7b\x64\x9d\x01\x6d\x64\x8b\xdf\xc3\x07\x19\x14\x2e\x3f\x2b\xbb\xad\x6c\xe3\x31\x65\x5d\x43\xd7\xd9\x7a\xec\xee\x01\xee\x8a\xc6\x07\xab\x1f\x15\xae\xd0\x08\x78\xee\x9b\x01\x34\xdf\xd1\x0a\xe5\xaa\x0a\x0b\x78\x98\xcd\xea\xdd\x0f\xc7\x2e\xbb\x41\x57\x2a\xbb\xa5\xfb\x05\xf0\x26\xd8\x43\xcf\x4b\x7f\x4d\x02\xcf\x15\x52\xaf\x21\x0c\x11\x6b\x2e\x84\x34\xab\x05\xcc\x92\xfb\x4f\x0e\xf5\xab\x61\x1d\x07\x5a\xa1\xaa\x69\x90\xf5\x70\xa8\xf5\x32\x48\x6b\x16\xe0\x83\x2c\xd6\xfb\x13\x97\x60\xeb\x05\xcc\x4e\xcf\x39\x2f\xd6\x2b\x67\x1b\x23\x16\x70\x57\x96\xe5\xa9\xe7\x57\x2a\x8d\xc0\xdd\x02\xee\x7f\x98\x52\xa2\xb9\x0d\xc1\xea\x05\x7c\x3f\x9c\xe6\xa1\xb3\x75\x31\xea\x29\xad\x09\xd4\xcb\x5f\x71\x01\xf3\x87\x61\x47\x61\x95\x75\x0b\xb8\x7b\x78\x78\x18\x50\xb2\x4e\xa0\x3b\xfa\x98\xd7\x3b\xf0\x56\x49\x01\x77\x42\x88\x71\x10\x52\xd6\x25\x07\x00\xa2\x26\xd8\x41\x14\x69\x6e\xc5\xbe\x4f\x9f\xe1\x1b\x28\x14\xf7\x3e\x23\x86\x6f\x72\xee\xa0\xbb\x50\xc1\xdd\xba\x8f\x4f\xe4\x0c\xf9\xaa\x6b\x2a\x15\xee\xa8\x16\xd4\xd8\xad\xe3\x35\xd4\x74\x46\x0e\xd9\x4f\xf9\x18\x8a\xe6\x8e\x1b\x11\xa7\x41\xbd\xa6\x1f\xdb\x1b\x2d\xe8\x3d\x68\x47\x67\x87\xfa\xbc\x23\xc3\xca\xe2\x3d\x2d\x66\xf8\xa6\xbf\x15\xf2\xc8\x30\x4a\x93\x4b\x83\x8e\x96\xaa\x91\xe2\xe4\x78\x60\xe3\xec\xf6\xd8\x3e\x1d\xdd\xbb\x8f\xe4\x0d\x82\x88\x4f\xb9\xb2\xc5\x3a\x4e\x4e\xc5\xe2\x04\x2f\x05\xc6\x20\xd4\x74\x3e\x40\x19\xe3\xf4\x36\xb4\x0b\xce\xc8\x0c\x20\x2d\xad\xd3\xd3\x26\x89\x4a\x78\x0c\xe3\xe6\x41\xc7\x01\x39\x8e\xa5\xb1\xde\x6a\x32\xb5\x8d\x2a\x6f\x0b\x7a\xf9\x55\x6a\x84\xdf\xff\xf2\xf5\xc7\x3f\xa4\xac\x6f\x7a\x6d\x7b\x31\x20\xe7\x6d\x0a\xab\xce\xda\x44\xaf\x3c\x47\x05\xa5\x75\x19\x09\x52\xe3\xa3\x0f\xdc\x05\xb2\xfc\x57\xbc\xa4\xac\xed\xbd\x30\x52\x9a\xba\x09\x10\x17\xea\x8c\x08\x1e\x30\x0e\xa7\xca\x16\x5c\x91\x7e\xd1\x1d\x00\x8e\x42\x10\xf3\xec\xac\x02\x4d\xe7\x6d\x26\x40\x8a\xb1\xf7\x73\xd3\x61\x42\x6e\x6e\x38\x4f\x34\x82\x2c\xff\x6a\xc4\x4d\xe6\x18\xc1\xae\x9c\x61\xeb\xf7\xfa\xf9\x9d\x6d\x4e\xd9\x6d\x4b\xee\x0e\xbe\xda\x1a\xa2\x4c\xfd\xff\xa5\xe6\x86\x51\x35\x8d\xce\xd1\xf5\x01\xb2\x75\x4b\xe2\x18\xdb\xe3\xf3\x9b\xb1\xd5\xd2\x64\x24\x5e\xf9\x2e\x23\xf3\xd9\x6c\x36\x23\xb0\xe1\xaa\xc1\x8c\x7c\x9a\xcd\x2e\x91\xf0\x9a\x2b\x35\x02\x0e\xb8\x0b\x10\x7f\xa8\x6e\x02\x9e\x4f\x53\xfc\xfb\xb1\xb2\xd6\x4b\xb3\x82\x60\x2d\x68\x6e\xf6\xa0\xdb\xc5\x85\x97\x25\x16\x01\x72\x67\xb7\x1e\x1d\xd4\xe8\x22\x2c\x37\x05\x26\xe7\x29\xb0\x96\xc3\x0d\xab\x61\xd4\x7e\x93\xd2\xf8\x2c\x55\x40\xf7\x8d\xaa\x88\xb9\x2b\x5b\x43\x7f\x0e\xea\xc2\x5c\x6e\x57\x4f\x79\x13\x82\x35\x7d\x41\x75\x0f\x64\x40\xea\x8b\x6a\x4e\x25\x94\x07\x03\x79\x30\xb4\x76\x52\x73\xb7\x6f\xef\xbd\x8e\xc5\x44\x96\x7f\x4c\x59\x37\xfa\xb7\x26\xd0\x3f\x3b\xe4\x6b\x61\xb7\xe6\x8a\x44\xe4\x07\xdb\x73\xb9\xb8\x2e\xec\xd7\x06\x3e\xaa\x08\x55\xac\xf9\x4e\xaf\x47\xd7\x64\xcc\xe4\xb2\x7e\xa1\xdb\x50\xd2\x0e\x86\x80\x6e\x54\x90\xb5\x42\x88\xfb\xa5\x8c\x3c\x3f\x43\xd2\xce\xfd\x2f\x76\x6b\x7e\x42\x03\x2f\x2f\x47\x2a\xcf\xcf\x14\x1c\x37\x2b\x84\xe4\x73\x8c\xe9\xdf\x62\x0c\x3d\xbc\xbc\x5c\xa0\x0a\x90\xda\x3a\xb4\x91\x86\x76\xc9\xef\xe0\x7f\x6a\xdf\x0b\x6f\xe0\xbe\x09\xd9\x81\x4a\x6b\x0e\x0b\x4e\x84\xfc\x99\x6b\x6c\x11\x87\xf8\x29\xeb\x0c\x87\x6e\xe2\x1e\xfa\x2d\xbe\xec\x40\xf8\xea\x41\x29\xeb\x22\x79\x21\xab\x17\xdf\xa1\xb7\xa9\xed\xe1\xba\xee\x9b\x5c\xcb\x70\x5c\x88\xff\xd9\x18\xf8\x47\xfc\xf6\xe8\x4a\xa3\xef\x9d\x6c\xa4\xce\x22\xa7\x6c\xbc\xe5\x1a\x91\x1a\x3f\x68\x2e\xcd\x64\x37\xf8\x27\xd0\xed\xee\x34\x7e\x79\xb4\x1b\x54\xb5\xa2\xf3\x19\xd4\x81\x7e\x84\x7a\x47\x1f\xa6\x7b\xc9\x48\x2e\x7e\x4c\x86\x47\x21\x37\x64\x39\x89\xc0\xc9\x64\xf8\x1d\x34\x31\x4b\x59\xe4\x31\x61\x78\x8e\xef\x11\xb1\xdd\xc6\xc7\x6f\x54\x2f\x73\xa9\x64\xd8\x2f\x2a\x29\x04\x8e\x16\xb1\xaf\xa8\x6b\xc5\x03\x4e\x63\x36\x91\xf3\x60\xc4\xa3\xb3\xdb\x7f\x3f\x3e\xfe\xfc\xcb\xdf\x1f\x1f\xff\xf3\x4a\xc1\xd3\x9d\x73\x0c\xd0\xb9\x15\xa8\x17\xf8\x00\xb6\x4d\xd2\x09\xb8\xd7\xfe\x85\xce\x0b\xc2\x27\xcb\x0f\xef\xd1\xef\xb7\x94\x7b\xb5\x66\xdf\xaf\xd6\x37\x25\x37\x54\xe8\x1b\x86\x97\x54\x79\x5e\x5f\x57\x26\x66\x28\xb6\xb8\x69\xb9\x1c\xeb\x71\x86\xda\xa9\x0f\x32\x34\xc8\xec\xa4\xeb\xa6\x74\xcf\xbe\xa3\xfb\x34\xf4\x1e\xc7\xc5\x8b\xda\x6e\xf0\x75\x25\x1d\xde\xdf\x1e\x0b\x6b\xc4\xf4\x0d\x4e\x2f\xbd\xc1\xcf\x70\x7f\xad\xc5\x69\xc3\x41\xb4\xbe\x70\xb2\x0e\xe0\x5d\x71\xf9\xbc\xa5\x3f\x59\xf9\x98\xcc\x93\x79\x7b\x80\xf3\xe4\x09\x2c\x53\xd6\x8d\x5d\xbe\x07\xea\x74\x74\x73\x3a\xae\x79\xf2\xe4\x3a\xb0\x77\x1c\x3a\x3d\x4d\xcf\x9c\xae\x76\xb2\xdd\x6e\x93\x95\x0f\x3c\xc8\xa2\x45\x6e\x57\x4c\xcf\x94\xe5\x02\xdd\xf5\x30\x85\x30\x4f\x3e\x29\x94\x6d\x44\xa9\xb8\xc3\x16\x8b\x3f\xf1\x1d\x53\x32\xf7\xec\x0b\xaf\xf9\x17\xee\x3c\xb2\x4f\xc9\xc7\x64\xc6\x6a\x1e\xff\x9d\xc7\xeb\xc8\xb2\xf2\x70\xee\xf0\xda\x36\x65\xdd\x19\x49\xca\xda\x33\xc6\xff\x05\x00\x00\xff\xff\x90\x9c\xed\x9f\x73\x14\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 5235, mode: os.FileMode(436), modTime: time.Unix(1747737431, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

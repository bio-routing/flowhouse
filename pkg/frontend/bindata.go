// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package frontend generated by go-bindata.// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x73\x1b\x37\xee\x7f\xaf\x4f\x81\xae\xdd\xff\x72\x6b\x65\x2d\x39\x69\x33\x91\xfe\x9a\x9b\x56\x89\x9b\xdc\xe4\xa1\x57\xbb\x77\x2f\x64\x9d\x4b\xed\x42\x12\xed\x5d\x72\x4b\x72\x25\xb9\x19\x7f\xf7\x1b\x3e\xec\x93\x2c\xfb\x9a\xeb\xbd\x3c\x6b\x26\xa2\x40\xe0\x07\x10\x00\x41\x90\xd9\x50\x09\x4b\x96\x69\x94\x6a\x2a\x4a\xae\x61\x02\x83\x71\xaf\x77\x4c\x52\x91\x94\x39\x72\x1d\xc5\x12\x69\x7a\x47\x96\x25\x4f\x34\x13\x9c\x44\xf0\xb9\x07\x60\xe4\x94\xa6\xd2\x08\x2c\x85\xcc\xa9\xbe\x64\x39\x2a\x4d\xf3\x82\x70\xdc\xc2\x6b\xaa\x91\x90\x66\x18\xc1\x29\x0c\x07\x83\x41\x04\xcf\xe0\xd5\x60\x00\xcf\xa0\x99\x8a\x57\x68\xa5\x7f\x17\x1c\x3f\x2d\x97\x0a\x35\x89\xe0\x1b\xf8\x6e\x10\x7d\xe3\x64\xa2\x71\x0f\x80\x2d\x81\x1c\x93\xe0\x48\xb3\x1c\xaf\xad\xea\x20\x8a\x37\x34\x23\x11\x4c\x26\x10\x04\xce\x2e\x80\x83\x3c\x76\x6c\x61\xee\x7b\xde\x7a\xe4\xe9\x7f\x60\xfb\x9f\xb2\x1a\x79\xfa\x6f\x6c\x6e\x38\x90\xa7\x8d\xbd\x66\xde\x45\xe9\xa7\xac\x54\x41\x14\x27\x19\x4b\x6e\x09\x4d\xd3\x73\x4b\xb5\x9c\xc7\x24\x30\xab\x09\xa2\x58\x70\x12\xaa\x72\x91\x33\x1d\xf6\xc1\x0d\xfe\x56\xa2\xbc\x8b\xc6\x06\x6c\x25\xc4\x2a\xc3\x38\x59\x53\xa9\x55\x9c\x09\x9a\x92\x30\x29\xa5\x44\x6e\xd8\xad\x41\x61\x41\x93\x5b\xba\x42\x15\x8e\x60\x16\x26\x42\xa2\xe5\x0e\xe7\xc6\x20\xab\x0c\x7a\x00\x5b\xc6\x53\xb1\x8d\x05\x5f\x53\xb5\x4e\xd6\x94\xaf\xd0\x78\xd4\x27\x0a\x90\x6a\x75\x5d\x85\x0a\xf5\x27\xfe\x5e\xd0\x74\x4a\xb3\x6c\x41\x93\x5b\x92\x4a\xba\x9d\xae\x3b\x01\xfa\x12\x91\x1e\x40\x21\x8a\x32\xa3\x1a\xcf\x19\x66\xa9\x22\xd1\xb8\x67\xac\xec\xd5\xa6\xd4\x8e\xf2\x36\x25\x82\x2b\xed\xf3\xfe\x12\xf3\xc2\xc8\xc2\xa4\xe5\xe6\x8a\x18\x44\xf1\x5a\xe7\x19\x31\xbb\xa0\xc8\x68\x82\xe4\xf4\xfa\xfa\xe3\x2f\x1f\xae\xaf\x4f\x57\xfd\xce\xc6\xa9\x42\xe0\x01\x4c\x90\x68\x51\x20\x4f\x49\x17\xd1\x19\xec\x0c\x38\x76\x53\xd6\x6a\xab\xfe\x57\x2f\x7d\xbd\x34\xa4\xab\xab\xd9\xf1\xe7\xb6\x8e\xfb\xab\xab\xf9\xaf\x56\x51\x47\xfe\xef\x34\x2b\xb1\x2b\xbf\x31\xa4\x3f\x2a\xff\x33\xe6\x62\xb3\x07\x20\x2d\xed\x51\x04\xb3\xd6\x96\xf1\xb1\x8b\xfe\x7e\x91\x68\x1c\x8d\x59\xfa\x91\xe6\x4e\x87\x5e\x33\xe5\x77\xc1\xb8\xc3\x64\xe0\x3e\x96\x79\x8b\x89\x6a\x2d\x49\xc0\xcc\x9e\xc8\xa9\x4e\xd6\xe4\xf4\x2a\x3d\x39\x8d\x66\x83\xb9\x93\x6c\x3b\xc0\x33\x73\x9a\x63\xd0\x6f\x54\x7a\x1d\x26\xcd\x2d\x9b\x22\xb5\xa2\x7d\xae\xfb\xce\xc2\x9c\x57\xfc\x4e\x7b\xb0\xb0\xca\xc2\x24\x13\x0a\x95\x26\x61\x2c\xc5\x36\x34\x69\x62\xa4\x48\x1b\xaf\xed\xbf\x93\x93\x71\xef\xbe\xd7\xca\xcc\x82\x4a\x85\x3f\x51\x49\x73\x45\x94\x96\x0e\x5e\xa2\x2e\x25\x07\xa5\x65\xac\x8a\x8c\x69\x12\xfe\x9f\x85\x4e\xcb\xa4\xe5\xe3\xc2\x4a\xf5\xc1\x7e\x77\x1d\x3e\xbb\xc5\xbb\x3e\xd8\x24\x98\xc3\xc4\x71\x54\x50\x93\xd0\x38\xb3\x20\x29\x26\x22\xc5\x5f\x7e\x7e\x37\x15\x79\x21\x38\xfa\x14\x06\xc7\xad\x0c\x84\x91\xb5\x20\x4d\xf6\x5f\x9d\x98\xc4\x0f\x21\xf4\xcc\xde\x54\x27\x63\x17\xdd\x87\xcf\x66\xe1\xf7\xed\x45\xee\x6d\xcf\xfa\x04\xf9\xcd\x54\x25\x98\x40\x26\x12\x6a\x38\xe3\xb5\xc4\xa5\x37\x34\x38\x0a\xa2\xd9\x70\x5e\x15\xd1\xaf\x2c\x6f\xb5\x4c\xa7\xb6\x53\xcf\xed\xfc\x9b\xdf\x4a\x0b\xa4\x60\xe2\x08\x2d\x07\x1a\xee\xa5\x90\x40\x0c\x37\xb3\x07\x1d\x30\xf8\xff\x3d\xc1\x38\x43\xbe\xd2\xeb\x31\xb0\x93\x93\x4a\x9b\x3d\x2e\x2a\xc4\x9a\x73\xc6\xe6\x2d\x9f\x8e\x6b\xce\x5b\x98\x00\xd6\x29\x6a\x28\x1b\x98\xc0\x43\x77\x13\x9c\x0d\xe7\x2e\x45\xdc\x12\x6f\xed\xa1\xb0\x90\x48\x6f\x53\xb1\xe5\xf5\xe9\xe0\xea\x4a\x4d\x07\x51\x18\xfd\x33\x1b\x99\x49\x00\x27\xb0\x81\x13\x08\xe6\x81\xdf\x2f\xa1\xc2\x0c\x13\x8d\x69\xd8\x87\x66\xec\x0d\xb4\x19\xa2\x19\x2f\xd1\xfd\xbe\xb7\xff\xee\x99\xd0\x3e\x3e\x3b\x36\x3c\x38\x57\x37\x5f\x0c\x6b\x4f\xb8\x87\xa0\xcd\xc1\xf7\x38\x64\x03\x57\x55\x83\x7f\xb6\xcb\xe5\x69\xd4\xe0\x1e\x14\x75\xbd\x0e\x66\xe9\x3b\x9e\xe2\x0e\x26\xed\x63\x61\x5c\x9f\xc3\x7b\x15\xd8\xf8\xb7\x25\x74\x02\xc1\xd5\xd5\xdc\x9b\x7a\xfb\xe5\x62\x5a\xb2\xd5\x0a\x25\x09\x5c\xc5\x0c\x1e\x22\x54\xa5\xfb\x29\xc5\x1b\x7f\x52\xb6\x37\x59\xeb\x9c\xf7\x3b\xcc\x6d\x4a\x5b\x4e\x43\xd3\x19\x84\x51\xac\x50\x32\x9a\xb1\xdf\x7d\x85\xea\xec\x3b\x98\x40\x70\x64\xb4\x3a\xb9\xa6\x0e\x2d\x69\xa6\xb0\xa3\xab\x3e\x7e\xbf\x6c\x2f\xff\x91\xad\x7c\x1c\xd3\x1b\xba\x23\x6e\x4e\xdf\x15\x38\x82\xe0\xc7\x37\x97\x41\xdf\x12\x4a\x99\x8d\x20\x38\xb5\x00\x7f\x31\xb6\xda\x91\x9b\x4b\xa9\xa6\x97\x4e\x40\xe3\x4e\x7b\x09\x55\x26\x09\x2a\x35\xaa\xfb\x12\x22\x0d\x63\xdf\x74\xaf\xba\x54\x7d\xd8\xad\x65\x93\x37\xc6\x3c\x3b\x6f\x12\xb6\xe4\x29\x2e\x19\xc7\xb4\x99\x77\x91\xb2\x6d\xc9\x75\xca\x36\x26\xa0\xb8\xd3\x24\xf8\x28\xac\x7a\x58\x8a\xd2\x24\x72\xcd\x5d\x2d\xaf\x26\xdc\xf7\x2a\x32\x4f\x51\x3a\x1f\x5a\x85\x4e\xe6\xde\x19\x8d\x52\x0a\xd9\x32\xb9\x63\xe3\x41\x0b\x76\x6b\x19\x4b\x54\x85\xe0\x0a\x2f\x71\xa7\xa3\x7a\x1b\xde\x47\x9d\xd0\x3d\x54\xec\x72\x45\xa2\xc9\x94\x9f\x68\x41\x63\x7b\x26\xb9\x49\x93\xaf\x39\x89\xa2\xaa\xc8\x3a\xd7\xc0\x6c\xfe\x58\x31\x35\x38\xb1\x95\x3c\x50\x47\x6b\x81\x1b\x27\x70\xd3\x16\x30\xe5\xb4\x92\xb9\x69\x64\x5c\x4c\x6e\x4c\x3c\x06\xed\x38\x78\x91\xda\x98\xb6\x73\xcd\xde\x6e\xe3\xce\x6e\x6a\x16\x03\xc6\xe0\xab\x3d\x30\xa7\x62\x9f\xea\x81\x8c\x37\xde\x71\x4d\x76\xd1\x83\x28\x56\xdf\x8d\x1e\x98\xc0\xae\x29\x81\x36\xa3\xbd\xcf\x7c\x4b\xbb\x61\xaa\x34\x3b\xd0\xed\x11\x2a\x25\xbd\xbb\x14\xaf\x4d\xea\xd2\x45\x86\xc4\x46\x64\xec\xbd\xed\x0a\xbd\x89\x8b\x33\x8a\xa9\x0b\x4d\x93\x5b\x4c\x47\xa0\x65\x89\x2e\x57\x34\xd3\x19\x8e\x20\x3c\xcf\xc4\x16\x3e\x2c\x0a\x15\xb6\xe8\x26\x15\x2e\xf4\x9d\x61\xa8\xd6\xb5\x14\x5c\x5f\xb0\xdf\x71\x04\x67\x2f\xfa\x9e\xb6\x10\x59\x07\xd3\x14\xd0\xcc\x64\x60\x78\xf4\xfc\xf9\xf3\xb0\x9d\x9a\xeb\xef\x77\x4c\x35\x68\x95\x76\x73\x13\x0a\xfb\x6d\xe2\x01\xd5\x7b\xb0\xfd\xc6\xff\x9a\x66\x2c\x19\xb9\x4a\xd3\x90\x1f\x9a\xd5\x36\x7f\xf8\xa2\x8a\x42\x35\xbb\x92\x2c\xcd\x18\x47\x75\x50\xe5\xf2\xb9\xf9\xb4\xb4\x26\xa6\x23\x1b\xc1\x70\xb0\x8f\x93\x33\x2e\xe4\x8f\x4f\x82\xe1\x2b\xf3\x09\xf7\x25\xdd\x75\x72\x04\xe1\xdb\xb7\xa3\x3c\x1f\x29\xd5\xf8\xe4\x0b\xdc\xd1\x5a\xe3\x59\x27\xd3\xbc\x9e\x4d\x37\x06\x39\xe3\xb6\xb5\x1d\xc1\xa0\xbf\x17\x96\x0f\xb8\xa2\x0b\xa6\x15\x14\x28\x41\x61\x22\x78\xfa\xbf\x28\xfd\x57\x63\xb1\x46\xb6\x5a\xeb\x11\xa8\x44\x22\xf2\xd8\xfd\x84\x6f\x60\x10\xbf\x74\x0c\xb6\x54\x7f\x2f\x91\x36\xca\xb6\x2c\xd5\xeb\x11\x84\xaf\x06\x5f\x87\x7d\xf0\xc4\x0a\x28\x7c\x69\xa8\x95\xa5\xa2\x18\x41\xf8\x6d\x43\x30\xb7\xdf\x95\x34\xa7\xcc\xd4\xd9\xdb\x2c\x40\x69\x29\x6e\x4d\xd0\x8f\x92\x24\x69\xad\xc0\xd1\xff\xe1\x74\x0e\x0f\xad\xe1\x01\x68\x78\xb4\xb4\x7f\x1e\xc5\xba\x46\x8d\x60\x16\x1e\x9d\x0d\x5f\x7d\x77\xfe\xdc\x74\x96\x47\x2f\xa6\xdf\x9f\x7f\x3b\xb0\xc3\xf3\xf3\xe9\x70\xf0\xd2\x0f\xbf\x7d\x79\x76\x66\x87\xaf\xa6\x67\x2f\x7f\x18\x84\x73\x07\x42\x39\xcb\x6d\xd1\x6b\x6c\xb6\x9d\x64\x59\x74\x93\x27\x2d\xa5\x67\x1b\x0e\x06\x75\x42\x23\x55\x8c\xaf\x46\x10\x8a\x52\x77\xea\x51\x86\x2b\xe4\x69\x83\x59\x08\xc5\x9c\x78\xc8\x05\xc7\x0e\xaf\x16\x22\xd3\xac\x68\x55\xaf\x3f\x99\x08\xd5\xac\x5a\x8b\xad\x75\xdd\x54\xa4\xe8\x96\xd3\xb1\x91\xf1\xca\xff\x67\x8e\x52\x08\x56\x57\x61\xdf\xa7\xa0\x64\xed\x2c\x1e\x8c\xe0\xb3\x15\x7c\x4d\xd5\xda\xdb\x38\x7b\xd1\x87\x17\xf3\x46\xed\xf0\x10\xcf\x59\x1f\xce\x5a\x3c\x67\x8f\xe0\xb4\x79\x9e\x3f\x82\xd3\xd6\xf5\xe2\x10\xcf\xb0\x0f\xc3\x79\x95\x4b\xe6\xbc\x1b\x57\x8d\x82\xcd\x7a\x98\xd8\xf7\xb2\x83\x27\x9f\xd9\x11\xae\x0b\xa9\x5e\x1a\xe3\x15\xea\x37\x19\x9a\xe1\x0f\x77\xef\x52\x12\xd6\x4d\x4e\xe8\xde\xd2\xec\xef\xd8\xf4\x9e\xc4\xb5\x70\xfe\x7c\x6c\x3f\xa9\x24\xa5\xd2\x22\x7f\x6f\x93\xe2\x35\xb3\x17\xaf\x47\xe1\x2d\xeb\xb5\x4b\x20\x77\x3f\xda\x93\x8e\x19\xe7\x28\xdf\x5e\x7e\x78\x0f\x13\x08\xc3\x31\x9c\x9e\xc2\x34\x43\x2a\x81\xf2\x3b\xc0\x1d\x53\x9a\xf1\x95\x4f\xc1\xc6\x04\xbb\x5b\x60\x52\x99\x17\x3b\xc2\xb8\xcd\x50\xe6\xf6\x58\xb7\x8d\xd2\x0a\xf5\xc7\x32\x5f\xa0\xfc\xb4\x9c\xba\x19\xd2\x5e\x91\x36\x7d\x41\x7b\x1d\x89\x44\xaa\xd1\x2f\x85\x84\x76\xde\x99\x6f\x87\x71\x92\x51\xa5\xde\x33\xa5\x63\x9a\xa6\xd5\x7c\x1f\xdc\xe0\x99\xca\x9b\xf1\x42\xc8\x14\x65\x75\x39\xf4\xea\x16\x22\xbd\x7b\x4a\x9d\x99\x0f\xfd\xcb\x86\xe9\xe7\x32\xd4\xb6\x01\x1c\xba\x06\xd0\x2f\xae\xd3\xf7\x39\x64\x29\xb6\x4f\xe1\xca\xb0\xf3\x1c\x64\x9d\x36\xc5\x2c\x7b\x4a\x26\x6d\x64\x3c\x77\xac\x4c\x6a\xc6\x7b\x15\x0d\x26\x3e\x2a\x33\xc2\xe0\x19\x0c\x23\xf8\xda\x13\x7c\xcb\x39\x3f\x0c\x63\x0b\xb5\x89\xfd\xd9\xa0\xd8\x85\x6d\xf3\x32\xba\xc0\xec\x0f\x9b\x57\x73\xdb\x66\x7d\x2a\xb8\x46\xfb\xd4\x5e\xc5\xdf\xc5\xfd\xbd\xe1\x22\xac\x7a\x59\x11\x5b\xff\x82\x38\x5d\xb3\x2c\x25\xb5\x6d\x8f\xcc\xd7\x3a\xfc\xbc\x0d\x54\x87\x43\x8a\x6d\xf5\xdc\xd0\xbc\x22\xb9\xba\x63\xef\x98\x4d\xef\x6b\xb1\xd3\xf4\xcd\x06\xb9\x36\x99\x84\x1c\x25\x09\x73\x51\x2a\x14\x1b\x94\x61\x1f\x1e\x3c\x88\xd9\x23\x8c\xad\xd6\x99\x39\xc5\x2e\x2c\x28\xb1\x1b\xb6\x0f\x9d\xcd\xda\x87\xb6\xc6\xba\x73\xaf\x47\x4f\xa9\x2e\xf5\x63\x9a\x25\x2a\xd4\x6f\x2b\xf5\x07\x15\x3f\xd0\x75\x1f\xf9\x64\xa8\xef\x9e\x6e\xff\xb4\x5d\x66\x9d\x78\xb0\x34\x74\xb8\x8c\xdc\xde\x9b\xd7\xfe\x7f\x2c\xa4\x54\x63\xe7\x75\xcf\x10\x62\x2d\xde\x5d\x7c\xba\xd0\x92\xf1\x15\x89\x62\x55\x2e\x94\x96\x64\xd0\x87\xe1\x77\xdd\x5b\xdb\x13\xcf\x97\xdd\x7b\x34\x1c\x9b\x7c\xfa\xeb\xc5\xa7\x8f\x24\x38\x4d\x59\xa2\xdd\x7b\x82\x3a\x0d\x4e\x2c\x77\xcb\x7f\xcd\xe5\xcf\xfd\x3d\xfa\x06\x51\xbd\xcb\xd6\x4f\x10\xb4\xd4\x22\x11\x79\x91\xa1\x46\xd2\xbe\x2f\x01\x28\x51\xca\x04\x47\xce\xf5\xcd\x7d\xa9\x76\xf9\xb8\x77\xff\xaf\x00\x00\x00\xff\xff\x1d\x55\x24\xb8\x73\x1a\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 6771, mode: os.FileMode(436), modTime: time.Unix(1738764336, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xcd\x72\xdb\x36\x10\xbe\xe7\x29\xb6\xc8\xa5\x9d\x06\x84\x64\x27\x33\xad\x4b\xe9\xd0\x9f\xf4\x92\x66\xd2\xd6\x39\x75\x3a\x1a\x90\x58\x89\xb0\x40\x80\x05\x96\x92\x55\x8f\xdf\xbd\x03\x92\x92\x28\x5a\x72\xe4\x8e\x46\x07\x92\x8b\xc5\xb7\x1f\xf6\x07\x58\x28\xfd\x4a\xb9\x9c\x36\x15\x42\x41\xa5\x99\xbe\x4a\xe3\x03\x8c\xb4\x8b\x09\x43\xcb\xa6\xaf\x00\xd2\x02\xa5\x8a\x2f\x00\x69\x89\x24\x21\x2f\xa4\x0f\x48\x13\x56\xd3\x9c\x7f\xc7\xfa\x43\x56\x96\x38\x61\x2b\x8d\xeb\xca\x79\x62\x90\x3b\x4b\x68\x69\xc2\xd6\x5a\x51\x31\x51\xb8\xd2\x39\xf2\xe6\xe3\x0d\x68\xab\x49\x4b\xc3\x43\x2e\x0d\x4e\xc6\x6f\x20\x14\x5e\xdb\x25\x27\xc7\xe7\x9a\x26\xd6\x6d\xa1\x8d\xb6\x4b\xf0\x68\x26\x2c\xd0\xc6\x60\x28\x10\x89\x41\xe1\x71\x3e\x61\x05\x51\x15\x6e\x84\x08\x24\xf3\x65\x25\xa9\x48\x32\xe7\x28\x90\x97\x55\xae\x6c\x92\xbb\x52\xec\x04\xe2\x6d\xf2\x2e\xb9\x12\x79\x08\x7b\x59\x52\x6a\x9b\xe4\x21\x30\x78\x81\xb1\xdc\x29\x4c\xee\xfe\xa9\xd1\x6f\x1a\x0b\xb5\x16\xe3\x64\x7c\x95\x8c\x05\x15\x58\x62\x10\x99\x0c\x28\x5a\x05\x5e\xeb\x06\xbf\x83\x27\x4d\x06\xa7\xef\x8d\x5b\x17\xae\x0e\x98\x8a\x56\xd0\x0e\x36\x16\xdb\x77\x80\xd7\x79\x1d\xc8\x95\x33\x83\x0b\xb4\x0a\x1e\x3a\x31\x40\x29\xef\x79\x81\x7a\x51\xd0\x0d\xbc\x1d\x8d\xaa\xfb\x1f\x76\x43\x6e\x85\x7e\x6e\xdc\x9a\x6f\x6e\x40\xd6\xe4\xb6\x23\x8f\xdd\x33\x21\x99\x19\xe4\xa1\x04\xea\x23\x56\x52\x29\x6d\x17\x37\x30\x4a\xae\xde\x79\x2c\x0f\xa7\xa5\xa2\xe5\x05\x00\x31\x1d\xc4\x36\x1f\xd2\xcc\xa9\x4d\xc7\xdc\xca\x15\xe4\x46\x86\x30\x61\x56\xae\x32\xe9\xa1\x7d\x70\x25\xfd\x12\x02\xe9\x7c\xb9\xe1\xe4\x2a\xc8\x16\xad\x68\x6e\xf0\x9e\x97\x8a\x5b\xb7\xf6\xb2\x82\x8a\x8f\xd8\x76\xe1\xa9\x3c\x84\xe2\x99\x97\x56\x41\xee\x0c\x0f\x25\xbf\x6e\x5e\x4a\xc5\xaf\xa0\xf4\x7c\xb4\x0d\xcd\x6b\xd6\x77\xaa\xec\x68\x09\x2b\x57\xdd\xab\xd2\x3b\x86\x31\x2b\xa5\xb6\xe8\xf9\xdc\xd4\x5a\xed\x0d\xf7\x74\xbc\x5b\xef\xe4\xc3\xd9\x9d\xf9\x48\xde\x22\xa8\xf8\x95\x19\x97\x2f\xe3\xe2\x4c\x8c\x0b\x04\xad\x30\x3a\xa1\xe2\xe3\x1e\xca\x21\x4e\xa7\xc3\x5b\xe7\x1c\xa8\x01\xa4\x73\xe7\xcb\xa1\x48\xa3\x51\x01\xe9\x50\xdc\x1b\xd8\x22\xc7\xb9\x7c\xe1\x5d\x5d\xb1\xa1\x6e\x4c\xf0\x26\x9f\xa6\xb7\xba\x44\xf8\xfa\xf3\xed\x4f\xdf\xa4\xa2\x13\x3d\xd5\x3d\xe9\x90\xe3\x3a\xb9\x33\x47\x75\xa2\x55\x99\xa1\x81\xb9\xf3\x13\x46\xba\xc4\x59\x20\xe9\x89\x4d\xff\x8c\x8f\x54\x34\xa3\x27\x66\x6a\x5b\xd5\x04\x71\x8f\x9a\x30\x25\x09\xe3\x74\x6e\x5c\x2e\x0d\xeb\xf6\x9b\x1e\xe0\x81\x0b\x62\x9c\xbd\x33\x50\xf2\x71\x13\x09\xd0\xea\xd0\xfa\xb1\xe5\x08\xa5\x57\x17\x5c\x27\x5a\xc5\xa6\xbf\x58\x75\x91\x35\x46\xb0\x33\x57\xd8\xd8\x3d\x7f\x7d\x47\xc5\xa9\xd8\xa7\xdc\x45\x72\xee\xbd\x36\x84\xfe\x0b\xf9\x16\x97\x30\x6f\x14\xc3\x31\xa8\x13\xfc\x2f\x97\xa9\x59\x4d\xe4\x6c\x17\x8c\xf6\x83\xf5\x48\x7d\x32\x75\xd8\x05\x21\x23\x0b\x19\x59\x5e\x79\x5d\x4a\xbf\x69\xde\x43\x19\xc3\xc1\xa6\xdf\xa6\xa2\x9d\x7d\xc9\x30\x0c\x46\xfe\x57\x14\x7e\xf4\x28\x97\xca\xad\xed\x19\x81\xc8\xb6\xba\xc7\x62\x71\x9e\xdb\xcf\x75\x7c\x3c\xff\xd0\x60\x4e\x5d\xc6\xef\x4c\xb3\x43\x26\xa7\x2b\x00\xda\x13\x93\xb7\x30\x0c\xca\xda\x90\xae\x0c\x42\xd0\xff\xe2\x84\x3d\x3c\x40\xd2\xac\xfd\x67\xb7\xb6\x1f\xd0\xc2\xe3\xe3\x8e\xca\xc3\x03\x07\x2f\xed\x02\x21\x79\x1f\x7d\xfa\x6b\xf4\x61\x80\xc7\xc7\x13\x54\x01\x52\x57\x51\xe3\x69\x68\x0a\xbb\x85\xff\xd0\x54\xff\x33\xb8\xcf\x42\xb6\xa0\xda\x59\x58\x49\x53\x77\x8c\x3f\xca\x12\x1b\xc4\x3e\x7e\x2a\x5a\xc5\xbe\x99\xd8\x24\x3c\xc7\x57\x6c\x09\x9f\x3d\x29\x15\xad\x27\x4f\x44\xf5\xe4\x4e\x79\x99\xdc\xee\xef\x89\xa1\xce\x4a\x4d\x6c\xeb\x97\x3f\x6a\x0b\xbf\xc7\xe6\xaa\x4d\x8d\x6e\x74\x70\x5c\x1e\x45\x4e\xc5\xe1\xc1\x7a\x40\xea\xf0\xa3\x94\xda\x0e\xce\xfc\xef\xa1\x6c\x7a\x90\xd8\x5a\x35\x6d\x88\x59\xf0\xf1\x08\x2a\xe2\xd7\x50\xdd\xf3\xb7\xc3\x8e\x21\x92\x8b\xdd\x32\xcd\x94\x5e\xb1\xe9\xc0\x03\x7b\x95\x7e\xa3\x37\x50\x4b\x45\xe4\x31\x60\x78\x8c\xef\x0e\xb1\x69\xd6\x62\x13\x1e\x74\xa6\x8d\xa6\xcd\x4d\xa1\x95\xc2\x83\x4d\xec\x16\xcb\xca\x48\xc2\xa1\xcf\x06\xe5\xdc\x9b\x31\xf3\x6e\xfd\xd7\x6c\xf6\xf1\xf3\x6f\xb3\xd9\xdf\x4f\x2a\x78\xd8\x1f\x45\x07\x1d\xdb\x81\xba\x02\xef\xc1\x36\x41\xda\x03\x77\xb5\x7f\x62\xf0\x44\xe1\xb3\xe9\xab\x97\xd4\xef\x97\x2a\xf7\xec\x9a\x7d\x79\xb5\x3e\x5b\x72\xfd\x0a\x7d\x46\xf1\x54\x55\x1e\xaf\xaf\x33\x03\xd3\x2f\x36\xc2\xfb\xd3\x8d\xd4\x20\x42\xcd\xd2\x7b\x11\xea\x45\x76\x30\x74\x51\xba\x47\xcf\xe8\x2e\x0c\x9d\xc5\xc3\xe4\xc5\xd2\xad\xf0\x69\x26\x6d\xcf\xef\x80\xb9\xb3\x6a\x78\x82\xf3\x53\x27\xf8\x11\xee\x4f\x6b\x71\x28\xd8\x16\x6d\xc8\xbd\xae\x08\x82\xcf\x4f\x5f\x28\xbb\xab\xe3\x75\x32\x4e\xc6\xcd\x0d\xf5\x2e\x5e\x50\x53\xd1\xce\x9d\xbe\x04\x6a\x7f\x37\xdd\xdf\x47\xef\x02\x3b\x0f\xec\x05\xb7\xea\xbb\xe1\xa5\xfa\x6c\x23\xeb\xf5\x3a\x59\x04\x92\xa4\xf3\x06\xb9\xd9\x31\x83\x30\x4e\x2a\xf4\xe7\xc3\xe4\xca\xde\x85\x24\x37\xae\x56\x73\x23\x3d\x36\x58\xf2\x4e\xde\x0b\xa3\xb3\x20\x3e\xc9\x4a\x7e\x92\x3e\xa0\x78\x97\x5c\x27\x23\x51\xc9\xf8\xf3\x01\xcf\x23\x2b\xe6\xdb\xdb\xe5\x53\xdd\x54\xb4\x37\xe1\x54\x34\x7f\xa2\xfc\x17\x00\x00\xff\xff\x86\xa6\x4b\x9d\x54\x11\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4436, mode: os.FileMode(436), modTime: time.Unix(1738762988, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

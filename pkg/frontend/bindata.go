// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package frontend generated by go-bindata.// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x6d\x73\xe3\xb6\x11\xfe\xae\x5f\xb1\xe1\xb9\x25\x78\x52\x28\x79\x6e\x26\x6d\xa5\x6a\x3a\xe9\xe5\xae\xe3\x4e\x6b\x5f\x6b\xa7\x5f\x74\xaa\x07\x26\x57\x22\x2c\x12\x60\x00\x50\x92\x73\xe3\xff\xde\x59\x80\xaf\x92\xf3\xe2\xe6\x8b\x44\x02\xfb\xec\x3e\xd8\x57\x70\xcf\x35\x6c\x44\x6e\x51\x9b\xf7\xaa\x92\x16\x96\x30\x5b\x8c\x46\x17\x2c\x55\x49\x55\xa0\xb4\x51\xac\x91\xa7\x4f\x6c\x53\xc9\xc4\x0a\x25\x59\x04\x5f\x46\x00\x84\x33\x96\x6b\x02\x6c\x94\x2e\xb8\xbd\x13\x05\x1a\xcb\x8b\x92\x49\x3c\xc0\x77\xdc\x22\x63\xdd\x63\x04\x53\xb8\x9c\xcd\x66\x11\x7c\x0d\x7f\x9a\xcd\xe0\x6b\xe8\xb6\xe2\x2d\x3a\xf4\x8f\x4a\xe2\xcd\x66\x63\xd0\xb2\x08\xde\xc2\x37\xb3\xe8\xad\xc7\x44\x8b\x11\x80\xd8\x00\xbb\x60\xc1\x1b\x2b\x0a\xbc\x77\xa6\x83\x28\xde\xf3\x9c\x45\xb0\x5c\x42\x10\x78\x5e\x00\x2f\xca\xb8\x67\xa7\xe6\x79\x54\xb3\x47\x99\xfe\x1f\xdc\x7f\x13\x6b\x94\xe9\x2f\x70\xee\x24\x50\xa6\x1d\x5f\xda\xf7\x51\xfa\x94\x57\x26\x88\xe2\x24\x17\xc9\x8e\xf1\x34\xfd\xe8\x56\x9d\xe4\x05\x0b\xe8\x34\x41\x14\x2b\xc9\x42\x53\x3d\x14\xc2\x86\x13\xf0\x0f\xff\xaa\x50\x3f\x45\x0b\x52\xb6\x55\x6a\x9b\x63\x9c\x64\x5c\x5b\x13\xe7\x8a\xa7\x2c\x4c\x2a\xad\x51\x92\xb8\x23\x14\x96\x3c\xd9\xf1\x2d\x9a\x70\x0e\xab\x30\x51\x1a\x9d\x74\xb8\x26\x42\xce\x18\x8c\x00\x0e\x42\xa6\xea\x10\x2b\x99\x71\x93\x25\x19\x97\x5b\x24\x8f\xd6\x89\x02\xac\x39\xdd\xd0\xa0\x41\x7b\x23\xff\xa1\x78\xfa\x9e\xe7\xf9\x03\x4f\x76\x2c\xd5\xfc\xf0\x3e\x1b\x04\xe8\x35\x90\x11\x40\xa9\xca\x2a\xe7\x16\x3f\x0a\xcc\x53\xc3\xa2\xc5\x88\x58\x8e\x5a\x2a\xad\xa3\x6a\x4e\x9d\x3f\xc9\x99\xbc\x2c\x51\xa6\xac\x5b\xbc\xc3\xa2\x24\x75\x41\x14\x67\xb6\xc8\x19\xd5\x40\x99\xf3\x04\xd9\xf4\xfe\xfe\xfa\xfb\x7f\xde\xdf\x4f\xb7\x93\x41\xd9\x44\x9e\x47\xa7\xe2\x7e\x43\x54\x3e\x7f\x5e\x05\x30\x1e\x16\xd8\x18\x82\xcf\x9f\xd7\x14\x43\xe7\x31\x76\xee\x2f\x07\xbd\xe6\x05\x79\xf3\x82\xd9\x4c\x98\x3a\x69\x9c\x0d\x00\x83\x39\x26\xf6\x44\x80\x5b\xab\x59\x20\xd2\xc0\x87\xa7\xb6\x79\x5d\x15\xb0\xec\x01\x62\x53\x3d\x18\xab\x85\xdc\x32\x27\xd5\x57\x16\xe7\xdc\xd8\x2b\x99\xe2\xf1\x66\xc3\x82\x55\x10\xc1\x18\x2e\x27\xbf\x20\xb6\x0e\x22\x27\xd1\x70\xeb\x79\x60\xcf\xf3\x0a\x07\x1e\x20\x36\xed\xf1\x3d\x61\xc9\x0b\x0c\x26\xdd\x91\x6b\xf6\x94\x95\xff\x21\xbc\x61\x2d\xf4\x54\xea\xf9\xcc\xe7\x1a\x0b\xb5\xc7\x9f\x77\xba\x2b\x9c\x73\x9f\xf7\xb5\xa8\x43\xad\x62\xe0\xfc\x4e\x87\x37\xc3\xfa\x24\xa8\xa1\x68\x74\xcd\xb0\x67\x96\x04\xfa\xef\xe3\xb1\x13\xd6\x68\x2b\x2d\xe9\x6f\x31\x7a\xee\x65\x69\xc9\xb5\xc1\x4f\x5c\xf3\xc2\x30\x63\xb5\xa7\x56\x0b\x1b\xab\x63\x53\xe6\xc2\xb2\xf0\xf7\x21\x51\x48\xab\xa4\x9f\x3b\xa5\x83\x4d\xc0\xfd\x37\x87\x22\x56\x6e\xe1\x96\x90\xb0\xf4\x2f\x8d\x9e\x65\x18\xc5\x05\x2f\x7b\x4a\x5c\xc4\x1a\x70\x6b\x3a\xc5\x44\xa5\xf8\xfd\xbf\xaf\xde\xab\xa2\x54\x12\xa5\xf5\x82\x6d\x51\x84\xe3\x70\x02\x21\x84\x51\x1d\xbc\xba\x43\x78\x6b\x66\xd5\x31\x58\xcd\xd6\xeb\x86\x85\x5f\xb8\x5c\x7b\xd1\xda\x94\x47\x38\xbf\x4e\xe0\x0b\xe9\x19\xf8\xe7\xa4\xca\xdb\x41\xf4\x03\x35\x37\x58\x42\xae\x12\x4e\x92\x71\xa6\x71\x53\x1f\x33\x78\x13\x44\xb5\x19\xea\xc5\x5f\x39\xd9\xe6\x8c\xde\xec\x60\x2c\xb8\xfd\x0f\x3f\x54\x4e\x91\x81\xa5\x5f\xe8\xf9\xde\x05\x55\x69\xf2\x96\x06\xe1\xe6\x25\x08\xf8\xf3\x09\x30\xce\x51\x6e\x6d\xb6\x00\x31\x1e\xf7\xc3\x81\x8d\xc6\x56\x72\x25\xd6\xbd\x88\x2c\x5a\xc9\x1d\x2c\x01\x57\xb3\x75\xb7\xb2\x87\xe5\x4b\xc1\xc0\xd5\xe5\xba\x29\x3f\x3a\xe2\xce\xcd\x96\x07\x8d\x7c\x97\xaa\x83\x0c\xba\x80\x52\x92\xb7\xeb\xa0\x4a\xb2\xbf\x72\xb1\x5c\x52\xba\xef\x29\xc5\xdb\xd2\x0c\x7d\xc9\x63\x4a\xc1\x6d\x9f\x6b\x82\x00\x89\x92\x56\xc8\x0a\xeb\x90\xbb\xdf\x13\x0a\xfd\x29\x3c\xe0\x70\x36\x9e\xf7\xaf\x56\xeb\x06\xe5\xb9\xd2\x6e\x7e\xfe\xb4\xca\x4e\x5d\x5c\x70\x9b\x64\x6c\xfa\xdf\x7e\xcf\x9e\x46\x9d\xde\x17\xa1\xfe\xca\x84\x79\xea\x9a\x20\x2c\xfb\xd3\x65\x71\xda\x4c\x86\x63\xa0\x05\xb5\xbd\x84\xa8\xee\x5e\x0f\xb3\x5a\x6c\xb7\xa8\x59\xe0\x87\x48\x70\xae\x61\xd8\x7d\x5f\x36\xbc\xaf\x07\x6e\xbf\xc8\x7a\xd7\x85\xba\xc2\x7c\x51\xba\x51\x13\xd2\x05\x23\x8c\x62\x83\x5a\xf0\x5c\xfc\x58\x37\xc1\x41\xdd\xc1\x12\x82\x37\x64\xd5\xe3\xba\x16\xb6\xe1\xb9\xc1\x81\xad\x76\x8a\xbf\xae\x96\x7f\x4d\x29\x5f\xc4\xfc\x91\x1f\x99\xdf\xb3\x4f\x25\xce\x21\xf8\xdb\x87\xbb\xc0\xcf\xb3\x4a\xe7\x73\x08\xa6\x4e\xc1\x5f\x88\xab\x7b\xf2\x7b\x29\xb7\xfc\xce\x03\x2c\x1e\x6d\x8d\x30\x55\x92\xa0\x31\xf3\xf6\x7a\xc3\x34\x09\x4e\xe8\x12\x6c\x2b\x33\x81\x63\xa6\xbb\xbc\x21\x7a\x6e\x9f\x12\xb6\x92\x29\x6e\x84\xc4\xb4\xdb\xf7\x91\x72\xb7\x9b\xfb\x54\xec\x29\xa0\x78\xb4\x2c\xb8\x56\xce\x3c\x6c\x54\x45\x89\xdc\x4a\x37\xc7\x6b\x17\x9e\xdb\x16\x2d\x53\xd4\xde\x87\xce\xa0\xc7\x3c\x7b\xd2\xa8\xb5\xd2\x3d\xca\x03\x8e\x2f\x32\x38\x66\x3a\xd6\x68\x4a\x25\x0d\xde\xe1\xd1\x46\x6d\x19\x3e\x47\x83\xd0\x9d\x1b\xf6\xb9\xa2\x91\x32\xe5\x13\x2f\x79\xec\xc6\x99\xdf\xa4\x7c\x2d\x58\x14\x35\x4d\xd6\xbb\x06\x56\xeb\x9f\x6a\xa6\xa4\x27\x76\xc8\x17\xfa\x68\x0b\x78\xf4\x80\xc7\x3e\x80\xda\x69\x83\x79\xec\x30\x3e\x26\x8f\x14\x8f\x59\x3f\x0e\x35\xa4\x25\xd3\x77\x2e\xd5\x76\x5f\xef\xea\xb1\x15\x21\x65\x02\xbe\x3a\x51\xe6\x4d\x9c\xae\xd6\x8a\xc8\x1b\x57\xd2\xb2\x63\x74\x16\xc5\xe6\xbf\xb3\x03\x4b\x38\x76\x2d\xd0\x65\x74\xed\xb3\xfa\x66\xbc\x17\xa6\xa2\x0a\xf4\x35\xc2\xb5\xe6\x4f\x77\xea\x3b\x4a\x5d\xfe\x90\x23\x73\x11\x69\x6f\x26\xbe\xd3\x53\x60\x3c\x2b\x61\x6e\x2d\x4f\x76\x98\xce\xc1\xea\x0a\x7d\xb2\x58\x61\x73\x9c\x43\xf8\x31\x57\x07\x78\x28\x4d\xe8\x97\xb3\x6f\x8f\xc2\xcc\xdb\xe3\x34\x52\xf4\xe5\x13\x4e\xfa\x8b\x94\x2e\xb7\xf6\x89\x76\xbb\xb3\x27\x2a\xa7\x0c\x0c\xdf\xbc\x7b\xf7\x2e\x1c\x9c\xb6\x4e\xd1\xfd\x50\x7d\x21\xa4\xbb\xf6\xcd\x61\xd6\x97\xca\x50\x6c\x33\x3b\x07\x93\x68\x44\x19\xfb\x57\x78\x0b\xb3\xf8\x0f\x13\xdf\x94\x5d\x26\x7f\xab\x91\xcf\xe1\xcb\x41\xa4\x36\x9b\x43\xf8\xc7\xd9\xef\xc2\x49\x8b\x75\xaf\xce\x9b\xce\x2f\xf4\x21\xf7\xa2\x2f\x49\x89\xcf\xeb\xe6\x13\x98\xbe\xf4\x3e\xe4\x48\x8f\x7f\x7d\xba\xa2\xaf\xa5\xa6\x6c\xc2\x28\x8a\xa9\x89\x31\xdf\x0b\x6a\x3f\xfb\x6b\x4b\x57\x2b\xa7\xdf\x98\x29\xb7\x38\xb8\xdc\xd1\x42\x6c\xd5\xd5\xed\xcd\xad\xbf\x9b\x47\xf5\x3d\x9d\xcd\x26\x70\xf9\xcd\xb0\xf2\x7e\xe6\x6a\x3c\xec\x85\x70\x41\xc4\xff\x7e\x7b\x73\xcd\x82\x69\x2a\x12\xeb\x67\x82\x99\x06\x63\x27\x3d\xe9\x1a\x43\x57\xc0\x5d\x6f\xf8\x95\xb7\xf8\xca\xaa\x44\x15\x65\x8e\x16\x59\x3f\xe7\x01\x8c\xaa\x74\x82\x73\x97\xb8\x93\x2e\xe7\x7b\x97\xc4\xe7\xff\x05\x00\x00\xff\xff\xe1\x20\xb5\x3f\x7e\x10\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 4222, mode: os.FileMode(436), modTime: time.Unix(1600786625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x4f\x6f\xdb\x36\x14\xbf\xf7\x53\xbc\x71\xc7\x95\x62\xdc\xb4\xc0\x56\x48\x3e\x0c\x5b\x77\xe9\x8a\x6e\xeb\x4e\xc3\x60\x50\xe2\xb3\xc5\x98\x22\x35\xf2\xc9\x8e\x17\xe4\xbb\x0f\x94\x64\x5b\x56\xac\xd4\x19\x8c\x1c\x2c\x92\x8f\xbf\xf7\xf7\x47\xf2\x25\xfd\x46\xb9\x82\x76\x35\x42\x49\x95\x99\xbf\x4a\xe3\x0f\x18\x69\x57\x19\x43\xcb\xe6\xaf\x00\xd2\x12\xa5\x8a\x1f\x00\x69\x85\x24\xa1\x28\xa5\x0f\x48\x19\x6b\x68\xc9\xbf\x67\xc3\x25\x2b\x2b\xcc\xd8\x46\xe3\xb6\x76\x9e\x18\x14\xce\x12\x5a\xca\xd8\x56\x2b\x2a\x33\x85\x1b\x5d\x20\x6f\x07\xaf\x41\x5b\x4d\x5a\x1a\x1e\x0a\x69\x30\x9b\xbd\x86\x50\x7a\x6d\xd7\x9c\x1c\x5f\x6a\xca\xac\xdb\x43\x1b\x6d\xd7\xe0\xd1\x64\x2c\xd0\xce\x60\x28\x11\x89\x41\xe9\x71\x99\xb1\x92\xa8\x0e\xef\x85\x08\x24\x8b\x75\x2d\xa9\x4c\x72\xe7\x28\x90\x97\x75\xa1\x6c\x52\xb8\x4a\x1c\x26\xc4\xdb\xe4\x5d\xf2\x46\x14\x21\x1c\xe7\x92\x4a\xdb\xa4\x08\x81\xc1\x0b\x94\x15\x4e\x61\x72\xf7\x4f\x83\x7e\xd7\x6a\x68\xb4\x98\x25\xb3\x37\xc9\x4c\x50\x89\x15\x06\x91\xcb\x80\xa2\x13\xe0\x8d\x6e\xf1\x7b\x78\xd2\x64\x70\xfe\xc1\xb8\x6d\xe9\x9a\x80\xa9\xe8\x26\x62\x9c\xc5\x3e\xd0\x69\xee\xd4\xae\x97\xb7\x72\x03\x85\x91\x21\x64\xcc\xca\x4d\x2e\x3d\x74\x3f\x5c\x49\xbf\x86\x40\xba\x58\xef\x38\xb9\x1a\xf2\x55\x37\xb5\x34\x78\xcf\x2b\xc5\xad\xdb\x7a\x59\x43\xcd\x6f\x7a\xd5\x00\xa9\x3c\x85\xe2\xb9\x97\x56\x41\xe1\x0c\x0f\x15\xbf\x6d\x3f\x2a\xc5\xdf\x40\xe5\xf9\xcd\xde\xe7\x6f\xd9\xd0\x5a\xd9\x9b\x25\xac\xdc\xf4\x9f\x4a\x1f\x2c\x8c\xe9\x96\xda\xa2\xe7\x4b\xd3\x68\x75\x54\x3c\x90\xf1\x6e\x7b\x98\x1f\xef\xee\xd5\x47\xe3\x2d\x82\x8a\xa3\xdc\xb8\x62\x1d\x9d\x33\x7a\x55\x12\x04\xad\x30\x06\xa1\xe6\xb3\x01\xca\x29\x4e\x2f\xc3\xbb\xe0\x9c\x88\x01\xa4\x4b\xe7\xab\xf1\x94\x46\xa3\x02\xd2\xe9\xf4\x60\x61\x8f\x1c\xf7\xf2\x95\x77\x4d\xcd\xc6\xb2\xb1\x72\x70\x85\x56\xcd\xbf\xe8\x0a\x53\xd1\x0f\x9e\x4a\x4d\x86\xe2\xbc\x4c\xe1\xcc\x59\x99\xa8\x4f\xe6\x68\x60\xe9\x7c\xc6\x48\x57\xb8\x08\x24\x3d\xb1\xf9\x1f\xf1\x27\x15\xed\xea\xc4\x4e\x6d\xeb\x86\x20\xd2\x3e\x63\x4a\x12\xc6\xed\xdc\xb8\x42\x1a\xd6\x53\x78\x00\x78\xe2\x7c\xcc\xb0\x77\x06\x2a\x3e\x6b\x73\x00\x5a\x9d\x6a\x3f\xe7\x8e\x50\x7a\x73\x45\x3f\xd1\x2a\x36\xff\xd9\xaa\xab\xf8\x18\xc1\x2e\xf4\xb0\xd5\x7b\xb9\x7f\x67\xa7\x53\x71\x2c\xb6\xab\x54\xdb\x07\x6d\x08\xfd\x57\xea\x2d\xba\xb0\x6c\x05\xc3\x39\xa8\x09\xfb\xaf\x57\xa9\x79\x43\xe4\x6c\x9f\x8c\x6e\xc0\x06\x46\x7d\x36\x4d\x38\x24\x21\x27\x0b\x39\x59\x5e\x7b\x5d\x49\xbf\x6b\xbf\x43\x15\xd3\xc1\xe6\xdf\xa5\xa2\xdb\x7d\xcd\x34\x8c\x56\xfe\x57\x16\x7e\xf4\x28\xd7\xca\x6d\xed\x05\x89\xc8\xf7\xb2\xe7\x72\x71\x59\xd8\x2f\x0d\x3c\x40\x1a\xd0\x60\x41\x7d\xc5\x1f\x54\xb3\x53\x4b\xa6\x19\x00\x45\x13\xc8\x55\xbc\x83\x61\x50\x35\x86\x74\x6d\x10\x82\xfe\x17\x33\xf6\xf0\x00\x49\xeb\xfb\x4f\x6e\x6b\x3f\xa2\x85\xc7\xc7\x83\x29\x0f\x0f\x1c\xbc\xb4\x2b\x84\xe4\x43\x8c\xe9\x2f\x31\x86\x01\x1e\x1f\x27\x4c\x05\x48\x5d\x4d\x6d\xa4\xa1\x25\x76\x07\xff\xb1\x65\xff\x33\xb8\xcf\x42\x76\xa0\xda\x59\xd8\x48\xd3\xf4\x16\x7f\x92\x15\xb6\x88\x43\xfc\x54\x74\x82\x43\x35\x68\xd5\xb3\xf6\x8a\xbd\xc1\x17\x6f\x4a\x45\x17\xc9\x89\xac\x4e\x9e\x94\xd7\xa9\xed\xe1\x99\x18\x9a\xbc\xd2\xc4\xf6\x71\xf9\xbd\xb1\xf0\x5b\x7c\xaf\x74\xa5\xd1\xaf\x8e\x2e\xca\xb3\xc8\xa9\x38\xbd\x52\x4f\x8c\x3a\x1d\x54\x52\xdb\xd1\x6d\xff\x03\x54\xed\xeb\x43\x36\xe4\xda\x07\x88\x59\xf1\xd9\x0d\xd4\xc4\x6f\xa1\xbe\xe7\x6f\xc7\x6f\x85\x68\x5c\x7c\x80\xd2\x42\xe9\x0d\x9b\x8f\x94\x45\x05\x23\xd5\xe7\x0c\x39\xa0\xb5\x4f\xbc\xf8\x60\x0d\x3a\xd7\x46\xd3\xee\x7d\xa9\x95\xc2\x93\xd3\xe9\x0b\x56\xb5\x91\x84\xe3\x60\x8c\x78\x3a\xd8\xb1\xf0\x6e\xfb\xd7\x62\xf1\xe9\xcf\x5f\x17\x8b\xbf\x9f\x50\x73\xfc\xe4\x89\x9e\x9f\x3b\x5a\x7a\xe6\x0e\x60\xdb\xe8\x1f\x81\x7b\x52\x4f\x2c\x4e\x30\x9a\xcd\x5f\xbd\x84\x98\x5f\xa3\xe4\xc5\x64\x7c\x39\x0d\x9f\xe5\xd2\x90\x7a\xcf\x08\x4e\xd1\xed\x3c\x71\x2e\x4c\xcc\x90\x45\x84\xf7\xd3\x2f\xa4\x51\x86\x5a\xd7\x07\x19\x1a\x64\x76\xb4\x74\x55\x73\xcf\x5e\xbe\x7d\x1a\x7a\x8d\xa7\xc5\x8b\x95\xdb\xe0\xd3\x4a\xda\x5f\xcc\x01\x0b\x67\xd5\xf8\x6a\xe6\x53\x57\xf3\x19\xdb\x9f\x72\x71\x3c\xb1\x27\x6d\x28\xbc\xae\x09\x82\x2f\xa6\x9b\xaf\xbe\xcd\xba\x4d\x66\xc9\xac\xed\xe6\xee\x62\x33\x97\x8a\x6e\xef\xfc\x25\x50\xc7\x3e\xee\xd8\xbb\xdd\x05\x76\x19\xd8\x0b\x3a\xd0\xbb\x71\x03\x7a\xb1\x92\xed\x76\x9b\xac\x02\x49\xd2\x45\x8b\xdc\x1e\x85\x41\x18\x27\x15\xfa\xcb\x61\x0a\x65\xef\x42\x52\x18\xd7\xa8\xa5\x91\x1e\x5b\x2c\x79\x27\xef\x85\xd1\x79\x10\x9f\x65\x2d\x3f\xc7\x26\x5f\xbc\x4b\x6e\x93\x1b\x51\xcb\xf8\xe7\x03\x5e\x66\xac\x58\xee\x1b\xc6\xa7\xb2\xa9\xe8\x9a\xdb\x54\xb4\xff\x70\xf8\x2f\x00\x00\xff\xff\x16\xd1\x18\xbe\x80\x10\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4224, mode: os.FileMode(436), modTime: time.Unix(1600786369, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

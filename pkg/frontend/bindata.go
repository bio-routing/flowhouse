// Code generated for package frontend by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x73\xdb\x36\x12\xfe\xee\x5f\xb1\xa5\xdd\x10\xac\x15\x5a\x72\xd2\x66\x22\x57\x77\xd3\x2a\x71\xe3\x9b\xc4\xe9\xd5\x6e\x6f\xe6\x64\x9d\x0b\x91\x2b\x09\x36\x09\xb0\x00\x28\xc9\x4d\xfd\xdf\x6f\x00\xf0\x05\x94\xe5\x5c\x72\xbd\x8f\x97\xcc\x24\xf4\x62\xf7\xd9\xc5\x62\xdf\x00\xaf\xa8\x84\x39\xcb\x34\x4a\x35\x16\x25\xd7\x30\x82\xfe\xc9\xde\xde\x01\x49\x45\x52\xe6\xc8\x75\x14\x4b\xa4\xe9\x1d\x99\x97\x3c\xd1\x4c\x70\x12\xc1\x87\x3d\x00\x23\xa7\x34\x95\x46\x60\x2e\x64\x4e\xf5\x25\xcb\x51\x69\x9a\x17\x84\xe3\x1a\x5e\x51\x8d\x84\xb4\x9f\x11\x1c\xc1\xa0\xdf\xef\x47\xf0\x14\x5e\xf6\xfb\xf0\x14\xda\xa5\x78\x81\x56\xfa\x77\xc1\xf1\xfd\x7c\xae\x50\x93\x08\xbe\x82\x6f\xfa\xd1\x57\x4e\x26\x3a\xd9\x03\x60\x73\x20\x07\x24\xd8\xd7\x2c\xc7\x6b\xab\x3a\x88\xe2\x15\xcd\x48\x04\xa3\x11\x04\x81\xb3\x0b\x60\x27\x8f\xfd\xb6\x30\xf7\x7b\x95\xf5\xc8\xd3\xff\xc2\xf6\x3f\x65\x35\xf2\xf4\x3f\xd8\xdc\x72\x20\x4f\x5b\x7b\xcd\xba\x3b\xa5\x1f\xb3\x52\x05\x51\x9c\x64\x2c\xb9\x25\x34\x4d\x4f\x2d\xd5\x72\x1e\x90\xc0\xec\x26\x88\x62\xc1\x49\xa8\xca\x59\xce\x74\xd8\x03\xf7\xf1\xf7\x12\xe5\x5d\x74\x62\xc0\x16\x42\x2c\x32\x8c\x93\x25\x95\x5a\xc5\x99\xa0\x29\x09\x93\x52\x4a\xe4\x86\xdd\x1a\x14\x16\x34\xb9\xa5\x0b\x54\xe1\x10\x26\x61\x22\x24\x5a\xee\x70\x6a\x0c\xb2\xca\x60\x0f\x60\xcd\x78\x2a\xd6\xb1\xe0\x4b\xaa\x96\xc9\x92\xf2\x05\x1a\x8f\x56\x81\x02\xa4\xde\x5d\x57\xa1\x42\xfd\x9e\xbf\x15\x34\x1d\xd3\x2c\x9b\xd1\xe4\x96\xa4\x92\xae\xc7\xcb\xce\x01\x7d\x8e\xc8\x1e\x40\x21\x8a\x32\xa3\x1a\x4f\x19\x66\xa9\x22\xd1\xc9\x9e\xb1\x72\xaf\x31\xa5\x71\x54\x65\x53\x22\xb8\xd2\x55\xdc\x5f\x62\x5e\x18\x59\x18\x79\x6e\xae\x89\x41\x14\x2f\x75\x9e\x11\x93\x05\x45\x46\x13\x24\x47\xd7\xd7\xe7\x3f\xbf\xbb\xbe\x3e\x5a\xf4\x3a\x89\x53\x1f\x41\x05\x60\x0e\x89\x16\x05\xf2\x94\x74\x11\x9d\xc1\xce\x80\x03\xb7\x64\xad\xb6\xea\x7f\xad\xa4\xaf\xe7\x86\x74\x75\x35\x39\xf8\xe0\xeb\xb8\xbf\xba\x9a\xfe\x6a\x15\x75\xe4\x7f\xa1\x59\x89\x5d\xf9\x95\x21\x7d\xaa\xfc\x4f\x98\x8b\xd5\x16\x80\xb4\xb4\x47\x11\xcc\x5e\x3d\xe3\x63\x77\xfa\xdb\x45\xa2\x75\x34\x66\xe9\x39\xcd\x9d\x0e\xbd\x64\xaa\xca\x82\x93\x0e\x93\x81\x3b\x2f\x73\x8f\x89\x6a\x2d\x49\xc0\x4c\x4e\xe4\x54\x27\x4b\x72\x74\x95\x1e\x1e\x45\x93\xfe\xd4\x49\xfa\x0e\xa8\x98\x39\xcd\x31\xe8\xb5\x2a\x2b\x1d\x26\xcc\x2d\x9b\x22\x8d\xa2\x6d\xae\xfb\xce\xc6\x9c\x57\xaa\x4c\x7b\xb0\xb1\xda\xc2\x24\x13\x0a\x95\x26\x61\x2c\xc5\x3a\x34\x61\x62\xa4\x88\x8f\xe7\xfb\xef\xf0\xf0\x64\xef\x7e\xcf\x8b\xcc\x82\x4a\x85\x3f\x52\x49\x73\x45\x94\x96\x0e\x5e\xa2\x2e\x25\x07\xa5\x65\xac\x8a\x8c\x69\x12\x3e\xb1\xd0\x69\x99\x78\x3e\x2e\xac\x54\x0f\xec\xff\x5d\x87\x4f\x6e\xf1\xae\x07\x36\x08\xa6\x30\x72\x1c\x35\xd4\x28\x34\xce\x2c\x48\x8a\x89\x48\xf1\xe7\x9f\xce\xc6\x22\x2f\x04\xc7\x2a\x84\xc1\x71\x2b\x03\x61\x64\x2d\x48\x1b\xfd\x57\x87\x26\xf0\x43\x08\x2b\xe6\xca\x54\x27\x63\x37\xdd\x83\x0f\x66\xe3\xf7\xfe\x26\xb7\xd2\xb3\xe9\x20\xbf\x99\xaa\x04\x23\xc8\x44\x42\x0d\x67\xbc\x94\x38\xaf\x0c\x0d\xf6\x83\x68\x32\x98\xd6\x45\xf4\x0b\xcb\x5b\x6f\xd3\xa9\xed\xd4\x73\xbb\xfe\xfa\xb7\xd2\x02\x29\x18\x39\x82\xe7\x40\xc3\x3d\x17\x12\x88\xe1\x66\xb6\xd1\x01\x83\x6f\xb7\x04\xe3\x0c\xf9\x42\x2f\x4f\x80\x1d\x1e\xd6\xda\x6c\xbb\xa8\x11\x1b\xce\x09\x9b\x7a\x3e\x3d\x69\x38\x6f\x61\x04\xd8\x84\xa8\xa1\xac\x60\x04\x0f\xdd\x4d\x70\x32\x98\xba\x10\x71\x5b\xbc\xb5\x4d\x61\x26\x91\xde\xa6\x62\xcd\x9b\xee\xe0\xea\x4a\x43\x07\x51\x18\xfd\x13\x7b\x32\xa3\x00\x0e\x61\x05\x87\x10\x4c\x83\x2a\x5f\x42\x85\x19\x26\x1a\xd3\xb0\x07\xed\x77\x65\xa0\x8d\x10\xcd\x78\x89\xee\xe7\x7b\xfb\xef\x96\x09\x7e\xfb\xec\xd8\xf0\xa0\xaf\xae\x3e\x1b\xd6\x76\xb8\x87\xa0\x6d\xe3\x7b\x1c\x72\x1b\x4e\x14\xa7\x99\x58\xab\x6d\xb8\x86\xfc\xc9\x70\x75\x71\xf9\x97\x5f\x7d\x8f\xa2\x16\x77\xa7\xa8\x1b\x9d\x30\x4b\xcf\x78\x8a\x1b\x18\xf9\x5d\xe6\xa4\x69\xeb\x5b\x05\xdd\x1c\x97\x27\x74\x08\xc1\xd5\xd5\xb4\x32\xf5\xf6\xf3\xc5\xb4\x64\x8b\x05\x4a\x12\xb8\x02\x1c\x3c\x44\xa8\x3b\xc1\xc7\x14\xaf\xaa\xc6\xeb\xe7\xac\x37\x36\x54\x09\x8b\x2b\xe4\x3a\x2e\xa4\xfd\xff\x15\xce\x69\x99\x69\xe2\xe2\xf7\xe8\x08\x7e\xa1\x19\x4b\x4d\x1b\x0d\xeb\x03\x08\x61\x26\x36\x4d\xaf\xa9\xa9\xb6\xba\x87\xcd\x29\x85\x5e\x27\xe8\x32\x9e\xd9\x61\xd4\xd6\xc7\x33\xae\x49\x4d\xee\xc1\xa0\xdf\x4c\x56\x4c\x9d\xd3\x73\xe2\x49\x44\xf0\xc7\x1f\x1d\x84\x6f\x61\xb0\x4d\xfa\x8b\x1d\xcf\xfa\xf5\xe9\xd2\x0c\xa5\x26\xc1\x19\x4f\x84\x94\x98\x68\x08\x2f\x45\x01\xce\xb8\x21\x14\x19\x52\x85\x80\x5c\xa3\x04\x6a\xaa\x21\x4b\x81\x71\x8d\x0b\x94\x30\x43\xbd\x46\xe4\x30\x00\xca\x53\x87\x1a\x07\xdd\xc2\x38\xa7\x99\xc2\xa6\x4e\xb9\x32\xe9\x5c\x60\x66\xb5\x30\x8a\x15\x4a\x46\x33\xf6\x7b\xd5\x33\x2a\x8e\xc3\x11\x84\x4f\x6a\xa3\x47\x21\x1c\x02\xf2\x07\xf5\xa3\x5e\xb7\x82\x9d\x12\x0a\x23\x08\xf6\xcd\x89\x3b\xb8\xbd\xae\x39\x9d\x73\x6e\x26\xa9\xcf\x2b\xcb\x9f\x52\x95\x0f\x62\x7a\x43\x37\xc4\xad\xe9\xbb\x02\x87\x10\xfc\xf0\xfa\x32\xe8\x59\x42\x29\xb3\x21\x04\x47\x16\xe0\xaf\xc6\x56\xfb\xe5\xd6\x52\xaa\xe9\xa5\x13\xd0\xb8\xd1\x95\x84\x2a\x93\x04\x95\x1a\x36\x23\x26\x91\x86\xb1\x67\x2e\x22\xba\x54\x3d\xd8\x2c\x65\x9b\xb3\xc6\x3c\xbb\x6e\x8a\x45\xc9\x53\x9c\x33\x8e\x69\xbb\xee\xb2\xc4\x4e\x98\xd7\x29\x5b\x99\x64\xc2\x8d\x26\xc1\xb9\xb0\xea\x61\x2e\x4a\x53\x93\x1a\xee\x7a\x7b\x0d\xe1\x7e\xaf\x26\xf3\x14\xa5\xf3\xa1\x55\xe8\x64\xee\x9d\xd1\x28\xa5\x90\x9e\xc9\x1d\x1b\x77\x5a\xb0\x59\xca\x58\xa2\x2a\x04\x57\x78\x89\x1b\x1d\x35\x15\xf5\x3e\xea\x1c\xdd\x43\xc5\x16\xb8\x90\x68\x42\xec\x47\x5a\xd0\xd8\xa6\x8f\x5b\x34\xb5\x22\x27\x91\x4b\xd8\xf6\xda\x87\x66\xf2\x9c\x18\x99\xd8\x70\x4d\xfa\xd3\xe9\x83\x46\x39\x70\x8d\xb2\x61\x7a\xac\x47\x4a\xb1\x36\x29\xdb\x60\x31\xaf\x07\x2e\xa9\x3a\x17\xfc\x9f\x28\x05\x8c\x0c\x63\xac\x32\x96\x20\x19\x44\xb1\x12\xb9\x37\xd5\xac\x68\xd6\xfa\xc7\x08\x72\x3b\x11\xda\x8d\x9c\x66\x82\x6a\x62\x58\x4c\x4e\x87\x61\xd4\xee\xc9\x3f\x21\xf8\xc2\xd5\x05\x5e\xe6\x11\x3c\x79\x62\x11\xbe\x18\xd9\x8b\xad\xf5\x64\xc5\x6e\x02\xa4\xb5\xaa\x55\x5a\xfb\x25\x2e\x4a\xb5\x24\x52\xac\xa3\xb6\xa7\x35\xd3\x86\x0b\x2c\x98\x3c\x74\x56\x35\x55\x34\x28\x3b\x7c\x55\x39\xa7\x91\xf7\x10\x6e\x1c\xc2\x8d\x87\x60\xe6\x8c\x1a\xe4\xa6\x05\x71\x76\x98\xbe\xe3\x31\x4e\x6e\xa6\x27\x5e\xfc\x33\xb7\x6f\xe3\x84\x1b\xf7\xe9\xc7\xff\x66\xcb\xaf\x9b\x47\xbc\xea\xd7\xda\x4d\x14\x59\xb9\x7e\xbd\x58\x67\x41\xb5\xa7\xc9\x8d\xd9\xd6\x66\xcb\x63\x95\xb7\xaa\x5b\xdd\x8a\xa9\xd2\x94\x3c\x57\x5b\xa8\x94\xf4\xee\x52\xbc\x32\x29\x4f\x67\x19\x12\x1b\xc9\x27\x95\x9f\xdd\xac\x63\xe2\xd9\xd9\xcd\xd4\x85\xa6\xc9\x2d\xa6\x43\x57\xcb\x5c\x92\x69\xa6\x33\x1c\x42\x68\xca\x21\xbc\x9b\x15\x2a\xf4\xe8\x26\x87\x2e\xf4\x9d\x61\x68\x8e\x58\x70\x7d\xc1\x7e\xc7\x21\x1c\x3f\xef\x55\xb4\x99\xc8\xd2\x21\x68\x59\x62\xaf\xe9\xfa\x99\x49\xdd\x70\xff\xd9\xb3\x67\xa1\x9f\xd3\xcb\xef\x36\x4c\xb5\x68\xb5\xf6\x4b\x96\x63\xd8\xf3\x89\x3b\x54\x6f\xc1\xf6\x5a\x1f\x6b\x9a\xb1\xa4\xb3\xad\xdd\x66\xf9\xe6\x0f\x9e\xd7\xc7\x50\xaf\x2e\x24\x4b\x33\xc6\x51\xed\x54\x39\x7f\x66\xfe\x7a\x5a\x13\x73\x2b\x19\xc2\xa0\xbf\x8d\x93\x33\x2e\xe4\x0f\x1f\x05\xc3\x97\xe6\x6f\xb8\x2d\xe9\x9e\x54\x86\x10\xbe\x79\x33\xcc\xf3\xa1\x52\xad\x4f\x3e\xc3\x1d\xde\x1e\x8f\x3b\xa1\x56\xe9\x59\x75\xcf\x20\x67\xdc\x5e\xef\x86\xd0\xef\x6d\x1d\xcb\x3b\x5c\xd0\x19\xd3\x0a\x0a\x94\xa0\x30\x11\x3c\xfd\xff\x29\xfd\x4f\xcf\x62\x89\x6c\xb1\xd4\x43\x50\x89\x44\xe4\xb1\xfb\x11\xbe\x82\x7e\xfc\xc2\x31\xd8\x1e\xf7\x9d\x44\xda\x2a\x5b\xb3\x54\x2f\x87\x10\xbe\xec\x7f\x19\xf6\xa0\x22\xd6\x40\xe1\x0b\x43\xad\x2d\x15\xc5\x10\xc2\xaf\x5b\xc2\x8c\x26\xb7\x0b\x69\xda\xf3\xd8\xd9\xdb\x6e\x40\x69\x29\x6e\xcd\xa1\xef\x27\x49\xe2\xed\xc0\xd1\xff\xe1\x74\x0e\x76\xed\xe1\x01\x68\xb8\x3f\xb7\x7f\x2a\x14\xeb\x1a\x35\x84\x49\xb8\x7f\x3c\x78\xf9\xcd\xe9\x33\x73\xbb\xda\x7f\x3e\xfe\xee\xf4\xeb\xbe\xfd\x3c\x3d\x1d\x0f\xfa\x2f\xaa\xcf\xaf\x5f\x1c\x1f\xdb\xcf\x97\xe3\xe3\x17\xdf\xf7\xc3\xa9\x03\xa1\x9c\xe5\xb6\xea\xb5\x36\xdb\xdb\x54\x59\x74\x83\x27\x2d\x65\xc5\x66\x86\xca\x9a\x8a\x54\x31\xbe\x18\x42\x28\x4a\xdd\xa9\x47\x19\x2e\x90\xa7\x2d\x66\x21\x14\x73\xe2\x21\x17\x1c\x3b\xbc\x5a\x88\x4c\xb3\xc2\xab\x5e\x7f\x32\x10\xea\x55\xb5\x14\x6b\xeb\xba\xb1\x48\xd1\x6d\xa7\x63\x23\xe3\xb5\xff\x8f\x1d\xa5\x10\xac\xa9\xc2\xd5\x80\x87\x92\xf9\x51\xdc\x1f\xc2\x07\x2b\xf8\x8a\xaa\x65\x65\xe3\xe4\x79\x0f\x9e\x4f\x5b\xb5\x83\x5d\x3c\xc7\x3d\x38\xf6\x78\x8e\x1f\xc1\xf1\x79\x9e\x3d\x82\xe3\xeb\x7a\xbe\x8b\x67\xd0\x83\xc1\xb4\x8e\x25\xd3\xf0\x9a\x01\xcb\x46\x3d\x8c\xec\x9b\xf1\xce\xd6\x67\x32\xc2\x8d\x6f\xf5\x6b\x7b\xbc\x40\xfd\x3a\x43\xf3\xf9\xfd\xdd\x59\x4a\xc2\x66\x3a\x0c\x5d\x3f\xb6\x3f\xc7\x66\x68\x27\x6e\xf6\xad\x1a\xa4\xff\xac\x98\x94\x4a\x8b\xfc\xad\x0d\x8a\x57\xcc\x3e\x3e\x3c\x0a\x6f\x59\xaf\x5d\x00\xb9\x37\x82\x2d\xe9\x98\x71\x8e\xf2\xcd\xe5\xbb\xb7\x30\x82\x30\x3c\x31\x77\xbd\x71\x86\x54\x02\xe5\x77\x80\x1b\xa6\x34\xe3\x8b\x2a\x04\x5b\x13\x6c\xb6\xc0\xa8\x36\x2f\x76\x84\x13\x9f\xa1\xcc\x6d\x5f\xb7\x03\xe5\x02\xf5\x79\x99\xcf\x50\xbe\x9f\x8f\xdd\x0a\xf1\x77\xa4\xcd\x60\xe0\xef\x23\x91\x48\x35\x56\x5b\x21\xa1\x5d\x77\xe6\xdb\xcf\x38\xc9\xa8\x52\x6f\x99\xd2\x31\x4d\xd3\x7a\xbd\x07\xee\xe3\xa9\xca\xdb\xef\x99\x90\xa9\x19\x9e\x42\xff\x0a\x3a\x13\xe9\xdd\xc7\xd4\x99\xf5\xb0\x7a\xdd\x33\x93\x5b\x86\xda\x1f\x94\xab\xcd\x75\x66\x3e\x87\xec\x26\xe4\x47\x71\x65\xd8\x79\x12\xb5\x4e\x1b\x63\x96\x7d\x4c\x26\x6d\x65\x2a\xee\x58\x99\xd0\x8c\xb7\x2a\x1a\x8c\xaa\x53\x99\x10\x06\x4f\x61\x10\xc1\x97\x15\xa1\x9a\x2e\xa7\xbb\x61\x6c\xa1\x36\x67\x7f\xdc\x2f\x36\xa1\x6f\x5e\x46\x67\x98\x7d\xb2\x79\x0d\xb7\xbd\xe5\x8c\x05\xd7\x68\x6f\xf8\xf5\xf9\xbb\x73\x7f\x6b\xb8\x08\xab\x2f\xd1\x62\x5d\xbd\xa2\x8f\x97\x2c\x4b\x49\x63\xdb\x23\xeb\x8d\x8e\x6a\xdd\x1e\x54\x87\xc3\x8d\xf3\x76\xb1\xbd\x73\xb8\xba\x63\x1f\x46\xda\xf9\xd8\x62\xa7\xe9\xeb\x15\x72\x6d\x22\x09\x39\x4a\x12\xe6\xa2\x54\x28\x56\x28\xc3\x1e\x3c\x78\x14\xb6\x2d\x8c\x2d\x96\x99\xe9\x62\x17\x16\x94\xd8\x84\xed\x41\x27\x59\x7b\xe0\x6b\x6c\x26\xe9\xf6\x1a\xf3\x11\xd5\xa5\x7e\x4c\xb3\x44\x85\xfa\x4d\xad\x7e\xa7\xe2\x07\xba\xee\xa3\x2a\x18\x9a\x4b\xbb\xcb\x1f\xdf\x65\xd6\x89\x3b\x4b\x43\x87\xcb\xc8\x6d\xbd\xfb\x6e\xff\x72\x2d\xa5\x1a\x3b\x2f\xdc\x86\x10\x6b\x71\x76\xf1\xfe\x42\x4b\xc6\x17\x24\x8a\x55\x39\x53\x5a\x92\x7e\x0f\x06\xdf\x74\xaf\xbb\x1f\x79\xc2\xef\x3e\x40\xc0\x81\x89\xa7\xbf\x5d\xbc\x3f\x27\xc1\x51\xca\x12\xed\x1e\xc1\xd4\x51\x70\x68\xb9\x3d\xff\xb5\xb7\x66\xf7\xe7\xd1\x87\xb3\xfa\x77\x13\xcd\xbb\x19\x2d\xb5\x48\x44\x5e\x64\xa8\x91\x7c\xf0\x5e\x09\x00\x94\x28\x65\x82\x43\xe7\xfa\xf6\xb9\x20\x6a\xaf\x9f\xf7\xff\x0e\x00\x00\xff\xff\x26\xad\xeb\x07\x77\x1d\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 7543, mode: os.FileMode(436), modTime: time.Unix(1747733678, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\xb1\x2f\x1b\x56\x8a\x76\xd2\x00\x5b\x26\xf9\x61\xdd\xba\x97\xae\xe8\xb6\xf4\x69\x18\x0c\x4a\x3c\x5b\x4c\xf8\x47\x23\x29\x3b\x5e\x90\xef\x3e\x50\x92\x6d\x49\xb1\x53\x07\x30\x86\xb5\x40\x24\x1d\x8f\xbf\xfb\xf1\xfe\x90\x67\xa6\x5f\x09\x5b\x84\x4d\x85\x50\x06\xad\x66\xaf\xd2\xf8\x00\xc5\xcd\x32\x23\x68\xc8\xec\x15\x40\x5a\x22\x17\xf1\x05\x20\xd5\x18\x38\x14\x25\x77\x1e\x43\x46\xea\xb0\xa0\xdf\x91\xfe\x90\xe1\x1a\x33\xb2\x92\xb8\xae\xac\x0b\x04\x0a\x6b\x02\x9a\x90\x91\xb5\x14\xa1\xcc\x04\xae\x64\x81\xb4\xf9\x78\x03\xd2\xc8\x20\xb9\xa2\xbe\xe0\x0a\xb3\xe9\x1b\xf0\xa5\x93\xe6\x8e\x06\x4b\x17\x32\x64\xc6\x6e\xa1\x95\x34\x77\xe0\x50\x65\xc4\x87\x8d\x42\x5f\x22\x06\x02\xa5\xc3\x45\x46\xca\x10\x2a\x7f\xcd\x98\x0f\xbc\xb8\xab\x78\x28\x93\xdc\xda\xe0\x83\xe3\x55\x21\x4c\x52\x58\xcd\x76\x02\xf6\x36\xb9\x4a\x2e\x58\xe1\xfd\x5e\x96\x68\x69\x92\xc2\x7b\x02\x2f\x30\x56\x58\x81\xc9\xed\xdf\x35\xba\x4d\x63\xa1\x96\x6c\x9a\x4c\x2f\x92\x29\x0b\x25\x6a\xf4\x2c\xe7\x1e\x59\xab\x40\x6b\xd9\xe0\x77\xf0\x41\x06\x85\xb3\xf7\xca\xae\x4b\x5b\x7b\x4c\x59\x2b\x68\x07\x1b\x8b\xed\x3b\xc0\xeb\xa2\xf6\xc1\xea\xb9\xc2\x25\x1a\x01\x0f\x9d\x18\x40\xf3\x7b\x5a\xa2\x5c\x96\xe1\x1a\xde\x4e\x26\xd5\xfd\x0f\xbb\x21\xbb\x42\xb7\x50\x76\x4d\x37\xd7\xc0\xeb\x60\xb7\x23\x8f\xdd\x33\x09\x3c\x57\x48\xbd\x86\xd0\x47\xac\xb8\x10\xd2\x2c\xaf\x61\x92\x5c\x5c\x39\xd4\xc3\x69\x29\x6b\x79\x01\x40\x4c\x07\xb6\xcd\x87\x34\xb7\x62\xd3\x31\x37\x7c\x05\x85\xe2\xde\x67\xc4\xf0\x55\xce\x1d\xb4\x0f\x2a\xb8\xbb\x03\x1f\x64\x71\xb7\xa1\xc1\x56\x90\x2f\x5b\xd1\x42\xe1\x3d\xd5\x82\x1a\xbb\x76\xbc\x82\x8a\x4e\xc8\x76\xe1\x29\x1f\x42\xd1\xdc\x71\x23\xa0\xb0\x8a\x7a\x4d\x2f\x9b\x17\x2d\xe8\x05\x68\x47\x27\xdb\xd0\xbc\x26\x7d\xa7\xf2\x8e\x16\x33\x7c\xd5\xbd\x0a\xb9\x63\x18\xb3\x92\x4b\x83\x8e\x2e\x54\x2d\xc5\xde\x70\x4f\xc7\xd9\xf5\x4e\x3e\x9e\xdd\x99\x8f\xe4\x0d\x82\x88\x5f\xb9\xb2\xc5\x5d\x5c\x9c\x8a\x71\x01\x2f\x05\x46\x27\x54\x74\xda\x43\x19\xe2\x74\x3a\xb4\x75\xce\x40\x0d\x20\x5d\x58\xa7\xc7\x22\x89\x4a\x78\x0c\x43\x71\x6f\x60\x8b\x1c\xe7\xd2\xa5\xb3\x75\x45\xc6\xba\x31\xc1\x9b\x7c\x9a\xdd\x48\x8d\xf0\xf5\xe7\x9b\x77\xdf\xa4\xac\x13\x3d\xd5\x3d\xea\x90\xc3\x3a\x85\x55\x07\x75\xa2\x55\x9e\xa3\x82\x85\x75\x19\x09\x52\xe3\xdc\x07\xee\x02\x99\xfd\x11\x1f\x29\x6b\x46\x8f\xcc\x94\xa6\xaa\x03\xc4\x3d\x2a\x23\x82\x07\x8c\xd3\xa9\xb2\x05\x57\xa4\xdb\x6f\x7a\x80\x03\x17\xc4\x38\x3b\xab\x40\xd3\x69\x13\x09\x90\x62\x68\xfd\xd0\x72\x98\x90\xab\x33\xae\x13\x8d\x20\xb3\x9f\x8d\x38\xcb\x1a\x23\xd8\x89\x2b\x6c\xec\x9e\xbe\xbe\x83\xe2\x94\x9d\x37\xe5\x5e\xc3\x8d\xad\x20\x96\xa9\xff\x4f\x72\xae\xef\x55\x53\xeb\x1c\x5d\xe7\x20\x5b\x35\x24\x76\xbe\xdd\x7d\x3f\xeb\x5b\x2d\x4d\x46\xe2\x93\xdf\x67\x64\x3a\x99\x4c\x26\x04\x56\x5c\xd5\x98\x91\xab\xc9\xe4\x18\x09\xaf\xb9\x52\x03\xe0\x80\xf7\x01\xe2\x1f\xaa\xeb\x80\x87\xc3\x14\xff\xbd\x2b\xad\xf5\xd2\x2c\x21\x58\x0b\x9a\x9b\x0d\xe8\x66\x73\xe1\x8b\x05\x16\x01\x72\x67\xd7\x1e\x1d\x54\xe8\x22\x2c\x37\x05\x26\x87\x29\xb0\x86\xc3\x19\xb3\x61\x20\x3f\x4b\x6a\xbc\x97\x2a\xa0\xfb\x42\x56\xc4\xd8\x2d\x1a\x45\x7f\x08\xea\xc8\x5a\xce\x97\x4f\x79\x1d\x82\x35\x5d\x42\xb5\x1f\xa4\x47\xea\x93\xaa\xf7\x29\x94\x07\x03\x79\x30\xb4\x72\x52\x73\xb7\x69\xde\xbd\x8e\xc9\x44\x66\xdf\xa6\xac\x9d\xfd\x7f\x2b\xd0\x1f\x1d\xf2\x3b\x61\xd7\xe6\x84\x40\xe4\x5b\xdd\x43\xb1\x38\xcd\xed\xa7\x3a\x3e\x56\x11\xaa\x98\xf3\x6d\xbd\xee\x4c\x93\x21\x93\xe3\xf5\x0b\x6d\x2f\x45\x5b\x18\x02\xba\x56\x41\x56\x0a\xc1\xcb\x7f\x30\x23\x0f\x0f\x90\x34\x6b\xff\xc9\xae\xcd\x07\x34\xf0\xf8\xb8\xa3\xf2\xf0\x40\xc1\x71\xb3\x44\x48\xde\x47\x9f\xfe\x12\x7d\xe8\xe1\xf1\xf1\x08\x55\x80\xd4\x56\xa1\xf1\x34\x34\x5b\x7e\x0b\xff\xa1\x39\x17\x9e\xc1\x7d\x16\xb2\x05\x95\xd6\x6c\x37\x9c\x08\xf9\x91\x6b\x6c\x10\xfb\xf8\x29\x6b\x15\xfb\x66\x62\xfb\xf8\x1c\x5f\xb6\x25\x7c\xf2\xa4\x94\xb5\x9e\x3c\x12\xd5\xa3\x67\xe8\x79\x72\xbb\xbf\xaf\xfb\x3a\xd7\x32\xec\x36\xe2\xdf\x6b\x03\xbf\xc5\xb6\xbb\x4d\x8d\x6e\x74\xd4\x48\x1d\x44\x4e\xd9\xb0\xe5\x1a\x90\x1a\x7e\x68\x2e\xcd\xa8\x1b\xfc\x1e\x74\xd3\x9d\xc6\xa6\xbb\x69\x50\xd5\x92\x4e\x27\x50\x05\x7a\x09\xd5\x3d\x7d\x3b\xee\x25\x23\xb9\xf8\x3b\x2a\xcc\x85\x5c\x91\xd9\xc8\x03\x7b\x95\xfe\x4f\x80\x91\x5a\xca\x22\x8f\x11\xc3\x43\x7c\x77\x88\x4d\x1b\x1f\x7f\x9e\x79\x99\x4b\x25\xc3\xe6\xba\x94\x42\xe0\x60\x13\xbb\x41\x5d\x29\x1e\x70\xec\xb3\x51\x39\xf7\x66\xcc\x9d\x5d\xff\x39\x9f\x7f\xfc\xfc\xeb\x7c\xfe\xd7\x93\x0a\x1e\x77\xce\xd1\x41\x87\x76\xa0\xae\xc0\x7b\xb0\x4d\x90\xf6\xc0\x5d\xed\x1f\x19\x3c\x52\xf8\x64\xf6\xea\x25\xf5\xfb\xa5\xca\x3d\xb9\x66\x5f\x5e\xad\xcf\x96\x5c\xbf\x42\x9f\x51\x3c\x56\x95\x87\xeb\xeb\xc4\xc0\xf4\x8b\x2d\x36\x2d\xc7\x7d\x3d\x8c\x50\xb3\xf4\x5e\x84\x7a\x91\x1d\x0d\x9d\x95\xee\xc1\x33\xba\x0b\x43\x67\x71\x98\xbc\xa8\xed\x0a\x9f\x66\xd2\xf6\xfc\xf6\x58\x58\x23\xc6\x27\x38\x3d\x76\x82\x1f\xe0\xfe\xb4\x16\xc7\x82\x6d\xd1\xfa\xc2\xc9\x2a\x80\x77\xc5\xf1\xab\x86\xee\x52\xe1\x32\x99\x26\xd3\xe6\xee\xe2\xd6\x13\x98\xa5\xac\x9d\x3b\x7b\x09\xd4\xfe\xd6\x62\x7f\x53\x71\xeb\xc9\x69\x60\x2f\xb8\x6f\xb9\x1d\x5f\xb7\x9c\x6c\x64\xbd\x5e\x27\x4b\x1f\x78\x90\x45\x83\xdc\xec\x98\x9e\x29\xcb\x05\xba\xd3\x61\x0a\x61\x6e\x7d\x52\x28\x5b\x8b\x85\xe2\x0e\x1b\x2c\x7e\xcb\xef\x99\x92\xb9\x67\x9f\x78\xc5\x3f\x71\xe7\x91\x5d\x25\x97\xc9\x84\x55\x3c\xfe\x77\x1e\x4f\x23\xcb\x16\xdb\x7b\x87\xa7\xba\x29\x6b\xef\x48\x52\xd6\x5c\xaf\xfd\x1b\x00\x00\xff\xff\x41\x6b\x92\x22\x6e\x13\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4974, mode: os.FileMode(436), modTime: time.Unix(1747728480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

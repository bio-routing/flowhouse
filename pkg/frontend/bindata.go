// Code generated for package frontend by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6d\x73\xdb\x36\x12\xfe\xee\x5f\xb1\xa5\xdd\x10\xac\x15\x5a\x72\xd2\x66\x22\x57\x77\xd3\x2a\x71\xe3\x9b\xc4\xe9\xd5\x6e\x6f\xe6\x64\x9d\x0b\x91\x2b\x09\x36\x09\xb0\x00\x28\xcb\x4d\xfd\xdf\x6f\x00\xf0\x05\x94\xe4\x5c\x72\xbd\x8f\x97\xcc\x24\xf4\x62\xf7\xd9\xc5\x62\xdf\x00\xaf\xa8\x84\x39\xcb\x34\x4a\x35\x16\x25\xd7\x30\x82\xfe\xc9\xde\xde\x01\x49\x45\x52\xe6\xc8\x75\x14\x4b\xa4\xe9\x3d\x99\x97\x3c\xd1\x4c\x70\x12\xc1\x87\x3d\x00\x23\xa7\x34\x95\x46\x60\x2e\x64\x4e\xf5\x25\xcb\x51\x69\x9a\x17\x84\xe3\x1d\xbc\xa2\x1a\x09\x69\x3f\x23\x38\x82\x41\xbf\xdf\x8f\xe0\x29\xbc\xec\xf7\xe1\x29\xb4\x4b\xf1\x02\xad\xf4\xef\x82\xe3\xfb\xf9\x5c\xa1\x26\x11\x7c\x05\xdf\xf4\xa3\xaf\x9c\x4c\x74\xb2\x07\xc0\xe6\x40\x0e\x48\xb0\xaf\x59\x8e\xd7\x56\x75\x10\xc5\x2b\x9a\x91\x08\x46\x23\x08\x02\x67\x17\xc0\x4e\x1e\xfb\x6d\x61\x1e\xf6\x2a\xeb\x91\xa7\xff\x85\xed\x7f\xca\x6a\xe4\xe9\x7f\xb0\xb9\xe5\x40\x9e\xb6\xf6\x9a\x75\x77\x4a\x3f\x66\xa5\x0a\xa2\x38\xc9\x58\x72\x4b\x68\x9a\x9e\x5a\xaa\xe5\x3c\x20\x81\xd9\x4d\x10\xc5\x82\x93\x50\x95\xb3\x9c\xe9\xb0\x07\xee\xe3\xef\x25\xca\xfb\xe8\xc4\x80\x2d\x84\x58\x64\x18\x27\x4b\x2a\xb5\x8a\x33\x41\x53\x12\x26\xa5\x94\xc8\x0d\xbb\x35\x28\x2c\x68\x72\x4b\x17\xa8\xc2\x21\x4c\xc2\x44\x48\xb4\xdc\xe1\xd4\x18\x64\x95\xc1\x1e\xc0\x1d\xe3\xa9\xb8\x8b\x05\x5f\x52\xb5\x4c\x96\x94\x2f\xd0\x78\xb4\x0a\x14\x20\xf5\xee\xba\x0a\x15\xea\xf7\xfc\xad\xa0\xe9\x98\x66\xd9\x8c\x26\xb7\x24\x95\xf4\x6e\xbc\xec\x1c\xd0\xe7\x88\xec\x01\x14\xa2\x28\x33\xaa\xf1\x94\x61\x96\x2a\x12\x9d\xec\x19\x2b\xf7\x1a\x53\x1a\x47\x55\x36\x25\x82\x2b\x5d\xc5\xfd\x25\xe6\x85\x91\x85\x91\xe7\xe6\x9a\x18\x44\xf1\x52\xe7\x19\x31\x59\x50\x64\x34\x41\x72\x74\x7d\x7d\xfe\xf3\xbb\xeb\xeb\xa3\x45\xaf\x93\x38\xf5\x11\x54\x00\xe6\x90\x68\x51\x20\x4f\x49\x17\xd1\x19\xec\x0c\x38\x70\x4b\xd6\x6a\xab\xfe\xd7\x4a\xfa\x7a\x6e\x48\x57\x57\x93\x83\x0f\xbe\x8e\x87\xab\xab\xe9\xaf\x56\x51\x47\xfe\x17\x9a\x95\xd8\x95\x5f\x19\xd2\xa7\xca\xff\x84\xb9\x58\x6d\x00\x48\x4b\x7b\x14\xc1\xec\xd5\x33\x3e\x76\xa7\xbf\x59\x24\x5a\x47\x63\x96\x9e\xd3\xdc\xe9\xd0\x4b\xa6\xaa\x2c\x38\xe9\x30\x19\xb8\xf3\x32\xf7\x98\xa8\xd6\x92\x04\xcc\xe4\x44\x4e\x75\xb2\x24\x47\x57\xe9\xe1\x51\x34\xe9\x4f\x9d\xa4\xef\x80\x8a\x99\xd3\x1c\x83\x5e\xab\xb2\xd2\x61\xc2\xdc\xb2\x29\xd2\x28\xda\xe4\x7a\xe8\x6c\xcc\x79\xa5\xca\xb4\xad\x8d\xd5\x16\x26\x99\x50\xa8\x34\x09\x63\x29\xee\x42\x13\x26\x46\x8a\xf8\x78\xbe\xff\x0e\x0f\x4f\xf6\x1e\xf6\xbc\xc8\x2c\xa8\x54\xf8\x23\x95\x34\x57\x44\x69\xe9\xe0\x25\xea\x52\x72\x50\x5a\xc6\xaa\xc8\x98\x26\xe1\x13\x0b\x9d\x96\x89\xe7\xe3\xc2\x4a\xf5\xc0\xfe\xdf\x75\xf8\xe4\x16\xef\x7b\x60\x83\x60\x0a\x23\xc7\x51\x43\x8d\x42\xe3\xcc\x82\xa4\x98\x88\x14\x7f\xfe\xe9\x6c\x2c\xf2\x42\x70\xac\x42\x18\x1c\xb7\x32\x10\x46\xd6\x82\xb4\xd1\x7f\x75\x68\x02\x3f\x84\xb0\x62\xae\x4c\x75\x32\x76\xd3\x3d\xf8\x60\x36\xfe\xe0\x6f\x72\x23\x3d\x9b\x0e\xf2\x9b\xa9\x4a\x30\x82\x4c\x24\xd4\x70\xc6\x4b\x89\xf3\xca\xd0\x60\x3f\x88\x26\x83\x69\x5d\x44\xbf\xb0\xbc\xf5\x36\x9d\xda\x4e\x3d\xb7\xeb\xaf\x7f\x2b\x2d\x90\x82\x91\x23\x78\x0e\x34\xdc\x73\x21\x81\x18\x6e\x66\x1b\x1d\x30\xf8\x76\x43\x30\xce\x90\x2f\xf4\xf2\x04\xd8\xe1\x61\xad\xcd\xb6\x8b\x1a\xb1\xe1\x9c\xb0\xa9\xe7\xd3\x93\x86\xf3\x16\x46\x80\x4d\x88\x1a\xca\x0a\x46\xb0\xed\x6e\x82\x93\xc1\xd4\x85\x88\xdb\xe2\xad\x6d\x0a\x33\x89\xf4\x36\x15\x77\xbc\xe9\x0e\xae\xae\x34\x74\x10\x85\xd1\x3f\xb1\x27\x33\x0a\xe0\x10\x56\x70\x08\xc1\x34\xa8\xf2\x25\x54\x98\x61\xa2\x31\x0d\x7b\xd0\x7e\x57\x06\xda\x08\xd1\x8c\x97\xe8\x7e\x7e\xb0\xff\x6e\x98\xe0\xb7\xcf\x8e\x0d\x5b\x7d\x75\xf5\xd9\xb0\xb6\xc3\x6d\x83\xb6\x8d\xef\x71\xc8\x4d\x38\x51\x9c\x66\xe2\x4e\x6d\xc2\x35\xe4\x4f\x86\xab\x8b\xcb\xbf\xfc\xea\x7b\x14\xb5\xb8\x3b\x45\xdd\xe8\x84\x59\x7a\xc6\x53\x5c\xc3\xc8\xef\x32\x27\x4d\x5b\xdf\x28\xe8\xe6\xb8\x3c\xa1\x43\x08\xae\xae\xa6\x95\xa9\xb7\x9f\x2f\xa6\x25\x5b\x2c\x50\x92\xc0\x15\xe0\x60\x1b\xa1\xee\x04\x1f\x53\xbc\xaa\x1a\xaf\x9f\xb3\xde\xd8\x50\x25\x2c\xae\x90\xeb\xb8\x90\xf6\xff\x57\x38\xa7\x65\xa6\x89\x8b\xdf\xa3\x23\xf8\x85\x66\x2c\x35\x6d\x34\xac\x0f\x20\x84\x99\x58\x37\xbd\xa6\xa6\xda\xea\x1e\x36\xa7\x14\x7a\x9d\xa0\xcb\x78\x66\x87\x51\x5b\x1f\xcf\xb8\x26\x35\xb9\x07\x83\x7e\x33\x59\x31\x75\x4e\xcf\x89\x27\x11\xc1\x1f\x7f\x74\x10\xbe\x85\xc1\x26\xe9\x2f\x76\x3c\xeb\xd7\xa7\x4b\x33\x94\x9a\x04\x67\x3c\x11\x52\x62\xa2\x21\xbc\x14\x05\x38\xe3\x86\x50\x64\x48\x15\x02\x72\x8d\x12\xa8\xa9\x86\x2c\x05\xc6\x35\x2e\x50\xc2\x0c\xf5\x1d\x22\x87\x01\x50\x9e\x3a\xd4\x38\xe8\x16\xc6\x39\xcd\x14\x36\x75\xca\x95\x49\xe7\x02\x33\xab\x85\x51\xac\x50\x32\x9a\xb1\xdf\xab\x9e\x51\x71\x1c\x8e\x20\x7c\x52\x1b\x3d\x0a\xe1\x10\x90\x6f\xd5\x8f\x7a\xdd\x0a\x76\x4a\x28\x8c\x20\xd8\x37\x27\xee\xe0\xf6\xba\xe6\x74\xce\xb9\x99\xa4\x3e\xaf\x2c\x7f\x4a\x55\x3e\x88\xe9\x0d\x5d\x13\xb7\xa6\xef\x0b\x1c\x42\xf0\xc3\xeb\xcb\xa0\x67\x09\xa5\xcc\x86\x10\x1c\x59\x80\xbf\x1a\x5b\xed\x97\x5b\x4b\xa9\xa6\x97\x4e\x40\xe3\x5a\x57\x12\xaa\x4c\x12\x54\x6a\xd8\x8c\x98\x44\x1a\xc6\x9e\xb9\x88\xe8\x52\xf5\x60\xbd\x94\x6d\xce\x1a\xf3\xec\xba\x29\x16\x25\x4f\x71\xce\x38\xa6\xed\xba\xcb\x12\x3b\x61\x5e\xa7\x6c\x65\x92\x09\xd7\x9a\x04\xe7\xc2\xaa\x87\xb9\x28\x4d\x4d\x6a\xb8\xeb\xed\x35\x84\x87\xbd\x9a\xcc\x53\x94\xce\x87\x56\xa1\x93\x79\x70\x46\xa3\x94\x42\x7a\x26\x77\x6c\xdc\x69\xc1\x7a\x29\x63\x89\xaa\x10\x5c\xe1\x25\xae\x75\xd4\x54\xd4\x87\xa8\x73\x74\xdb\x8a\x2d\x70\x21\xd1\x84\xd8\x8f\xb4\xa0\xb1\x4d\x1f\xb7\x68\x6a\x45\x4e\x22\x97\xb0\xed\xb5\x0f\xcd\xe4\x39\x31\x32\xb1\xe1\x9a\xf4\xa7\xd3\xad\x46\x39\x70\x8d\xb2\x61\x7a\xac\x47\x4a\x71\x67\x52\xb6\xc1\x62\x5e\x0f\x5c\x52\x75\x2e\xf8\x3f\x51\x0a\x18\x19\xc6\x58\x65\x2c\x41\x32\x88\x62\x25\x72\x6f\xaa\x59\xd1\xac\xf5\x8f\x11\xe4\x76\x22\xb4\x1b\x39\xcd\x04\xd5\xc4\xb0\x98\x9c\x0e\xc3\xa8\xdd\x93\x7f\x42\xf0\x85\xab\x0b\xbc\xcc\x23\x78\xf2\xc4\x22\x7c\x31\xb2\x17\x5b\xeb\xc9\x8a\xdd\x04\x48\x6b\x55\xab\xb4\xf6\x4b\x5c\x94\x6a\x49\xa4\xb8\x8b\xda\x9e\xd6\x4c\x1b\x2e\xb0\x60\xb2\xed\xac\x6a\xaa\x68\x50\x76\xf8\xaa\x72\x4e\x23\xef\x21\xdc\x38\x84\x1b\x0f\xc1\xcc\x19\x35\xc8\x4d\x0b\xe2\xec\x30\x7d\xc7\x63\x9c\xdc\x4c\x4f\xbc\xf8\x67\x6e\xdf\xc6\x09\x37\xee\xd3\x8f\xff\xf5\x86\x5f\xd7\x8f\x78\xd5\xaf\xb5\xeb\x28\xb2\x72\xfd\x7a\xb1\xce\x82\x6a\x4f\x93\x1b\xb3\xad\xf5\x86\xc7\x2a\x6f\x55\xb7\xba\x15\x53\xa5\x29\x79\xae\xb6\x50\x29\xe9\xfd\xa5\x78\x65\x52\x9e\xce\x32\x24\x36\x92\x4f\x2a\x3f\xbb\x59\xc7\xc4\xb3\xb3\x9b\xa9\x0b\x4d\x93\x5b\x4c\x87\xa0\x65\x89\x2e\xc7\x34\xd3\x19\x0e\x21\x34\xd5\x10\xde\xcd\x0a\x15\x7a\x74\x93\x42\x17\xfa\xde\x30\x34\x27\x2c\xb8\xbe\x60\xbf\xe3\x10\x8e\x9f\xf7\x2a\xda\x4c\x64\x1d\x4c\xd3\x8e\x32\x93\xb9\xe1\xfe\xb3\x67\xcf\x42\x3f\xa5\x97\xdf\xad\x99\x6a\xd1\x6a\xed\x97\x2c\xc7\xb0\xe7\x13\x77\xa8\xde\x80\xed\xb5\x2e\xd6\x34\x63\xc9\xd0\x55\xe8\x96\xbc\x6d\x96\x6f\xfe\xe0\x79\x7d\x0a\xf5\xea\x42\xb2\x34\x63\x1c\xd5\x4e\x95\xf3\x67\xe6\xaf\xa7\x35\x31\x97\x92\x21\x0c\xfa\x9b\x38\x39\xe3\x42\xfe\xf0\x51\x30\x7c\x69\xfe\x86\x9b\x92\xee\x45\x65\x08\xe1\x9b\x37\xc3\x3c\x1f\x2a\xd5\xfa\xe4\x33\xdc\xe1\xed\xf1\xb8\x13\x69\x95\x9e\x55\xf7\x0c\x72\xc6\xed\xed\x6e\x08\xfd\xde\xc6\xb1\xbc\xc3\x05\x9d\x31\xad\xa0\x40\x09\x0a\x13\xc1\xd3\xff\x9f\xd2\xff\xf4\x2c\x96\xc8\x16\x4b\x3d\x04\x95\x48\x44\x1e\xbb\x1f\xe1\x2b\xe8\xc7\x2f\x1c\x83\x6d\x71\xdf\x49\xa4\xad\xb2\x3b\x96\xea\xe5\x10\xc2\x97\xfd\x2f\xc3\x1e\x54\xc4\x1a\x28\x7c\x61\xa8\xb5\xa5\xa2\x18\x42\xf8\x75\x4b\x98\xd1\xe4\x76\x21\x4d\x77\x1e\x3b\x7b\xdb\x0d\x28\x2d\xc5\xad\x39\xf4\xfd\x24\x49\xbc\x1d\x38\xfa\x3f\x9c\xce\xc1\xae\x3d\x6c\x81\x86\xfb\x73\xfb\xa7\x42\xb1\xae\x51\x43\x98\x84\xfb\xc7\x83\x97\xdf\x9c\x3e\x33\x97\xab\xfd\xe7\xe3\xef\x4e\xbf\xee\xdb\xcf\xd3\xd3\xf1\xa0\xff\xa2\xfa\xfc\xfa\xc5\xf1\xb1\xfd\x7c\x39\x3e\x7e\xf1\x7d\x3f\x9c\x3a\x10\xca\x59\x6e\x8b\x5e\x6b\xb3\xbd\x4c\x95\x45\x37\x78\xd2\x52\x56\x6c\x66\xa6\xac\xa9\x48\x15\xe3\x8b\x21\x84\xa2\xd4\x9d\x7a\x94\xe1\x02\x79\xda\x62\x16\x42\x31\x27\x1e\x72\xc1\xb1\xc3\xab\x85\xc8\x34\x2b\xbc\xea\xf5\x27\x03\xa1\x5e\x55\x4b\x71\x67\x5d\x37\x16\x29\xba\xed\x74\x6c\x64\xbc\xf6\xff\xb1\xa3\x14\x82\x35\x55\xb8\x9a\xef\x50\x32\x3f\x8a\xfb\x43\xf8\x60\x05\x5f\x51\xb5\xac\x6c\x9c\x3c\xef\xc1\xf3\x69\xab\x76\xb0\x8b\xe7\xb8\x07\xc7\x1e\xcf\xf1\x23\x38\x3e\xcf\xb3\x47\x70\x7c\x5d\xcf\x77\xf1\x0c\x7a\x30\x98\xd6\xb1\x64\xfa\x5d\x33\x5f\xd9\xa8\x87\x91\x7d\x32\xde\xd9\xf9\x4c\x46\xb8\xe9\xad\x7e\x6c\x8f\x17\xa8\x5f\x67\x68\x3e\xbf\xbf\x3f\x4b\x49\xd8\x0c\x87\xa1\x6b\xc7\xf6\xe7\xd8\xcc\xec\xc4\x8d\xbe\x55\x7f\xf4\x5f\x15\x93\x52\x69\x91\xbf\xb5\x41\xf1\x8a\xd9\xb7\x87\x47\xe1\x2d\xeb\xb5\x0b\x20\xf7\x44\xb0\x21\x1d\x33\xce\x51\xbe\xb9\x7c\xf7\x16\x46\x10\x86\x27\xe6\xaa\x37\xce\x90\x4a\xa0\xfc\x1e\x70\xcd\x94\x66\x7c\x51\x85\x60\x6b\x82\xcd\x16\x18\xd5\xe6\xc5\x8e\x70\xe2\x33\x94\xb9\x6d\xeb\x76\x9e\x5c\xa0\x3e\x2f\xf3\x19\xca\xf7\xf3\xb1\x5b\x21\xfe\x8e\xb4\x99\x0b\xfc\x7d\x24\x12\xa9\xc6\x6a\x2b\x24\xb4\xeb\xce\x7c\xfb\x19\x27\x19\x55\xea\x2d\x53\x3a\xa6\x69\x5a\xaf\xf7\xc0\x7d\x3c\x55\x79\xfb\x3d\x13\x32\x35\xb3\x53\xe8\xdf\x40\x67\x22\xbd\xff\x98\x3a\xb3\x1e\x56\x8f\x7b\x66\x70\xcb\x50\xfb\x73\x72\xb5\xb9\xce\xc8\xe7\x90\xdd\x80\xfc\x28\xae\x0c\x3b\x2f\xa2\xd6\x69\x63\xcc\xb2\x8f\xc9\xa4\xad\x4c\xc5\x1d\x2b\x13\x9a\xf1\x46\x45\x83\x51\x75\x2a\x13\xc2\xe0\x29\x0c\x22\xf8\xb2\x22\x54\xc3\xe5\x74\x37\x8c\x2d\xd4\xe6\xec\x8f\xfb\xc5\x3a\xf4\xcd\xcb\xe8\x0c\xb3\x4f\x36\xaf\xe1\xb6\x97\x9c\xb1\xe0\x1a\xed\x05\xbf\x3e\x7f\x77\xee\x6f\x0d\x17\x61\xf5\x1d\x5a\xdc\x55\x8f\xe8\xe3\x25\xcb\x52\xd2\xd8\xf6\xc8\x7a\xa3\xa3\x5a\xb7\x07\xd5\xe1\x70\xd3\xbc\x5d\x6c\xaf\x1c\xae\xee\xd8\x77\x91\x76\x3c\xb6\xd8\x69\xfa\x7a\x85\x5c\x9b\x48\x42\x8e\x92\x84\xb9\x28\x15\x8a\x15\xca\xb0\x07\x5b\x6f\xc2\xb6\x85\xb1\xc5\x32\x33\x5d\xec\xc2\x82\x12\x9b\xb0\x3d\xe8\x24\x6b\x0f\x7c\x8d\xcd\x20\xdd\xde\x62\x3e\xa2\xba\xd4\x8f\x69\x96\xa8\x50\xbf\xa9\xd5\xef\x54\xbc\xa5\xeb\x21\xaa\x82\xa1\xb9\xb3\xbb\xfc\xf1\x5d\x66\x9d\xb8\xb3\x34\x74\xb8\x8c\xdc\xc6\xb3\xef\xe6\xef\xd6\x52\xaa\xb1\xf3\xc0\x6d\x08\xb1\x16\x67\x17\xef\x2f\xb4\x64\x7c\x41\xa2\x58\x95\x33\xa5\x25\xe9\xf7\x60\xf0\x4d\xf7\xb6\xfb\x91\x17\xfc\xee\xfb\x03\x1c\x98\x78\xfa\xdb\xc5\xfb\x73\x12\x1c\xa5\x2c\xd1\xee\x0d\x4c\x1d\x05\x87\x96\xdb\xf3\x5f\x7b\x69\x76\x7f\x1e\x7d\x37\xab\x7f\x35\xd1\x3c\x9b\xd1\x52\x8b\x44\xe4\x45\x86\x1a\xc9\x07\xef\x91\x00\x40\x89\x52\x26\x38\x74\xae\x6f\x5f\x0b\xa2\xf6\xf6\xf9\xf0\xef\x00\x00\x00\xff\xff\x36\x29\x49\x3c\x76\x1d\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 7542, mode: os.FileMode(436), modTime: time.Unix(1747733312, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\xb1\x2f\x1b\x56\x8a\x76\xd2\x00\x5b\x26\xf9\x61\xdd\xba\x97\xae\xe8\xb6\xf4\x69\x18\x0c\x4a\x3c\x5b\x4c\xf8\x47\x23\x29\x3b\x5e\x90\xef\x3e\x50\x92\x6d\x49\xb1\x53\x07\x30\x86\xb5\x40\x24\x1d\x8f\xbf\xfb\xf1\xfe\x90\x67\xa6\x5f\x09\x5b\x84\x4d\x85\x50\x06\xad\x66\xaf\xd2\xf8\x00\xc5\xcd\x32\x23\x68\xc8\xec\x15\x40\x5a\x22\x17\xf1\x05\x20\xd5\x18\x38\x14\x25\x77\x1e\x43\x46\xea\xb0\xa0\xdf\x91\xfe\x90\xe1\x1a\x33\xb2\x92\xb8\xae\xac\x0b\x04\x0a\x6b\x02\x9a\x90\x91\xb5\x14\xa1\xcc\x04\xae\x64\x81\xb4\xf9\x78\x03\xd2\xc8\x20\xb9\xa2\xbe\xe0\x0a\xb3\xe9\x1b\xf0\xa5\x93\xe6\x8e\x06\x4b\x17\x32\x64\xc6\x6e\xa1\x95\x34\x77\xe0\x50\x65\xc4\x87\x8d\x42\x5f\x22\x06\x02\xa5\xc3\x45\x46\xca\x10\x2a\x7f\xcd\x98\x0f\xbc\xb8\xab\x78\x28\x93\xdc\xda\xe0\x83\xe3\x55\x21\x4c\x52\x58\xcd\x76\x02\xf6\x36\xb9\x4a\x2e\x58\xe1\xfd\x5e\x96\x68\x69\x92\xc2\x7b\x02\x2f\x30\x56\x58\x81\xc9\xed\xdf\x35\xba\x4d\x63\xa1\x96\x6c\x9a\x4c\x2f\x92\x29\x0b\x25\x6a\xf4\x2c\xe7\x1e\x59\xab\x40\x6b\xd9\xe0\x77\xf0\x41\x06\x85\xb3\xf7\xca\xae\x4b\x5b\x7b\x4c\x59\x2b\x68\x07\x1b\x8b\xed\x3b\xc0\xeb\xa2\xf6\xc1\xea\xb9\xc2\x25\x1a\x01\x0f\x9d\x18\x40\xf3\x7b\x5a\xa2\x5c\x96\xe1\x1a\xde\x4e\x26\xd5\xfd\x0f\xbb\x21\xbb\x42\xb7\x50\x76\x4d\x37\xd7\xc0\xeb\x60\xb7\x23\x8f\xdd\x33\x09\x3c\x57\x48\xbd\x86\xd0\x47\xac\xb8\x10\xd2\x2c\xaf\x61\x92\x5c\x5c\x39\xd4\xc3\x69\x29\x6b\x79\x01\x40\x4c\x07\xb6\xcd\x87\x34\xb7\x62\xd3\x31\x37\x7c\x05\x85\xe2\xde\x67\xc4\xf0\x55\xce\x1d\xb4\x0f\x2a\xb8\xbb\x03\x1f\x64\x71\xb7\xa1\xc1\x56\x90\x2f\x5b\xd1\x42\xe1\x3d\xd5\x82\x1a\xbb\x76\xbc\x82\x8a\x4e\xc8\x76\xe1\x29\x1f\x42\xd1\xdc\x71\x23\xa0\xb0\x8a\x7a\x4d\x2f\x9b\x17\x2d\xe8\x05\x68\x47\x27\xdb\xd0\xbc\x26\x7d\xa7\xf2\x8e\x16\x33\x7c\xd5\xbd\x0a\xb9\x63\x18\xb3\x92\x4b\x83\x8e\x2e\x54\x2d\xc5\xde\x70\x4f\xc7\xd9\xf5\x4e\x3e\x9e\xdd\x99\x8f\xe4\x0d\x82\x88\x5f\xb9\xb2\xc5\x5d\x5c\x9c\x8a\x71\x01\x2f\x05\x46\x27\x54\x74\xda\x43\x19\xe2\x74\x3a\xb4\x75\xce\x40\x0d\x20\x5d\x58\xa7\xc7\x22\x89\x4a\x78\x0c\x43\x71\x6f\x60\x8b\x1c\xe7\xd2\xa5\xb3\x75\x45\xc6\xba\x31\xc1\x9b\x7c\x9a\xdd\x48\x8d\xf0\xf5\xe7\x9b\x77\xdf\xa4\xac\x13\x3d\xd5\x3d\xea\x90\xc3\x3a\x85\x55\x07\x75\xa2\x55\x9e\xa3\x82\x85\x75\x19\x09\x52\xe3\xdc\x07\xee\x02\x99\xfd\x11\x1f\x29\x6b\x46\x8f\xcc\x94\xa6\xaa\x03\xc4\x3d\x2a\x23\x82\x07\x8c\xd3\xa9\xb2\x05\x57\xa4\xdb\x6f\x7a\x80\x03\x17\xc4\x38\x3b\xab\x40\xd3\x69\x13\x09\x90\x62\x68\xfd\xd0\x72\x98\x90\xab\x33\xae\x13\x8d\x20\xb3\x9f\x8d\x38\xcb\x1a\x23\xd8\x89\x2b\x6c\xec\x9e\xbe\xbe\x83\xe2\x94\x9d\x37\xe5\x5e\xc3\x8d\xad\x20\x96\xa9\xff\x4f\x72\xae\xef\x55\x53\xeb\x1c\x5d\xe7\x20\x5b\x35\x24\x76\xbe\xdd\x7d\x3f\xeb\x5b\x2d\x4d\x46\xe2\x93\xdf\x67\x64\x3a\x99\x4c\x26\x04\x56\x5c\xd5\x98\x91\xab\xc9\xe4\x18\x09\xaf\xb9\x52\x03\xe0\x80\xf7\x01\xe2\x1f\xaa\xeb\x80\x87\xc3\x14\xff\xbd\x2b\xad\xf5\xd2\x2c\x21\x58\x0b\x9a\x9b\x0d\xe8\x66\x73\xe1\x8b\x05\x16\x01\x72\x67\xd7\x1e\x1d\x54\xe8\x22\x2c\x37\x05\x26\x87\x29\xb0\x86\xc3\x19\xb3\x61\x20\x3f\x4b\x6a\xbc\x97\x2a\xa0\xfb\x42\x56\xc4\xd8\x2d\x1a\x45\x7f\x08\xea\xc8\x5a\xce\x97\x4f\x79\x1d\x82\x35\x5d\x42\xb5\x1f\xa4\x47\xea\x93\xaa\xf7\x29\x94\x07\x03\x79\x30\xb4\x72\x52\x73\xb7\x69\xde\xbd\x8e\xc9\x44\x66\xdf\xa6\xac\x9d\xfd\x7f\x2b\xd0\x1f\x1d\xf2\x3b\x61\xd7\xe6\x84\x40\xe4\x5b\xdd\x43\xb1\x38\xcd\xed\xa7\x3a\x3e\x56\x11\xaa\x98\xf3\x6d\xbd\xee\x4c\x93\x21\x93\xe3\xf5\x0b\x6d\x2f\x45\x5b\x18\x02\xba\x56\x41\x56\x0a\xc1\xcb\x7f\x30\x23\x0f\x0f\x90\x34\x6b\xff\xc9\xae\xcd\x07\x34\xf0\xf8\xb8\xa3\xf2\xf0\x40\xc1\x71\xb3\x44\x48\xde\x47\x9f\xfe\x12\x7d\xe8\xe1\xf1\xf1\x08\x55\x80\xd4\x56\xa1\xf1\x34\x34\x5b\x7e\x0b\xff\xa1\x39\x17\x9e\xc1\x7d\x16\xb2\x05\x95\xd6\x6c\x37\x9c\x08\xf9\x91\x6b\x6c\x10\xfb\xf8\x29\x6b\x15\xfb\x66\x62\xfb\xf8\x1c\x5f\xb6\x25\x7c\xf2\xa4\x94\xb5\x9e\x3c\x12\xd5\xa3\x67\xe8\x79\x72\xbb\xbf\xaf\xfb\x3a\xd7\x32\xec\x36\xe2\xdf\x6b\x03\xbf\xc5\xb6\xbb\x4d\x8d\x6e\x74\xd4\x48\x1d\x44\x4e\xd9\xb0\xe5\x1a\x90\x1a\x7e\x68\x2e\xcd\xa8\x1b\xfc\x1e\x74\xd3\x9d\xc6\xa6\xbb\x69\x50\xd5\x92\x4e\x27\x50\x05\x7a\x09\xd5\x3d\x7d\x3b\xee\x25\x23\xb9\xf8\x3b\x2a\xcc\x85\x5c\x91\xd9\xc8\x03\x7b\x95\xfe\x4f\x80\x91\x5a\xca\x22\x8f\x11\xc3\x43\x7c\x77\x88\x4d\x1b\x1f\x7f\x9e\x79\x99\x4b\x25\xc3\xe6\xba\x94\x42\xe0\x60\x13\xbb\x41\x5d\x29\x1e\x70\xec\xb3\x51\x39\xf7\x66\xcc\x9d\x5d\xff\x39\x9f\x7f\xfc\xfc\xeb\x7c\xfe\xd7\x93\x0a\x1e\x77\xce\xd1\x41\x87\x76\xa0\xae\xc0\x7b\xb0\x4d\x90\xf6\xc0\x5d\xed\x1f\x19\x3c\x52\xf8\x64\xf6\xea\x25\xf5\xfb\xa5\xca\x3d\xb9\x66\x5f\x5e\xad\xcf\x96\x5c\xbf\x42\x9f\x51\x3c\x56\x95\x87\xeb\xeb\xc4\xc0\xf4\x8b\x2d\x36\x2d\xc7\x7d\x3d\x8c\x50\xb3\xf4\x5e\x84\x7a\x91\x1d\x0d\x9d\x95\xee\xc1\x33\xba\x0b\x43\x67\x71\x98\xbc\xa8\xed\x0a\x9f\x66\xd2\xf6\xfc\xf6\x58\x58\x23\xc6\x27\x38\x3d\x76\x82\x1f\xe0\xfe\xb4\x16\xc7\x82\x6d\xd1\xfa\xc2\xc9\x2a\x80\x77\xc5\xf1\xab\x86\xee\x52\xe1\x32\x99\x26\xd3\xe6\xee\xe2\xd6\x13\x98\xa5\xac\x9d\x3b\x7b\x09\xd4\xfe\xd6\x62\x7f\x53\x71\xeb\xc9\x69\x60\x2f\xb8\x6f\xb9\x1d\x5f\xb7\x9c\x6c\x64\xbd\x5e\x27\x4b\x1f\x78\x90\x45\x83\xdc\xec\x98\x9e\x29\xcb\x05\xba\xd3\x61\x0a\x61\x6e\x7d\x52\x28\x5b\x8b\x85\xe2\x0e\x1b\x2c\x7e\xcb\xef\x99\x92\xb9\x67\x9f\x78\xc5\x3f\x71\xe7\x91\x5d\x25\x97\xc9\x84\x55\x3c\xfe\x77\x1e\x4f\x23\xcb\x16\xdb\x7b\x87\xa7\xba\x29\x6b\xef\x48\x52\xd6\x5c\xaf\xfd\x1b\x00\x00\xff\xff\x41\x6b\x92\x22\x6e\x13\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4974, mode: os.FileMode(436), modTime: time.Unix(1747728480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

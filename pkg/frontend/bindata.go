// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package frontend generated by go-bindata.// sources:
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x5f\x73\xdb\xb8\x11\x7f\xd7\xa7\xd8\xe2\xf2\x40\x9e\x4d\x52\x4a\xae\x37\xbd\x84\xd4\x43\x7b\x4d\x7b\x9d\x6b\xd2\x36\xd7\xbe\x24\x19\x0f\x44\xac\x44\xc4\x20\xc0\x02\x4b\xc9\x3e\x8f\xbe\x7b\x07\x24\x45\x91\xb4\xe4\xd8\xad\xa7\x4f\x22\x80\xc5\x6f\x7f\xfb\x0f\x58\x28\xfd\x8d\x30\x39\xdd\x56\x08\x05\x95\x6a\x39\x4b\xfd\x0f\x28\xae\x37\x19\x43\xcd\x96\x33\x80\xb4\x40\x2e\xfc\x07\x40\x5a\x22\x71\xc8\x0b\x6e\x1d\x52\xc6\x6a\x5a\x47\xbf\x63\xc3\x25\xcd\x4b\xcc\xd8\x56\xe2\xae\x32\x96\x18\xe4\x46\x13\x6a\xca\xd8\x4e\x0a\x2a\x32\x81\x5b\x99\x63\xd4\x0c\x2e\x41\x6a\x49\x92\xab\xc8\xe5\x5c\x61\xb6\xb8\x04\x57\x58\xa9\xaf\x23\x32\xd1\x5a\x52\xa6\xcd\x01\x5a\x49\x7d\x0d\x16\x55\xc6\x1c\xdd\x2a\x74\x05\x22\x31\x28\x2c\xae\x33\x56\x10\x55\xee\x75\x92\x38\xe2\xf9\x75\xc5\xa9\x88\x57\xc6\x90\x23\xcb\xab\x5c\xe8\x38\x37\x65\xd2\x4f\x24\xdf\xc5\xbf\x8d\x5f\x26\xb9\x73\xc7\xb9\xb8\x94\x3a\xce\x9d\x63\xf0\x04\x65\xb9\x11\x18\x7f\xf9\x77\x8d\xf6\xb6\xd1\x50\xcb\x64\x11\x2f\x5e\xc6\x8b\x84\x0a\x2c\xd1\x25\x2b\xee\x30\x69\x05\xa2\x5a\x36\xf8\x1d\x3c\x49\x52\xb8\x7c\xab\xcc\xae\x30\xb5\xc3\x34\x69\x27\xbc\x9f\x93\x83\xa3\xd3\x95\x11\xb7\x9d\xbc\xe6\x5b\xc8\x15\x77\x2e\x63\x9a\x6f\x57\xdc\x42\xfb\x13\x09\x6e\xaf\xc1\x91\xcc\xaf\x6f\x23\x32\x15\xac\x36\xed\xd4\x5a\xe1\x4d\x54\x8a\x48\x9b\x9d\xe5\x15\x54\xd1\xbc\x53\x0d\x90\xf2\x31\x54\xb4\xb2\x5c\x0b\xc8\x8d\x8a\x5c\x19\xbd\x6a\x3e\x4a\x11\xbd\x84\xd2\x46\xf3\x83\xcd\xdf\xb0\x21\x5b\xde\xd1\x4a\x34\xdf\x76\x9f\x42\xf6\x0c\x7d\xb8\xb9\xd4\x68\xa3\xb5\xaa\xa5\x38\x2a\x1e\xc8\x58\xb3\xeb\xe7\xa7\xbb\x3b\xf5\x9e\xbc\x46\x10\x7e\xb4\x52\x26\xbf\xf6\xc6\x29\xb9\x29\x08\x9c\x14\xe8\x9d\x50\x45\x8b\x01\xca\x18\xa7\x93\x89\x5a\xe7\x8c\xc4\x00\xd2\xb5\xb1\xe5\x74\x4a\xa2\x12\x0e\x69\x3c\x3d\x58\x38\x20\xfb\xbd\xd1\xc6\x9a\xba\x62\x53\x59\x9f\x39\xb8\x41\x2d\x96\xbf\xc8\x12\xd3\xa4\x1b\xdc\x97\x3a\xeb\x8a\xd3\x32\xb9\x51\x27\x65\xbc\x3e\xbe\x42\x05\x6b\x63\x33\xe6\x75\x3a\xe2\x65\x75\xb5\x21\xb6\xfc\x40\xdc\x52\x9a\x34\xeb\x67\xf6\x4a\x5d\xd5\x04\xbe\xf0\x33\x26\x38\x21\xc9\x12\x23\x65\x72\xae\xd8\xc8\x58\x1f\x51\x6b\x14\x94\xd1\xa2\xf1\x39\x48\x31\xd5\x76\xca\x80\x44\xc8\xed\x73\x5b\xa6\x88\x2d\xff\xa8\xc5\xff\xc5\x2e\xf5\x24\xbb\x4e\x4e\xa7\xc9\x31\xad\x9e\x25\xaf\xde\x4a\x45\x68\xbf\x92\x59\xde\x8c\x75\x23\xe8\x4e\x41\x9d\xe1\xff\x7c\x39\xb9\xaa\x89\x8c\xee\x02\xd0\x0e\xd8\x80\xd4\xdf\x54\xed\xfa\x40\xac\x48\xc3\x8a\x74\x54\x59\x59\x72\x7b\xdb\x7c\xbb\xd2\x87\x84\x2d\x2f\xd2\xa4\xdd\xfd\x9c\x61\x98\xac\xfc\x57\x51\xf8\xbd\x45\x7e\x2d\xcc\x4e\x3f\x22\x10\xab\x83\xec\xa9\x58\x3c\xce\xed\x8f\x75\x3c\x40\xea\x50\x61\x4e\xdd\x15\xdc\xab\x66\x63\x26\xe7\xab\x00\xf2\xda\x91\x29\xa3\x16\x86\x41\x59\x2b\x92\x95\x42\x70\xf2\x57\xcc\xd8\xdd\x1d\xc4\x8d\xed\x3f\x9a\x9d\xfe\x19\x35\xec\xf7\x3d\x95\xbb\xbb\x08\x2c\xd7\x1b\x84\xf8\xad\xf7\xe9\x9f\xbc\x0f\x1d\xec\xf7\x67\xa8\x02\xa4\xa6\xa2\xc6\xd3\xd0\x14\x73\x0b\xff\x73\x53\xf5\x0f\xe0\x3e\x08\xd9\x82\x4a\xa3\x61\xcb\x55\xdd\x31\x7e\xc7\x4b\x6c\x10\x87\xf8\x69\xd2\x0a\x0e\xd5\xa0\x16\x0f\xf2\x4d\x0e\x84\x1f\xbd\x29\x4d\x5a\x4f\x9e\x89\xea\xd9\x13\xf2\x79\x72\x7b\x78\x0e\xba\x7a\x55\x4a\x62\x07\xbf\xfc\xa3\xd6\xf0\x77\xdf\x99\xb4\xa9\xd1\xad\x4e\xae\xc4\x93\xc8\x69\x32\xbe\x3c\x47\xa4\xc6\x83\x92\x4b\x3d\xb9\xd7\x7f\x80\xb2\xe9\x33\x78\x4d\xa6\x69\x35\xd4\x26\x5a\xcc\xa1\xa2\xe8\x15\x54\x37\xd1\x77\xc3\xae\xa0\x58\x2c\xff\x8c\x16\x61\x85\x87\x16\x32\x4d\x8a\xc5\x51\x95\x87\x3f\xa9\x78\x36\x3b\x35\x0b\x87\x3a\x6a\x5a\x3a\xdf\xa0\x3a\xb9\x92\x4a\xd2\xed\xeb\x42\x0a\x81\xa3\x33\xea\x17\x2c\x2b\xc5\x09\xa7\x2e\x99\x54\xeb\x60\xc7\x95\x35\xbb\x8f\x57\x57\xef\xfe\xf9\xd7\xab\xab\xcf\xf7\x0a\x74\xda\xe2\x78\xfb\x4f\x1d\x30\x5d\xfd\x0e\x60\x9b\x18\x1c\x81\xbb\xd2\x3e\xb3\x78\xa6\xae\xd9\x72\xf6\x94\xf2\xfc\x5a\x61\x3e\xba\x24\x9f\x5e\x8c\x0f\x56\xd4\xb0\x00\x1f\x10\x3c\x57\x74\xa7\xcb\xe7\x91\x81\x19\xd6\x12\xe1\x0d\x9d\xf7\xf5\x38\x42\x8d\xe9\x83\x08\x0d\x22\x3b\x59\x7a\x56\xba\x27\xaf\xe0\x2e\x0c\x9d\xc6\x71\xf2\x62\x69\xb6\x78\x3f\x93\x0e\xd7\xb3\xc3\xdc\x68\x31\xbd\xa0\xa3\x73\x17\xf4\x09\xee\xf7\x6b\x71\x3a\x71\x28\x5a\x97\x5b\x59\x11\x38\x9b\x9f\x7f\x6c\x75\xcf\xaa\x57\xf1\x22\x5e\x34\xaf\xb7\x2f\xfe\xf1\x96\x26\xed\xde\xe5\x53\xa0\x8e\xef\xb6\xe3\x5b\xed\x8b\x63\x8f\x03\x7b\xc2\x8b\xf3\xcb\xf4\xc1\xf9\x80\x92\xe5\x6c\xcb\x2d\x74\x3d\xdc\x1f\x4c\xad\x09\x32\x98\xbf\x99\xcd\x5e\x04\xc2\xe4\x75\x89\x9a\xc2\xd8\x22\x17\xb7\xc1\xba\xd6\xb9\xaf\x9d\x20\x84\xbb\x19\x80\xdf\xe7\x7c\xeb\x0f\x99\xef\x9d\x4b\x4e\x7d\x43\x1b\x68\xdc\xc1\x8f\x9c\x30\x08\x8e\x9f\x21\x24\xb0\x98\xcf\xe7\x21\x44\xf0\xc3\x7c\x0e\x11\x1c\x97\xe2\x0d\x36\xbb\x7f\x35\x1a\xdf\xaf\xd7\x0e\x29\x08\xe1\x5b\xf8\x7e\x1e\x7e\xdb\xee\x09\xdf\xcc\x00\xe4\x1a\x82\x17\x01\xfb\x66\xf4\x20\x08\xe3\x2d\x57\x41\x08\x59\x06\x8c\xb5\xcc\x00\xce\x48\x35\x74\x1b\xa8\xfd\xac\xb3\xc0\x57\xf6\xd3\xf9\xff\xef\xcc\xd5\xa3\x98\xf7\x52\xa8\xc5\x91\xb7\x97\x19\x34\xb8\x61\x9c\x2b\x99\x5f\xf7\xf1\x81\x60\x08\x76\x68\xcf\xc3\x98\x57\x15\x6a\x11\x1c\x27\xfb\xab\x27\x8c\x0b\x2a\x55\xe0\x03\x5d\x29\x9e\x63\x90\x74\xe5\x99\x6c\x2e\x47\xb9\xe1\xad\x99\x20\xb7\x37\xc3\xa7\x4f\x1f\x19\x5c\x8c\xf3\xe8\x02\xd8\xa7\x4f\x9f\x3d\xbd\xc2\x1f\xe1\x27\xf8\x01\x34\x9b\x9b\x93\x3a\x83\x17\x01\x15\xd2\x75\x5e\x79\x73\xb8\x59\xdb\x13\x76\x22\xc2\x89\x6c\xc0\xa4\x60\x8d\x53\x5a\x20\xaf\xf9\x5d\x5d\x42\x36\xd8\x12\xbb\x7a\xe5\xc8\x4a\xbd\x09\xfa\xf2\x1f\xac\x2a\xee\xe8\x27\x2d\xf0\xe6\xfd\x3a\x60\x1f\x59\x08\x17\xb0\xb8\xfc\xaa\xe0\x67\x16\x76\x32\x47\x96\x03\x7f\x34\x67\xdf\xc8\x1f\x9e\x55\xef\x8c\x96\xba\x3f\xb9\xd9\xe5\xd1\xfc\xde\x0e\x65\xb8\xf8\x97\x47\x70\x41\xbf\xf9\xbe\xdc\xfe\x44\x1c\xda\x83\xf5\xe1\x40\x9c\xc9\x93\x31\x8e\xd9\x75\x20\xa3\x80\x1c\x51\x5a\x45\xc1\x94\xca\x50\xe5\xc5\x45\x93\xac\xe1\x9b\x59\xb3\xdc\x6b\x9c\xd6\x99\x7f\x33\xb7\x24\x2c\x52\x6d\x35\xf8\x89\x98\xcc\x4f\x1f\xde\x7f\x68\xc3\x16\x76\x21\x0c\xe6\x97\xb0\xf8\x3e\x9c\xed\x07\x68\x0f\xf8\xea\x60\x59\x07\xfb\xc2\x97\xe9\x5f\x3e\xbc\x7f\x17\xb0\x44\xc8\x9c\xda\x20\xb9\x84\x5d\x34\xd2\x97\xd0\x9f\x6d\x82\x13\x3f\xba\xe5\x49\x81\xad\xc9\xe4\xa6\xac\x14\x12\x06\x77\xa3\x1b\xc9\x99\xda\xe6\xf8\xda\x5b\xc7\x8f\xf9\xb5\x1f\x78\x70\xdf\xf7\x91\x83\x53\x3a\x4d\xda\x7f\xe6\xd2\xa4\xf9\xb7\xf4\x3f\x01\x00\x00\xff\xff\xd7\xda\x07\xb4\x3d\x15\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 5437, mode: os.FileMode(436), modTime: time.Unix(1600443948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated for package frontend by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\x6b\x77\x13\x37\xf6\xbb\x7f\xc5\xad\x43\x99\x99\xc6\x8c\xed\x90\x42\xb1\x71\xf7\xd0\x40\xda\x6c\x21\x74\x4b\xda\x3d\x67\x1d\x6f\x90\x67\xae\x6d\x25\xb2\x34\x95\x34\x8e\x53\x9a\xff\xbe\x47\xd2\x3c\x34\x8e\x1d\x60\xbb\xbb\x9f\x16\xce\x21\x8a\x74\xdf\xf7\xea\x3e\x34\xac\x88\x84\x19\x65\x1a\xa5\x3a\x12\x39\xd7\x30\x82\xde\xb0\xd5\x7a\x10\xa6\x22\xc9\x97\xc8\x75\x14\x4b\x24\xe9\x4d\x38\xcb\x79\xa2\xa9\xe0\x61\x04\x1f\x5a\x00\x06\x4f\x69\x22\x0d\xc2\x4c\xc8\x25\xd1\x67\x74\x89\x4a\x93\x65\x16\x72\xbc\x86\x97\x44\x63\x18\xd6\xcb\x08\xba\xd0\xef\xf5\x7a\x11\x3c\x82\x67\xbd\x1e\x3c\x82\xfa\x28\x9e\xa3\xc5\xfe\x5d\x70\x7c\x3b\x9b\x29\xd4\x61\x04\x5f\xc1\x93\x5e\xf4\x95\xc3\x89\x86\x2d\x00\x3a\x83\xf0\x41\xd8\xde\xd3\x74\x89\x17\x96\x75\x3b\x8a\x57\x84\x85\x11\x8c\x46\xd0\x6e\x3b\xb9\x00\xb6\xc2\xd8\xb5\x25\x73\xdb\x2a\xa4\x47\x9e\xfe\x1b\xb2\xff\x29\xa9\x91\xa7\x1f\x91\xb9\x86\x40\x9e\xd6\xf2\x9a\x73\xe7\xa5\x9f\x58\xae\xda\x51\x9c\x30\x9a\x5c\x85\x24\x4d\x8f\xed\xae\x85\x7c\x10\xb6\x8d\x36\xed\x28\x16\x3c\x0c\x54\x3e\x5d\x52\x1d\x74\xc0\x2d\xfe\x96\xa3\xbc\x89\x86\x86\xd8\x5c\x88\x39\xc3\x38\x59\x10\xa9\x55\xcc\x04\x49\xc3\x20\xc9\xa5\x44\x6e\xc0\xad\x40\x41\x46\x92\x2b\x32\x47\x15\x0c\x60\x1c\x24\x42\xa2\x85\x0e\x26\x46\x20\xcb\x0c\x5a\x00\xd7\x94\xa7\xe2\x3a\x16\x7c\x41\xd4\x22\x59\x10\x3e\x47\x63\xd1\x22\x50\x20\x2c\xb5\x6b\x32\x54\xa8\xdf\xf2\xd7\x82\xa4\x47\x84\xb1\x29\x49\xae\xc2\x54\x92\xeb\xa3\x45\xc3\x41\x9f\x83\xd2\x02\xc8\x44\x96\x33\xa2\xf1\x98\x22\x4b\x55\x18\x0d\x5b\x46\xca\x56\x25\x4a\x65\xa8\x42\xa6\x44\x70\xa5\x8b\xb8\x3f\xc3\x65\x66\x70\x61\xe4\x99\xb9\xdc\x6c\x47\xf1\x42\x2f\x59\x68\x6e\x41\xc6\x48\x82\x61\xf7\xe2\xe2\xf4\x97\x37\x17\x17\xdd\x79\xa7\x71\x71\x4a\x17\x14\x04\x8c\x93\x48\x96\x21\x4f\xc3\x26\x45\x27\xb0\x13\xe0\x81\x3b\xb2\x52\x5b\xf6\xef\x0b\xec\x8b\x99\xd9\x3a\x3f\x1f\x3f\xf8\xe0\xf3\xb8\x3d\x3f\x9f\xbc\xb7\x8c\x1a\xf8\xbf\x12\x96\x63\x13\x7f\x65\xb6\x3e\x15\xff\x67\x5c\x8a\xd5\x06\x01\x69\xf7\x76\x52\x30\xba\x7a\xc2\xc7\xce\xfb\x9b\x49\xa2\x36\x34\xb2\xf4\x94\x2c\x1d\x0f\xbd\xa0\xaa\xb8\x05\xc3\x06\x90\x21\x77\x9a\x2f\x3d\x20\xa2\xb5\x0c\xdb\xd4\xdc\x89\x25\xd1\xc9\x22\xec\x9e\xa7\xfb\xdd\x68\xdc\x9b\x38\x4c\xdf\x00\x05\x30\x27\x4b\x6c\x77\x6a\x96\x05\x0f\x13\xe6\x16\x4c\x85\x15\xa3\x4d\xa8\xdb\x86\x62\xce\x2a\xc5\x4d\xbb\xa3\x58\x29\x61\xc2\x84\x42\xa5\xc3\x20\x96\xe2\x3a\x30\x61\x62\xb0\x42\x9f\x9e\x6f\xbf\xfd\xfd\x61\xeb\xb6\xe5\x45\x66\x46\xa4\xc2\x9f\x88\x24\x4b\x15\x2a\x2d\x1d\x79\x89\x3a\x97\x1c\x94\x96\xb1\xca\x18\xd5\x61\xf0\xd0\x92\x4e\xf3\xc4\xb3\x71\x66\xb1\x3a\x60\x7f\x36\x0d\x3e\xbe\xc2\x9b\x0e\xd8\x20\x98\xc0\xc8\x41\x94\xa4\x46\x81\x31\x66\x16\xa6\x98\x88\x14\x7f\xf9\xf9\xe4\x48\x2c\x33\xc1\xb1\x08\x61\x70\xd0\xca\x90\x30\xb8\x96\x48\x1d\xfd\xe7\xfb\x26\xf0\x03\x08\x0a\xe0\x42\x54\x87\x63\x95\xee\xc0\x07\xa3\xf8\xad\xaf\xe4\xc6\xf5\xac\x2a\xc8\x6f\x26\x2b\xc1\x08\x98\x48\x88\x81\x8c\x17\x12\x67\x85\xa0\xed\xbd\x76\x34\xee\x4f\xca\x24\xfa\x85\x85\x2d\xd5\x74\x6c\x1b\xf9\xdc\x9e\xbf\xfa\x2d\xb7\x84\x14\x8c\xdc\x86\x67\x40\x03\x3d\x13\x12\x42\x03\x4d\x6d\xa1\x03\x0a\xcf\x37\x10\x63\x86\x7c\xae\x17\x43\xa0\xfb\xfb\x25\x37\x5b\x2e\x4a\x8a\x15\xe4\x98\x4e\x3c\x9b\x0e\x2b\xc8\x2b\x18\x01\x56\x21\x6a\x76\x56\x30\x82\xbb\xe6\x0e\x71\xdc\x9f\xb8\x10\x71\x2a\x5e\xd9\xa2\x30\x95\x48\xae\x52\x71\xcd\xab\xea\xe0\xf2\x4a\xb5\x0f\x22\x33\xfc\xc7\xd6\x33\xa3\x36\xec\xc3\x0a\xf6\xa1\x3d\x69\x17\xf7\x25\x50\xc8\x30\xd1\x98\x06\x1d\xa8\xd7\x85\x80\x36\x42\x34\xe5\x39\xba\xdf\x6f\xed\xbf\x1b\x22\xf8\xe5\xb3\x21\xc3\x9d\xba\xba\xfa\x6c\xb2\xb6\xc2\xdd\x25\x5a\x17\xbe\xdd\x24\x37\xc9\x89\xec\x98\x89\x6b\xb5\x49\xae\xda\xfe\x64\x72\x65\x72\xf9\xa7\x9f\x7d\xbb\x51\x4d\x77\x2b\xaa\x6b\x9d\x90\xa5\x27\x3c\xc5\x35\x8c\xfc\x2a\x33\xac\xca\xfa\x46\x42\x37\xee\xf2\x90\xf6\xa1\x7d\x7e\x3e\x29\x44\xbd\xfa\x7c\x34\x2d\xe9\x7c\x8e\x32\x6c\xbb\x04\xdc\xbe\x4b\xa1\xac\x04\xf7\x31\x5e\x15\x85\xd7\xbf\xb3\x5e\xdb\x50\x5c\x58\x5c\x21\xd7\x71\x26\xed\xcf\x97\x38\x23\x39\xd3\xa1\x8b\xdf\x6e\x17\x7e\x25\x8c\xa6\xa6\x8c\x06\xa5\x03\x02\x98\x8a\x75\x55\x6b\xca\x5d\x9b\xdd\x83\xca\x4b\x81\x57\x09\x9a\x80\x27\xb6\x19\xb5\xf9\xf1\x84\xeb\xb0\xdc\xee\x40\xbf\x57\x75\x56\x54\x9d\x92\xd3\xd0\xc3\x88\xe0\x8f\x3f\x1a\x14\x9e\x43\x7f\x73\xeb\x5b\xdb\x9e\xf5\x4a\xef\x12\x86\x52\x87\xed\x13\x9e\x08\x29\x31\xd1\x10\x9c\x89\x0c\x9c\x70\x03\xc8\x18\x12\x85\x80\x5c\xa3\x04\x62\xb2\x21\x4d\x81\x72\x8d\x73\x94\x30\x45\x7d\x8d\xc8\xa1\x0f\x84\xa7\x8e\x6a\xdc\x6e\x26\xc6\x19\x61\x0a\xab\x3c\xe5\xd2\xa4\x33\x81\xe9\xd5\x82\x28\x56\x28\x29\x61\xf4\xf7\xa2\x66\x14\x10\xfb\x23\x08\x1e\x96\x42\x8f\x02\xd8\x07\xe4\x77\xf2\x47\x79\x6e\x11\x1b\x29\x14\x46\xd0\xde\x33\x1e\x77\xe4\x5a\x4d\x71\x1a\x7e\xae\x3a\xa9\xcf\x4b\xcb\x9f\x92\x95\x1f\xc4\xe4\x92\xac\x43\x77\xa6\x6f\x32\x1c\x40\xfb\xfb\x57\x67\xed\x8e\xdd\xc8\x25\x1b\x40\xbb\x6b\x09\xfc\xc5\xc8\x6a\x57\xee\x2c\x25\x9a\x9c\x39\x04\x8d\x6b\x5d\x60\xa8\x3c\x49\x50\xa9\x41\xd5\x62\x86\xd2\x00\x76\xcc\x20\xa2\x73\xd5\x81\xf5\x42\xd6\x77\xd6\x88\x67\xcf\x4d\xb2\xc8\x79\x8a\x33\xca\x31\xad\xcf\xdd\x2d\xb1\x1d\xe6\x45\x4a\x57\xe6\x32\xe1\x5a\x87\xed\x53\x61\xd9\xc3\x4c\xe4\x26\x27\x55\xd0\xa5\x7a\xd5\xc6\x6d\xab\xdc\xe6\x29\x4a\x67\x43\xcb\xd0\xe1\xdc\x3a\xa1\x51\x4a\x21\x3d\x91\x1b\x32\x6e\x95\x60\xbd\x90\xb1\x44\x95\x09\xae\xf0\x0c\xd7\x3a\xaa\x32\xea\x6d\xd4\x70\xdd\x5d\xc6\x96\x70\x26\xd1\x84\xd8\x4f\x24\x23\xb1\xbd\x3e\xee\xd0\xe4\x8a\x65\x18\xb9\x0b\x5b\x8f\x7d\x68\x3a\xcf\xb1\xc1\x89\x0d\xd4\xb8\x37\x99\xdc\x29\x94\x7d\x57\x28\x2b\xa0\x5d\x35\x52\x8a\x6b\x73\x65\x2b\x5a\xd4\xab\x81\x0b\xa2\x4e\x05\xff\x07\x4a\x01\x23\x03\x18\x2b\x46\x13\x0c\xfb\x51\xac\xc4\xd2\xeb\x6a\x56\x84\xd5\xf6\x31\x88\xdc\x76\x84\x56\x91\x63\x26\x88\x0e\x0d\x88\xb9\xd3\x41\x10\xd5\x3a\xf9\x1e\x82\x2f\x5c\x5e\xe0\xf9\x32\x82\x87\x0f\x2d\x85\x2f\x46\x76\xb0\xb5\x96\x2c\xc0\x4d\x80\xd4\x52\xd5\x4c\x4b\xbb\xc4\x59\xae\x16\xa1\x14\xd7\x51\x5d\xd3\xaa\x6e\xc3\x05\x16\x8c\xef\x1a\xab\xe8\x2a\x2a\x2a\x5b\x6c\x55\x18\xa7\xc2\xf7\x28\x5c\x3a\x0a\x97\x1e\x05\xd3\x67\x94\x44\x2e\x6b\x22\x4e\x0e\x53\x77\x3c\xc0\xf1\xe5\x64\xe8\xc5\x3f\x75\x7a\x1b\x23\x5c\xba\xa5\x1f\xff\xeb\x0d\xbb\xae\x77\x58\xd5\xcf\xb5\xeb\x28\xb2\x78\xbd\xf2\xb0\xbc\x05\x85\x4e\xe3\x4b\xa3\xd6\x7a\xc3\x62\x36\x55\x14\xe3\xa2\x49\x78\xa8\x7e\xa5\x8a\x4e\x29\xa3\xfa\xc6\x30\xdd\x71\x54\xa8\x6d\x25\x2f\x82\xb3\xdc\x7a\x04\xfd\x52\x95\x5d\x74\x47\xf0\x42\x4a\x72\x13\x6e\xc1\x8c\x67\x94\xb1\x50\xcb\x1c\x9b\x6f\x02\xa5\x25\x5f\x7e\xcc\xbb\x1f\xbf\x05\xe3\xd2\x20\xe6\x42\x99\x02\x49\xd8\x35\xb9\x51\x70\x85\x98\x81\x2e\xdf\x1b\xee\x3a\xbf\xef\x9c\x5f\x60\x6f\x77\xbc\x31\xe7\x0e\xad\xc7\x97\x46\xc1\x89\xef\x66\x73\xd9\x6c\x28\xd7\x2e\x8a\x9a\xde\x73\xff\xfa\xca\x37\x63\xbf\xf2\xa1\x0f\xe2\x99\xf4\x39\x1c\xf8\x2f\x19\x5b\x73\xaa\x13\x14\xca\x7e\xb4\xaa\x93\xe5\x3b\x53\x3c\x47\xfd\x8a\xa1\x59\x7e\x77\x73\x62\x9f\x24\x94\x16\xcb\x0b\x86\x73\xe4\x69\x10\xc5\x94\x73\x94\x3f\x9c\xbd\x79\x0d\x23\x08\x82\xe1\xae\x31\xc0\x32\x2f\xfc\x57\xbc\x22\xac\xa8\xca\x4d\x89\x75\xb5\x8c\x98\xa0\x38\x13\x06\xe4\x8c\x4c\x19\x36\x94\xaa\xb3\xa3\x6b\xb2\x4d\x22\x75\x8a\x51\xf5\x4e\x93\xe4\x0a\xd3\x81\x2b\xa2\x2e\xbb\x6b\xaa\x19\x0e\x20\x30\x75\x18\xde\x4c\x33\x15\x78\xfb\x26\x79\xbf\xd3\x37\x06\xa0\xca\x2d\x82\xeb\x77\xf4\x77\x1c\xc0\xc1\x61\xa7\xd8\x9b\x0a\x96\x0e\xc0\x04\x63\xa7\x6a\x37\x99\xa9\x19\xc1\xde\xe3\xc7\x8f\x03\xbf\x98\x2c\x5e\xac\xa9\xaa\xa9\x95\xdc\xcf\xe8\x12\x83\x12\x59\x31\xc2\x35\xa6\x86\x79\x93\xaa\x77\xf0\x82\xcf\x0d\xe2\x93\x5e\x75\xb6\x10\xd7\xe6\xe0\xd5\x0a\xe5\xcd\x00\xfa\xd5\xc1\x2e\x45\x36\x84\xec\xd4\xa9\x42\x13\x46\x93\x86\x91\xb6\x2b\xe9\x1b\xa3\xff\x4d\x19\x8f\xe5\xe9\x5c\xd2\x94\x51\x8e\x6a\x2b\xcb\xd9\x63\xf3\xd7\xe3\x9a\x98\xe1\xda\xc8\xbd\x49\x67\x49\xb9\x90\xdf\xdf\x4b\x0c\x9f\x99\xbf\xc1\x26\xa6\xfe\x0c\xa5\x3d\x4d\x0e\x9a\x37\xcb\xc1\xac\x9a\x7e\x5b\x52\x6e\xdf\x22\x06\xd0\xb4\xf3\x00\x82\x37\x38\x27\x53\xaa\x15\x64\x28\x41\x61\x22\x78\x1a\xfc\xdf\x17\xff\x49\x5f\x2c\x90\xce\x17\x7a\x00\x2a\x91\x88\x3c\x76\xbf\xc2\x57\xd0\x8b\x9f\x3a\x00\x9b\x41\x5e\x48\x24\x35\xb3\x6b\x9a\xea\xc5\x00\x82\x67\xbd\x2f\x83\x0e\x14\x9b\x25\xa1\xe0\xa9\xd9\x2d\x25\x15\xd9\x00\x82\xaf\xeb\x8d\x29\x49\xae\xe6\xd2\xf4\x92\x47\x4e\xde\x5a\x01\xa5\xa5\xb8\x32\x4e\xdf\x4b\x92\xc4\xd3\xc0\xed\xff\xdd\xf1\xec\x6f\xd3\xe1\x0e\xd1\x60\x6f\x66\xff\x14\x54\xac\x69\xd4\x00\xc6\xc1\xde\x41\xff\xd9\x93\xe3\xc7\x41\x07\x82\xbd\xc3\xa3\x17\xc7\x5f\xf7\xec\xf2\xf8\xf8\xa8\xdf\x7b\x5a\x2c\xbf\x7e\x7a\x70\x60\x97\xcf\x8e\x0e\x9e\x7e\xd7\x0b\x26\x8e\x08\xe1\x74\x69\x53\x66\x2d\xb3\x1d\xfd\xf3\xac\x19\x3c\x69\x2e\x0b\x30\x33\x01\x95\xbb\x48\x14\xe5\xf3\x01\x04\x22\xd7\x8d\x1c\xe6\x12\x7a\x4d\x33\x13\x8a\x3a\xf4\x80\x0b\x8e\x0d\x58\x2d\x04\xd3\x34\xf3\x32\xde\x9f\x0c\x04\x3f\xdf\x59\xd3\x1d\x89\x14\x9d\x3a\x0d\x19\x29\x2f\xed\x7f\xe0\x76\x32\x41\x2b\x6a\xc5\x34\x62\x0b\x5a\x2d\x47\x6f\x00\x1f\x2c\xe2\x4b\xa2\x16\x85\x8c\xe3\xc3\x0e\x1c\x4e\x6a\xb6\xfd\x6d\x30\x07\x1d\x38\xf0\x60\x0e\x76\xd0\xf1\x61\x1e\xef\xa0\xe3\xf3\x3a\xdc\x06\xd3\xef\x40\x7f\xe2\x55\xfd\xdb\x61\xa3\x6e\xc2\xc8\x7e\xe0\xd8\x5a\x37\xcd\x8d\x70\xb3\xc6\xee\x92\x5d\x16\xfe\xc0\x35\x8f\xf6\xf7\xd8\x4c\x98\x61\x55\x96\x3b\x65\x65\xf5\x1f\xc2\x5d\xad\x7f\x6d\x23\xe3\x25\xb5\xcf\x65\x9f\xd8\x16\x58\x36\x4d\xec\x46\xa7\xf0\xde\xaa\xfa\x3c\xa5\x2b\x50\xc6\x06\xa3\xf6\x92\xc8\x39\xe5\x8f\xa6\x42\x6b\xb1\x1c\x7c\x93\xad\x87\x26\x50\x1e\x29\xe3\xdb\xfe\x61\xb6\x1e\xba\x70\xda\x3b\x3c\x3c\x1c\xb6\xbf\x2d\x8c\xf9\xdc\xdc\x49\x3e\xff\xf6\x07\x71\x0d\x5a\x40\xae\x70\xf0\xbc\x5b\xec\xc1\x11\xa3\xc9\x15\x10\x98\x31\x77\x6a\x82\x0b\x04\x67\x37\x40\x75\x0c\x47\x5a\xb2\xee\xd1\x32\xed\xbe\xb5\x7a\xc3\x3e\xd8\x27\x65\x03\x48\xd2\xb4\xeb\x1e\x8c\x2d\xae\x82\x99\x14\x4b\xd0\x0b\x84\xb9\x24\xd9\x22\x76\xb2\x77\x53\xba\x32\x72\xbc\xf7\x0d\x66\x2f\x38\x8c\x4a\x63\xc6\x6e\x63\xe8\x03\xe4\x4b\xdb\xbe\x34\xdb\x5f\x8f\x86\x36\xdd\x8f\x6f\xea\x44\x22\xd1\x58\x58\x3b\x0c\xec\xb9\xb3\xb0\x5d\xc6\x09\x23\x4a\xbd\xa6\x4a\xc7\x24\x4d\xcb\xf3\x0e\xb8\xc5\x23\xb5\xac\xd7\x53\x21\x53\xd3\x52\x05\xfe\xbb\xce\x54\xa4\x37\xf7\xb1\x33\xe7\x41\xf1\x64\x6e\x3a\x62\x86\xda\x9f\x3e\x0b\x8d\x1a\xed\xb6\xa3\xec\x1a\xee\x9d\x74\x65\xd0\xf8\xce\x60\x2d\x75\x84\x8c\xdd\x87\x93\xd6\x38\x05\x74\x6c\xc3\x27\xde\xc8\xbc\x30\x2a\x5c\x31\x0e\xa9\x9b\x49\xbe\x2c\x36\x0a\x7b\x4f\xb6\x93\xb1\x05\xc5\x34\xb2\x07\xbd\x6c\x1d\xf8\xe2\x31\x32\x45\xf6\xc9\xe2\x55\xd0\xb6\xd1\x3e\x12\x5c\xa3\x7d\x36\x2b\x9c\x5e\x4d\xe0\x66\x06\x70\x9f\xa3\x8e\x16\x94\xa5\x61\x25\x4f\xb4\xfd\xbc\xa2\x5b\x9c\x5b\xe7\x34\x20\xdc\x6c\x50\x0d\xd2\xbb\xa6\xbb\x31\xdd\x98\x47\xec\xe8\x6f\x6d\x20\x32\x92\xb8\x39\x2d\xe8\xc5\x87\x85\x11\x6e\x01\x99\xc2\xfb\xa1\xfb\x71\x2f\x68\xbc\xc4\x5a\xe9\xd3\xf4\xd5\x0a\xb9\x36\xf1\x89\x1c\x65\x18\xd8\x6b\x16\x74\xea\xa7\x17\xfb\x70\xd9\x78\xd4\x55\x1a\x56\x46\x54\x86\xe5\xc7\xef\x5d\x93\xa8\x1b\x12\xc2\xef\x84\x60\x48\x78\x54\xdd\x26\x47\xca\x58\xc0\x3d\x8f\x26\x5a\xb2\x1f\xd1\x0e\xb5\x6e\x63\x89\x9a\x34\x36\x08\xd3\x3f\xe2\x8d\x3f\xa0\x75\xbb\xbb\x92\xc4\x00\xb4\x98\xcf\x19\x82\x5e\x50\x55\x54\x9c\xc6\x50\x7e\xbf\xd5\xcd\xdc\xdf\xd4\x6f\x34\xaa\xe7\xe6\x8a\xf9\xc9\xcc\xd1\xa7\xca\xe6\x1e\x9b\xb9\x0a\xb4\x72\x6c\x23\x3c\x35\x49\x4f\x82\xb6\xbf\x6a\x01\x0b\x9a\x22\x50\xdd\x71\xd9\x8e\x30\xe6\xd1\xfc\xd8\x44\x5e\x26\xa7\x2d\xa3\x78\x51\xa7\x9b\x51\x70\x0f\xcd\x52\xd3\x11\x7c\x24\x02\x3d\xe2\xad\x1d\x4c\xba\x5d\xf8\x19\xe7\x39\x33\xd5\xd0\x59\x9f\xce\x9c\x35\x3c\xf3\x1b\x2b\x15\xc6\xa9\x75\x1f\x3a\x52\x75\xe2\xff\xef\xf9\xeb\x7f\x68\xdb\x7b\x68\xda\x89\xc2\x23\xfa\x09\xfe\x31\x62\x6c\x71\x42\x79\xd1\xef\xbc\x65\x56\x8f\x75\xe0\xbe\x24\xd9\xbb\xee\x0a\x91\x9f\x87\x6c\x66\xda\xda\x06\x34\xa0\x0c\xde\xc6\x57\xc9\xcd\xff\xfa\x91\x12\x8d\x8d\xef\xaf\x66\x23\xd6\xe2\xe4\xdd\xdb\x77\x5a\x52\x3e\x0f\xa3\x58\xe5\x53\xa5\x65\xd8\xeb\x40\xff\x49\xf3\x31\xf6\x9e\x0f\xcc\xcd\xe7\x71\x78\x60\x7a\x9a\xbf\xbe\x7b\x7b\x1a\xb6\xbb\x29\x4d\xb4\xfb\x44\xa3\xba\xed\x7d\x0b\xed\x25\xac\xfa\x4d\xd7\xfd\xd9\xf9\x59\xa7\xfc\x72\x5e\x7d\xd5\x21\xb9\x16\x89\x58\x66\x0c\x35\x86\xbe\xab\x01\x94\xc8\x65\x82\x03\x5b\x22\xea\x66\xf9\xb6\xb6\x77\xeb\xb6\xf5\xaf\x00\x00\x00\xff\xff\x7c\x5a\x25\x7f\x16\x24\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 9238, mode: os.FileMode(436), modTime: time.Unix(1747736659, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\xb1\x2f\x1b\x56\x8a\x76\xd2\x00\x5b\x26\xf9\x61\xdd\xba\x97\xae\xe8\xb6\xf4\x69\x18\x0c\x4a\x3c\x5b\x4c\xf8\x47\x23\x29\x3b\x5e\x90\xef\x3e\x50\x92\x6d\x49\xb1\x53\x07\x30\x86\xb5\x40\x24\x1d\x8f\xbf\xfb\xf1\xfe\x90\x67\xa6\x5f\x09\x5b\x84\x4d\x85\x50\x06\xad\x66\xaf\xd2\xf8\x00\xc5\xcd\x32\x23\x68\xc8\xec\x15\x40\x5a\x22\x17\xf1\x05\x20\xd5\x18\x38\x14\x25\x77\x1e\x43\x46\xea\xb0\xa0\xdf\x91\xfe\x90\xe1\x1a\x33\xb2\x92\xb8\xae\xac\x0b\x04\x0a\x6b\x02\x9a\x90\x91\xb5\x14\xa1\xcc\x04\xae\x64\x81\xb4\xf9\x78\x03\xd2\xc8\x20\xb9\xa2\xbe\xe0\x0a\xb3\xe9\x1b\xf0\xa5\x93\xe6\x8e\x06\x4b\x17\x32\x64\xc6\x6e\xa1\x95\x34\x77\xe0\x50\x65\xc4\x87\x8d\x42\x5f\x22\x06\x02\xa5\xc3\x45\x46\xca\x10\x2a\x7f\xcd\x98\x0f\xbc\xb8\xab\x78\x28\x93\xdc\xda\xe0\x83\xe3\x55\x21\x4c\x52\x58\xcd\x76\x02\xf6\x36\xb9\x4a\x2e\x58\xe1\xfd\x5e\x96\x68\x69\x92\xc2\x7b\x02\x2f\x30\x56\x58\x81\xc9\xed\xdf\x35\xba\x4d\x63\xa1\x96\x6c\x9a\x4c\x2f\x92\x29\x0b\x25\x6a\xf4\x2c\xe7\x1e\x59\xab\x40\x6b\xd9\xe0\x77\xf0\x41\x06\x85\xb3\xf7\xca\xae\x4b\x5b\x7b\x4c\x59\x2b\x68\x07\x1b\x8b\xed\x3b\xc0\xeb\xa2\xf6\xc1\xea\xb9\xc2\x25\x1a\x01\x0f\x9d\x18\x40\xf3\x7b\x5a\xa2\x5c\x96\xe1\x1a\xde\x4e\x26\xd5\xfd\x0f\xbb\x21\xbb\x42\xb7\x50\x76\x4d\x37\xd7\xc0\xeb\x60\xb7\x23\x8f\xdd\x33\x09\x3c\x57\x48\xbd\x86\xd0\x47\xac\xb8\x10\xd2\x2c\xaf\x61\x92\x5c\x5c\x39\xd4\xc3\x69\x29\x6b\x79\x01\x40\x4c\x07\xb6\xcd\x87\x34\xb7\x62\xd3\x31\x37\x7c\x05\x85\xe2\xde\x67\xc4\xf0\x55\xce\x1d\xb4\x0f\x2a\xb8\xbb\x03\x1f\x64\x71\xb7\xa1\xc1\x56\x90\x2f\x5b\xd1\x42\xe1\x3d\xd5\x82\x1a\xbb\x76\xbc\x82\x8a\x4e\xc8\x76\xe1\x29\x1f\x42\xd1\xdc\x71\x23\xa0\xb0\x8a\x7a\x4d\x2f\x9b\x17\x2d\xe8\x05\x68\x47\x27\xdb\xd0\xbc\x26\x7d\xa7\xf2\x8e\x16\x33\x7c\xd5\xbd\x0a\xb9\x63\x18\xb3\x92\x4b\x83\x8e\x2e\x54\x2d\xc5\xde\x70\x4f\xc7\xd9\xf5\x4e\x3e\x9e\xdd\x99\x8f\xe4\x0d\x82\x88\x5f\xb9\xb2\xc5\x5d\x5c\x9c\x8a\x71\x01\x2f\x05\x46\x27\x54\x74\xda\x43\x19\xe2\x74\x3a\xb4\x75\xce\x40\x0d\x20\x5d\x58\xa7\xc7\x22\x89\x4a\x78\x0c\x43\x71\x6f\x60\x8b\x1c\xe7\xd2\xa5\xb3\x75\x45\xc6\xba\x31\xc1\x9b\x7c\x9a\xdd\x48\x8d\xf0\xf5\xe7\x9b\x77\xdf\xa4\xac\x13\x3d\xd5\x3d\xea\x90\xc3\x3a\x85\x55\x07\x75\xa2\x55\x9e\xa3\x82\x85\x75\x19\x09\x52\xe3\xdc\x07\xee\x02\x99\xfd\x11\x1f\x29\x6b\x46\x8f\xcc\x94\xa6\xaa\x03\xc4\x3d\x2a\x23\x82\x07\x8c\xd3\xa9\xb2\x05\x57\xa4\xdb\x6f\x7a\x80\x03\x17\xc4\x38\x3b\xab\x40\xd3\x69\x13\x09\x90\x62\x68\xfd\xd0\x72\x98\x90\xab\x33\xae\x13\x8d\x20\xb3\x9f\x8d\x38\xcb\x1a\x23\xd8\x89\x2b\x6c\xec\x9e\xbe\xbe\x83\xe2\x94\x9d\x37\xe5\x5e\xc3\x8d\xad\x20\x96\xa9\xff\x4f\x72\xae\xef\x55\x53\xeb\x1c\x5d\xe7\x20\x5b\x35\x24\x76\xbe\xdd\x7d\x3f\xeb\x5b\x2d\x4d\x46\xe2\x93\xdf\x67\x64\x3a\x99\x4c\x26\x04\x56\x5c\xd5\x98\x91\xab\xc9\xe4\x18\x09\xaf\xb9\x52\x03\xe0\x80\xf7\x01\xe2\x1f\xaa\xeb\x80\x87\xc3\x14\xff\xbd\x2b\xad\xf5\xd2\x2c\x21\x58\x0b\x9a\x9b\x0d\xe8\x66\x73\xe1\x8b\x05\x16\x01\x72\x67\xd7\x1e\x1d\x54\xe8\x22\x2c\x37\x05\x26\x87\x29\xb0\x86\xc3\x19\xb3\x61\x20\x3f\x4b\x6a\xbc\x97\x2a\xa0\xfb\x42\x56\xc4\xd8\x2d\x1a\x45\x7f\x08\xea\xc8\x5a\xce\x97\x4f\x79\x1d\x82\x35\x5d\x42\xb5\x1f\xa4\x47\xea\x93\xaa\xf7\x29\x94\x07\x03\x79\x30\xb4\x72\x52\x73\xb7\x69\xde\xbd\x8e\xc9\x44\x66\xdf\xa6\xac\x9d\xfd\x7f\x2b\xd0\x1f\x1d\xf2\x3b\x61\xd7\xe6\x84\x40\xe4\x5b\xdd\x43\xb1\x38\xcd\xed\xa7\x3a\x3e\x56\x11\xaa\x98\xf3\x6d\xbd\xee\x4c\x93\x21\x93\xe3\xf5\x0b\x6d\x2f\x45\x5b\x18\x02\xba\x56\x41\x56\x0a\xc1\xcb\x7f\x30\x23\x0f\x0f\x90\x34\x6b\xff\xc9\xae\xcd\x07\x34\xf0\xf8\xb8\xa3\xf2\xf0\x40\xc1\x71\xb3\x44\x48\xde\x47\x9f\xfe\x12\x7d\xe8\xe1\xf1\xf1\x08\x55\x80\xd4\x56\xa1\xf1\x34\x34\x5b\x7e\x0b\xff\xa1\x39\x17\x9e\xc1\x7d\x16\xb2\x05\x95\xd6\x6c\x37\x9c\x08\xf9\x91\x6b\x6c\x10\xfb\xf8\x29\x6b\x15\xfb\x66\x62\xfb\xf8\x1c\x5f\xb6\x25\x7c\xf2\xa4\x94\xb5\x9e\x3c\x12\xd5\xa3\x67\xe8\x79\x72\xbb\xbf\xaf\xfb\x3a\xd7\x32\xec\x36\xe2\xdf\x6b\x03\xbf\xc5\xb6\xbb\x4d\x8d\x6e\x74\xd4\x48\x1d\x44\x4e\xd9\xb0\xe5\x1a\x90\x1a\x7e\x68\x2e\xcd\xa8\x1b\xfc\x1e\x74\xd3\x9d\xc6\xa6\xbb\x69\x50\xd5\x92\x4e\x27\x50\x05\x7a\x09\xd5\x3d\x7d\x3b\xee\x25\x23\xb9\xf8\x3b\x2a\xcc\x85\x5c\x91\xd9\xc8\x03\x7b\x95\xfe\x4f\x80\x91\x5a\xca\x22\x8f\x11\xc3\x43\x7c\x77\x88\x4d\x1b\x1f\x7f\x9e\x79\x99\x4b\x25\xc3\xe6\xba\x94\x42\xe0\x60\x13\xbb\x41\x5d\x29\x1e\x70\xec\xb3\x51\x39\xf7\x66\xcc\x9d\x5d\xff\x39\x9f\x7f\xfc\xfc\xeb\x7c\xfe\xd7\x93\x0a\x1e\x77\xce\xd1\x41\x87\x76\xa0\xae\xc0\x7b\xb0\x4d\x90\xf6\xc0\x5d\xed\x1f\x19\x3c\x52\xf8\x64\xf6\xea\x25\xf5\xfb\xa5\xca\x3d\xb9\x66\x5f\x5e\xad\xcf\x96\x5c\xbf\x42\x9f\x51\x3c\x56\x95\x87\xeb\xeb\xc4\xc0\xf4\x8b\x2d\x36\x2d\xc7\x7d\x3d\x8c\x50\xb3\xf4\x5e\x84\x7a\x91\x1d\x0d\x9d\x95\xee\xc1\x33\xba\x0b\x43\x67\x71\x98\xbc\xa8\xed\x0a\x9f\x66\xd2\xf6\xfc\xf6\x58\x58\x23\xc6\x27\x38\x3d\x76\x82\x1f\xe0\xfe\xb4\x16\xc7\x82\x6d\xd1\xfa\xc2\xc9\x2a\x80\x77\xc5\xf1\xab\x86\xee\x52\xe1\x32\x99\x26\xd3\xe6\xee\xe2\xd6\x13\x98\xa5\xac\x9d\x3b\x7b\x09\xd4\xfe\xd6\x62\x7f\x53\x71\xeb\xc9\x69\x60\x2f\xb8\x6f\xb9\x1d\x5f\xb7\x9c\x6c\x64\xbd\x5e\x27\x4b\x1f\x78\x90\x45\x83\xdc\xec\x98\x9e\x29\xcb\x05\xba\xd3\x61\x0a\x61\x6e\x7d\x52\x28\x5b\x8b\x85\xe2\x0e\x1b\x2c\x7e\xcb\xef\x99\x92\xb9\x67\x9f\x78\xc5\x3f\x71\xe7\x91\x5d\x25\x97\xc9\x84\x55\x3c\xfe\x77\x1e\x4f\x23\xcb\x16\xdb\x7b\x87\xa7\xba\x29\x6b\xef\x48\x52\xd6\x5c\xaf\xfd\x1b\x00\x00\xff\xff\x41\x6b\x92\x22\x6e\x13\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4974, mode: os.FileMode(436), modTime: time.Unix(1747728480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package frontend generated by go-bindata.// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6f\x73\xdb\x36\xd2\x7f\xaf\x4f\xb1\xa5\xdd\x12\xac\x19\x5a\x72\xd2\x66\x22\x55\xcf\x33\xad\x12\x37\xbe\x49\x9c\x5e\xed\xf6\x5e\xc8\x3a\x17\x22\x57\x12\x6c\x12\x60\x01\x50\x92\x9b\xfa\xbb\xdf\x00\xe0\x5f\x59\xf6\x25\xd7\x7b\x79\xf1\x4c\x4d\x2f\x76\x7f\xbb\xd8\x5d\xec\x2e\xd0\x35\x95\xb0\x60\xa9\x46\xa9\x26\xa2\xe0\x1a\xc6\xd0\x1f\xf5\x7a\x87\x24\x11\x71\x91\x21\xd7\x41\x24\x91\x26\x77\x64\x51\xf0\x58\x33\xc1\x49\x00\x1f\x7b\x00\x46\x4e\x69\x2a\x8d\xc0\x42\xc8\x8c\xea\x4b\x96\xa1\xd2\x34\xcb\x09\xc7\x0d\xbc\xa6\x1a\x09\x69\x3e\x03\x38\x86\x41\xbf\xdf\x0f\xe0\x19\xbc\xea\xf7\xe1\x19\x34\x4b\xd1\x12\xad\xf4\x1f\x82\xe3\x87\xc5\x42\xa1\x26\x01\x7c\x0d\xdf\xf6\x83\xaf\x9d\x4c\x30\xea\x01\xb0\x05\x90\x43\xe2\x1d\x68\x96\xe1\xb5\x55\xed\x05\xd1\x9a\xa6\x24\x80\xf1\x18\x3c\xcf\xd9\x05\xb0\x97\xc7\x7e\x5b\x98\xfb\x5e\x69\x3d\xf2\xe4\x3f\xb0\xfd\x2f\x59\x8d\x3c\xf9\x37\x36\x37\x1c\xc8\x93\xc6\x5e\xb3\xee\xa2\xf4\x53\x5a\x28\x2f\x88\xe2\x94\xc5\xb7\x84\x26\xc9\xa9\xa5\x5a\xce\x43\xe2\x99\xdd\x78\x41\x24\x38\xf1\x55\x31\xcf\x98\xf6\x43\x70\x1f\x7f\x2f\x50\xde\x05\x23\x03\xb6\x14\x62\x99\x62\x14\xaf\xa8\xd4\x2a\x4a\x05\x4d\x88\x1f\x17\x52\x22\x37\xec\xd6\x20\x3f\xa7\xf1\x2d\x5d\xa2\xf2\x87\x30\xf5\x63\x21\xd1\x72\xfb\x33\x63\x90\x55\x06\x3d\x80\x0d\xe3\x89\xd8\x44\x82\xaf\xa8\x5a\xc5\x2b\xca\x97\x68\x3c\x5a\x26\x0a\x90\x6a\x77\x5d\x85\x0a\xf5\x07\xfe\x4e\xd0\x64\x42\xd3\x74\x4e\xe3\x5b\x92\x48\xba\x99\xac\x3a\x01\xfa\x1c\x91\x1e\x40\x2e\xf2\x22\xa5\x1a\x4f\x19\xa6\x89\x22\xc1\xa8\x67\xac\xec\xd5\xa6\xd4\x8e\x2a\x6d\x8a\x05\x57\xba\xcc\xfb\x4b\xcc\x72\x23\x0b\xe3\x96\x9b\x2b\xa2\x17\x44\x2b\x9d\xa5\xc4\x9c\x82\x3c\xa5\x31\x92\xe3\xeb\xeb\xf3\x5f\xde\x5f\x5f\x1f\x2f\xc3\xce\xc1\xa9\x42\x50\x02\x98\x20\xd1\x3c\x47\x9e\x90\x2e\xa2\x33\xd8\x19\x70\xe8\x96\xac\xd5\x56\xfd\x6f\xa5\xf4\xf5\xc2\x90\xae\xae\xa6\x87\x1f\xdb\x3a\xee\xaf\xae\x66\xbf\x59\x45\x1d\xf9\x5f\x69\x5a\x60\x57\x7e\x6d\x48\x9f\x2a\xff\x33\x66\x62\xbd\x03\x20\x2d\xed\x51\x04\xb3\xd7\x96\xf1\x91\x8b\xfe\x6e\x91\x68\x1c\x8d\x69\x72\x4e\x33\xa7\x43\xaf\x98\x2a\x4f\xc1\xa8\xc3\x64\xe0\xce\x8b\xac\xc5\x44\xb5\x96\xc4\x63\xe6\x4c\x64\x54\xc7\x2b\x72\x7c\x95\x1c\x1d\x07\xd3\xfe\xcc\x49\xb6\x1d\x50\x32\x73\x9a\xa1\x17\x36\x2a\x4b\x1d\x26\xcd\x2d\x9b\x22\xb5\xa2\x5d\xae\xfb\xce\xc6\x9c\x57\xca\x93\xf6\x60\x63\x95\x85\x71\x2a\x14\x2a\x4d\xfc\x48\x8a\x8d\x6f\xd2\xc4\x48\x91\x36\x5e\xdb\x7f\x47\x47\xa3\xde\x7d\xaf\x95\x99\x39\x95\x0a\x7f\xa2\x92\x66\x8a\x28\x2d\x1d\xbc\x44\x5d\x48\x0e\x4a\xcb\x48\xe5\x29\xd3\xc4\xff\xca\x42\x27\x45\xdc\xf2\x71\x6e\xa5\x42\xb0\xbf\xbb\x0e\x9f\xde\xe2\x5d\x08\x36\x09\x66\x30\x76\x1c\x15\xd4\xd8\x37\xce\xcc\x49\x82\xb1\x48\xf0\x97\x9f\xcf\x26\x22\xcb\x05\xc7\x32\x85\xc1\x71\x2b\x03\x61\x64\x2d\x48\x93\xfd\x57\x47\x26\xf1\x7d\xf0\x4b\xe6\xd2\x54\x27\x63\x37\x1d\xc2\x47\xb3\xf1\xfb\xf6\x26\x77\x8e\x67\xdd\x41\x7e\x37\x55\x09\xc6\x90\x8a\x98\x1a\xce\x68\x25\x71\x51\x1a\xea\x1d\x78\xc1\x74\x30\xab\x8a\xe8\x17\x96\xb7\xda\xa6\x53\xdb\xa9\xe7\x76\xfd\xcd\xef\x85\x05\x52\x30\x76\x84\x96\x03\x0d\xf7\x42\x48\x20\x86\x9b\xd9\x46\x07\x0c\xbe\xdb\x11\x8c\x52\xe4\x4b\xbd\x1a\x01\x3b\x3a\xaa\xb4\xd9\x76\x51\x21\xd6\x9c\x53\x36\x6b\xf9\x74\x54\x73\xde\xc2\x18\xb0\x4e\x51\x43\x59\xc3\x18\x1e\xba\x9b\xe0\x74\x30\x73\x29\xe2\xb6\x78\x6b\x9b\xc2\x5c\x22\xbd\x4d\xc4\x86\xd7\xdd\xc1\xd5\x95\x9a\x0e\x22\x37\xfa\xa7\x36\x32\x63\x0f\x8e\x60\x0d\x47\xe0\xcd\xbc\xf2\xbc\xf8\x0a\x53\x8c\x35\x26\x7e\x08\xcd\x77\x69\xa0\xcd\x10\xcd\x78\x81\xee\xef\x7b\xfb\xdf\x1d\x13\xda\xed\xb3\x63\xc3\x83\xbe\xba\xfe\x6c\x58\xdb\xe1\x1e\x82\x36\x8d\xef\x71\xc8\x5d\x38\x91\x9f\xa6\x62\xa3\x76\xe1\x6a\xf2\x27\xc3\x55\xc5\xe5\x9f\xed\xea\x7b\x1c\x34\xb8\x7b\x45\xdd\xe8\x84\x69\x72\xc6\x13\xdc\xc2\xb8\xdd\x65\x46\x75\x5b\xdf\x29\xe8\x26\x5c\x2d\xa1\x23\xf0\xae\xae\x66\xa5\xa9\xb7\x9f\x2f\xa6\x25\x5b\x2e\x51\x12\xcf\x15\x60\xef\x21\x42\xd5\x09\x9e\x52\xbc\x2e\x1b\x6f\xfb\xcc\xb6\xc6\x86\xf2\xc0\xe2\x1a\xb9\x8e\x72\x69\x7f\xbf\xc6\x05\x2d\x52\x4d\x5c\xfe\x1e\x1f\xc3\xaf\x34\x65\x89\x69\xa3\x7e\x15\x00\x1f\xe6\x62\x5b\xf7\x9a\x8a\x6a\xab\xbb\x5f\x47\xc9\x6f\x75\x82\x2e\xe3\x99\x1d\x46\x6d\x7d\x3c\xe3\x9a\x54\xe4\x10\x06\xfd\x7a\xb2\x62\xea\x9c\x9e\x93\x96\x44\x00\x7f\xfe\xd9\x41\xf8\x0e\x06\xbb\xa4\xff\xb3\xe3\x59\xbf\x8a\x2e\x4d\x51\x6a\xe2\x9d\xf1\x58\x48\x89\xb1\x06\xff\x52\xe4\xe0\x8c\x1b\x42\x9e\x22\x55\x08\xc8\x35\x4a\xa0\xa6\x1a\xb2\x04\x18\xd7\xb8\x44\x09\x73\xd4\x1b\x44\x0e\x03\xa0\x3c\x71\xa8\x91\xd7\x2d\x8c\x0b\x9a\x2a\xac\xeb\x94\x2b\x93\xce\x05\x66\x56\xf3\x83\x48\xa1\x64\x34\x65\x7f\x94\x3d\xa3\xe4\x38\x1a\x83\xff\x55\x65\xf4\xd8\x87\x23\x40\xfe\xa0\x7e\x54\xeb\x56\xb0\x53\x42\x61\x0c\xde\x81\x89\xb8\x83\xeb\x75\xcd\xe9\xc4\xb9\x9e\xa4\x3e\xaf\x2c\x7f\x4a\x55\x3e\x8c\xe8\x0d\xdd\x12\xb7\xa6\xef\x72\x1c\x82\xf7\xe3\x9b\x4b\x2f\xb4\x84\x42\xa6\x43\xf0\x8e\x2d\xc0\xff\x1b\x5b\xed\x97\x5b\x4b\xa8\xa6\x97\x4e\x40\xe3\x56\x97\x12\xaa\x88\x63\x54\x6a\x58\x8f\x98\x44\x1a\xc6\xd0\x5c\x44\x74\xa1\x42\xd8\xae\x64\x73\x66\x8d\x79\x76\xdd\x14\x8b\x82\x27\xb8\x60\x1c\x93\x66\xdd\x9d\x12\x3b\x61\x5e\x27\x6c\x6d\x0e\x13\x6e\x35\xf1\xce\x85\x55\x0f\x0b\x51\x98\x9a\x54\x73\x57\xdb\xab\x09\xf7\xbd\x8a\xcc\x13\x94\xce\x87\x56\xa1\x93\xb9\x77\x46\xa3\x94\x42\xb6\x4c\xee\xd8\xb8\xd7\x82\xed\x4a\x46\x12\x55\x2e\xb8\xc2\x4b\xdc\xea\xa0\xae\xa8\xf7\x41\x27\x74\x0f\x15\x5b\xe0\x5c\xa2\x49\xb1\x9f\x68\x4e\x23\x7b\x7c\xdc\xa2\xa9\x15\x19\x09\x82\xaa\x5f\x3a\xd7\xc0\x74\xf6\x58\x5f\x34\x38\x91\x95\xdc\xd3\x12\x6b\x81\x1b\x27\x70\xd3\x16\x30\x9d\xb1\x92\xb9\x69\x64\x5c\x4c\x6e\x4c\x3c\xfa\xed\x38\x94\x22\xb5\x31\x6d\xe7\x9a\xba\xda\xc6\x9d\xde\xd4\x2c\xb6\x00\xc0\x17\x3b\x60\x4e\xc5\x2e\xb5\x04\xaa\x8a\xc9\x36\x78\x10\xc5\xea\x77\xa3\x07\xc6\xb0\x6d\xba\x99\xcd\xe8\xd2\x67\xe5\xed\x64\xcd\x54\x61\x8e\xae\x3b\x23\x54\x4a\x7a\x77\x29\x5e\x9b\xd4\xa5\xf3\x14\x89\x8d\xc8\xa8\xf4\xb6\xeb\xd9\x26\x2e\xce\x28\xa6\x2e\x34\x8d\x6f\x31\x19\x82\x96\x05\xba\x5c\xd1\x4c\xa7\x38\x04\xdf\x9c\x6a\x78\x3f\xcf\x95\xdf\xa2\x9b\x54\xb8\xd0\x77\x86\xa1\xda\xd7\x42\x70\x7d\xc1\xfe\xc0\x21\x9c\xbc\x08\x4b\xda\x5c\xa4\x1d\x4c\x53\x56\x53\x93\x81\xfe\xc1\xf3\xe7\xcf\xfd\x76\x6a\xae\xbe\xdf\x32\xd5\xa0\x55\xda\xcd\xa5\xd6\x0f\xdb\xc4\x3d\xaa\x77\x60\xc3\xc6\xff\x9a\xa6\x2c\x1e\xba\x4a\xd3\x90\x1f\x9a\xd5\x36\x7f\xf0\xa2\x8a\x42\xb5\xba\x94\x2c\x49\x19\x47\xb5\x57\xe5\xe2\xb9\xf9\x69\x69\x8d\xcd\x70\x3d\x84\x41\x7f\x17\x27\x63\x5c\xc8\x1f\x9f\x04\xc3\x57\xe6\xc7\xdf\x95\x74\x2f\x03\x43\xf0\xdf\xbe\x1d\x66\xd9\x50\xa9\xc6\x27\x9f\xe1\x8e\xd6\x1e\x4f\x3a\x99\x56\xea\x59\x77\x63\x90\x31\x6e\x6f\x29\x43\xe8\x87\x3b\x61\x79\x8f\x4b\x3a\x67\x5a\x41\x8e\x12\x14\xc6\x82\x27\xff\x8b\xd2\x7f\x35\x16\x2b\x64\xcb\x95\x1e\x82\x8a\x25\x22\x8f\xdc\x9f\xf0\x35\xf4\xa3\x97\x8e\xc1\x96\xea\xef\x25\xd2\x46\xd9\x86\x25\x7a\x35\x04\xff\x55\xff\x4b\x3f\x84\x92\x58\x01\xf9\x2f\x0d\xb5\xb2\x54\xe4\x43\xf0\xbf\x69\x08\x73\x1a\xdf\x2e\xa5\xe9\x32\x13\x67\x6f\xb3\x01\xa5\xa5\xb8\x35\x41\x3f\x88\xe3\xb8\xb5\x03\x47\xff\x87\xd3\x39\xd8\xb7\x87\x07\xa0\xfe\xc1\xc2\xfe\x2b\x51\xac\x6b\xd4\x10\xa6\xfe\xc1\xc9\xe0\xd5\xb7\xa7\xcf\xcd\x25\xe1\xe0\xc5\xe4\xfb\xd3\x6f\xfa\xf6\xf3\xf4\x74\x32\xe8\xbf\x2c\x3f\xbf\x79\x79\x72\x62\x3f\x5f\x4d\x4e\x5e\xfe\xd0\xf7\x67\x0e\x84\x72\x96\xd9\xa2\xd7\xd8\x6c\x2f\x05\x45\xde\x4d\x9e\xa4\x90\x25\x9b\x99\x8d\x2a\x2a\x52\xc5\xf8\x72\x08\xbe\x28\x74\xa7\x1e\xa5\xb8\x44\x9e\x34\x98\xb9\x50\xcc\x89\xfb\x5c\x70\xec\xf0\x6a\x21\x52\xcd\xf2\x56\xf5\xfa\x8b\x89\x50\xad\xaa\x95\xd8\x58\xd7\x4d\x44\x82\x6e\x3b\x1d\x1b\x19\xaf\xfc\x7f\xe2\x28\xb9\x60\x75\x15\x2e\xe7\x14\x94\xac\x9d\xc5\xfd\x21\x7c\xb4\x82\xaf\xa9\x5a\x95\x36\x4e\x5f\x84\xf0\x62\xd6\xa8\x1d\xec\xe3\x39\x09\xe1\xa4\xc5\x73\xf2\x08\x4e\x9b\xe7\xf9\x23\x38\x6d\x5d\x2f\xf6\xf1\x0c\x42\x18\xcc\xaa\x5c\x32\xfd\x6e\x54\x0d\x0a\x36\xeb\x61\x6c\x9f\x3e\xf7\x76\x3e\x73\x22\xdc\x14\x52\x3d\x1a\x47\x4b\xd4\x6f\x52\x34\x9f\x3f\xdc\x9d\x25\xc4\xaf\x87\x1c\xdf\x3d\x8b\xda\xbf\x23\x33\x7b\x12\x37\xc2\x95\xfd\xb1\xfd\x3a\x16\x17\x4a\x8b\xec\x9d\x4d\x8a\xd7\xcc\xde\xa1\x1f\x85\xb7\xac\xd7\x2e\x81\xdc\x55\x77\x47\x3a\x62\x9c\xa3\x7c\x7b\xf9\xfe\x1d\x8c\xc1\xf7\x47\xe6\xca\x32\x49\x91\x4a\xa0\xfc\x0e\x70\xcb\x94\x66\x7c\x59\xa6\x60\x63\x82\x3d\x2d\x30\xae\xcc\x8b\x1c\x61\xd4\x66\x28\x32\xdb\xd6\xed\xa0\xb4\x44\x7d\x5e\x64\x73\x94\x1f\x16\x13\xb7\x42\xda\x3b\xd2\x66\x2e\x68\xef\x23\x96\x48\x35\x96\x5b\x21\xbe\x5d\x77\xe6\xdb\xcf\x28\x4e\xa9\x52\xef\x98\xd2\x11\x4d\x92\x6a\x3d\x04\xf7\xf1\x4c\x65\xcd\xf7\x5c\xc8\x04\x65\x75\xcf\x2f\xd5\xcd\x45\x72\xf7\x94\x3a\xb3\xee\x97\x8f\x54\x66\x9e\x4b\x51\xdb\x01\x70\xe0\x06\xc0\x72\x73\x9d\xb9\xcf\x21\x4b\xb1\x79\x0a\x57\xfa\x9d\x97\x3d\xeb\xb4\x09\xa6\xe9\x53\x32\x49\x23\x53\x72\x47\xca\xa4\x66\xb4\x53\xd1\x60\x5c\x46\x65\x4a\x18\x3c\x83\x41\x00\x5f\x96\x84\x72\xe4\x9c\xed\x87\xb1\x85\xda\xc4\xfe\xa4\x9f\x6f\xfd\xb6\x79\x29\x9d\x63\xfa\xc9\xe6\xd5\xdc\x76\x58\x9f\x08\xae\xd1\x5e\x54\xab\xf8\xbb\xb8\xbf\x33\x5c\x84\x55\x77\x41\xb1\x29\x1f\x83\x27\x2b\x96\x26\xa4\xb6\xed\x91\xf5\x5a\x47\xb9\x6e\x03\xd5\xe1\x90\x62\x53\xbd\x1c\x35\x0f\x82\xae\xee\xd8\xfb\x7d\x33\xfb\x5a\xec\x24\x79\x63\x2e\xed\x26\x93\x90\xa3\x24\x7e\x26\x0a\x85\x62\x8d\xd2\x0f\xe1\xc1\xdb\xa6\x6d\x61\x6c\xb9\x4a\x4d\x17\xbb\xb0\xa0\xc4\x1e\xd8\x10\x3a\x87\x35\x84\xb6\xc6\x7a\x72\xaf\xbf\x9e\x52\x5d\xe8\xc7\x34\x4b\x54\xa8\xdf\x56\xea\xf7\x2a\x7e\xa0\xeb\x3e\x28\x93\xa1\xbe\x7b\xba\xf3\xd3\x76\x99\x75\xe2\xde\xd2\xd0\xe1\x32\x72\x3b\xcf\x97\xbb\xff\x8f\x28\xa1\x1a\x3b\x0f\xb5\x86\x10\x69\x71\x76\xf1\xe1\x42\x4b\xc6\x97\x24\x88\x54\x31\x57\x5a\x92\x7e\x08\x83\x6f\xbb\xb7\xb6\x27\x5e\xa2\xbb\xf7\x68\x38\x34\xf9\xf4\xb7\x8b\x0f\xe7\xc4\x3b\x4e\x58\xac\xdd\x5b\x8e\x3a\xf6\x8e\x2c\x77\xcb\x7f\xcd\xe5\xcf\xfd\x7b\xf4\xfd\xa7\x7a\x62\xaf\x9f\x7f\x68\xa1\x45\x2c\xb2\x3c\x45\x8d\xa4\x7d\x5f\x02\x50\xa2\x90\x31\x0e\x9d\xeb\x9b\xfb\x52\xed\xf2\x51\xef\xfe\x5f\x01\x00\x00\xff\xff\xba\xa9\xa0\x28\x3e\x1c\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 7230, mode: os.FileMode(436), modTime: time.Unix(1740341436, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\xb1\x2f\x1b\x56\x8a\x76\xd2\x00\x5b\x26\xf9\x61\xdd\xba\x97\xae\xe8\xb6\xf4\x69\x18\x0c\x4a\x3c\x5b\x4c\xf8\x47\x23\x29\x3b\x5e\x90\xef\x3e\x50\x92\x6d\x49\xb1\x53\x07\x30\x86\xb5\x40\x24\x1d\x8f\xbf\xfb\xf1\xfe\x90\x67\xa6\x5f\x09\x5b\x84\x4d\x85\x50\x06\xad\x66\xaf\xd2\xf8\x00\xc5\xcd\x32\x23\x68\xc8\xec\x15\x40\x5a\x22\x17\xf1\x05\x20\xd5\x18\x38\x14\x25\x77\x1e\x43\x46\xea\xb0\xa0\xdf\x91\xfe\x90\xe1\x1a\x33\xb2\x92\xb8\xae\xac\x0b\x04\x0a\x6b\x02\x9a\x90\x91\xb5\x14\xa1\xcc\x04\xae\x64\x81\xb4\xf9\x78\x03\xd2\xc8\x20\xb9\xa2\xbe\xe0\x0a\xb3\xe9\x1b\xf0\xa5\x93\xe6\x8e\x06\x4b\x17\x32\x64\xc6\x6e\xa1\x95\x34\x77\xe0\x50\x65\xc4\x87\x8d\x42\x5f\x22\x06\x02\xa5\xc3\x45\x46\xca\x10\x2a\x7f\xcd\x98\x0f\xbc\xb8\xab\x78\x28\x93\xdc\xda\xe0\x83\xe3\x55\x21\x4c\x52\x58\xcd\x76\x02\xf6\x36\xb9\x4a\x2e\x58\xe1\xfd\x5e\x96\x68\x69\x92\xc2\x7b\x02\x2f\x30\x56\x58\x81\xc9\xed\xdf\x35\xba\x4d\x63\xa1\x96\x6c\x9a\x4c\x2f\x92\x29\x0b\x25\x6a\xf4\x2c\xe7\x1e\x59\xab\x40\x6b\xd9\xe0\x77\xf0\x41\x06\x85\xb3\xf7\xca\xae\x4b\x5b\x7b\x4c\x59\x2b\x68\x07\x1b\x8b\xed\x3b\xc0\xeb\xa2\xf6\xc1\xea\xb9\xc2\x25\x1a\x01\x0f\x9d\x18\x40\xf3\x7b\x5a\xa2\x5c\x96\xe1\x1a\xde\x4e\x26\xd5\xfd\x0f\xbb\x21\xbb\x42\xb7\x50\x76\x4d\x37\xd7\xc0\xeb\x60\xb7\x23\x8f\xdd\x33\x09\x3c\x57\x48\xbd\x86\xd0\x47\xac\xb8\x10\xd2\x2c\xaf\x61\x92\x5c\x5c\x39\xd4\xc3\x69\x29\x6b\x79\x01\x40\x4c\x07\xb6\xcd\x87\x34\xb7\x62\xd3\x31\x37\x7c\x05\x85\xe2\xde\x67\xc4\xf0\x55\xce\x1d\xb4\x0f\x2a\xb8\xbb\x03\x1f\x64\x71\xb7\xa1\xc1\x56\x90\x2f\x5b\xd1\x42\xe1\x3d\xd5\x82\x1a\xbb\x76\xbc\x82\x8a\x4e\xc8\x76\xe1\x29\x1f\x42\xd1\xdc\x71\x23\xa0\xb0\x8a\x7a\x4d\x2f\x9b\x17\x2d\xe8\x05\x68\x47\x27\xdb\xd0\xbc\x26\x7d\xa7\xf2\x8e\x16\x33\x7c\xd5\xbd\x0a\xb9\x63\x18\xb3\x92\x4b\x83\x8e\x2e\x54\x2d\xc5\xde\x70\x4f\xc7\xd9\xf5\x4e\x3e\x9e\xdd\x99\x8f\xe4\x0d\x82\x88\x5f\xb9\xb2\xc5\x5d\x5c\x9c\x8a\x71\x01\x2f\x05\x46\x27\x54\x74\xda\x43\x19\xe2\x74\x3a\xb4\x75\xce\x40\x0d\x20\x5d\x58\xa7\xc7\x22\x89\x4a\x78\x0c\x43\x71\x6f\x60\x8b\x1c\xe7\xd2\xa5\xb3\x75\x45\xc6\xba\x31\xc1\x9b\x7c\x9a\xdd\x48\x8d\xf0\xf5\xe7\x9b\x77\xdf\xa4\xac\x13\x3d\xd5\x3d\xea\x90\xc3\x3a\x85\x55\x07\x75\xa2\x55\x9e\xa3\x82\x85\x75\x19\x09\x52\xe3\xdc\x07\xee\x02\x99\xfd\x11\x1f\x29\x6b\x46\x8f\xcc\x94\xa6\xaa\x03\xc4\x3d\x2a\x23\x82\x07\x8c\xd3\xa9\xb2\x05\x57\xa4\xdb\x6f\x7a\x80\x03\x17\xc4\x38\x3b\xab\x40\xd3\x69\x13\x09\x90\x62\x68\xfd\xd0\x72\x98\x90\xab\x33\xae\x13\x8d\x20\xb3\x9f\x8d\x38\xcb\x1a\x23\xd8\x89\x2b\x6c\xec\x9e\xbe\xbe\x83\xe2\x94\x9d\x37\xe5\x5e\xc3\x8d\xad\x20\x96\xa9\xff\x4f\x72\xae\xef\x55\x53\xeb\x1c\x5d\xe7\x20\x5b\x35\x24\x76\xbe\xdd\x7d\x3f\xeb\x5b\x2d\x4d\x46\xe2\x93\xdf\x67\x64\x3a\x99\x4c\x26\x04\x56\x5c\xd5\x98\x91\xab\xc9\xe4\x18\x09\xaf\xb9\x52\x03\xe0\x80\xf7\x01\xe2\x1f\xaa\xeb\x80\x87\xc3\x14\xff\xbd\x2b\xad\xf5\xd2\x2c\x21\x58\x0b\x9a\x9b\x0d\xe8\x66\x73\xe1\x8b\x05\x16\x01\x72\x67\xd7\x1e\x1d\x54\xe8\x22\x2c\x37\x05\x26\x87\x29\xb0\x86\xc3\x19\xb3\x61\x20\x3f\x4b\x6a\xbc\x97\x2a\xa0\xfb\x42\x56\xc4\xd8\x2d\x1a\x45\x7f\x08\xea\xc8\x5a\xce\x97\x4f\x79\x1d\x82\x35\x5d\x42\xb5\x1f\xa4\x47\xea\x93\xaa\xf7\x29\x94\x07\x03\x79\x30\xb4\x72\x52\x73\xb7\x69\xde\xbd\x8e\xc9\x44\x66\xdf\xa6\xac\x9d\xfd\x7f\x2b\xd0\x1f\x1d\xf2\x3b\x61\xd7\xe6\x84\x40\xe4\x5b\xdd\x43\xb1\x38\xcd\xed\xa7\x3a\x3e\x56\x11\xaa\x98\xf3\x6d\xbd\xee\x4c\x93\x21\x93\xe3\xf5\x0b\x6d\x2f\x45\x5b\x18\x02\xba\x56\x41\x56\x0a\xc1\xcb\x7f\x30\x23\x0f\x0f\x90\x34\x6b\xff\xc9\xae\xcd\x07\x34\xf0\xf8\xb8\xa3\xf2\xf0\x40\xc1\x71\xb3\x44\x48\xde\x47\x9f\xfe\x12\x7d\xe8\xe1\xf1\xf1\x08\x55\x80\xd4\x56\xa1\xf1\x34\x34\x5b\x7e\x0b\xff\xa1\x39\x17\x9e\xc1\x7d\x16\xb2\x05\x95\xd6\x6c\x37\x9c\x08\xf9\x91\x6b\x6c\x10\xfb\xf8\x29\x6b\x15\xfb\x66\x62\xfb\xf8\x1c\x5f\xb6\x25\x7c\xf2\xa4\x94\xb5\x9e\x3c\x12\xd5\xa3\x67\xe8\x79\x72\xbb\xbf\xaf\xfb\x3a\xd7\x32\xec\x36\xe2\xdf\x6b\x03\xbf\xc5\xb6\xbb\x4d\x8d\x6e\x74\xd4\x48\x1d\x44\x4e\xd9\xb0\xe5\x1a\x90\x1a\x7e\x68\x2e\xcd\xa8\x1b\xfc\x1e\x74\xd3\x9d\xc6\xa6\xbb\x69\x50\xd5\x92\x4e\x27\x50\x05\x7a\x09\xd5\x3d\x7d\x3b\xee\x25\x23\xb9\xf8\x3b\x2a\xcc\x85\x5c\x91\xd9\xc8\x03\x7b\x95\xfe\x4f\x80\x91\x5a\xca\x22\x8f\x11\xc3\x43\x7c\x77\x88\x4d\x1b\x1f\x7f\x9e\x79\x99\x4b\x25\xc3\xe6\xba\x94\x42\xe0\x60\x13\xbb\x41\x5d\x29\x1e\x70\xec\xb3\x51\x39\xf7\x66\xcc\x9d\x5d\xff\x39\x9f\x7f\xfc\xfc\xeb\x7c\xfe\xd7\x93\x0a\x1e\x77\xce\xd1\x41\x87\x76\xa0\xae\xc0\x7b\xb0\x4d\x90\xf6\xc0\x5d\xed\x1f\x19\x3c\x52\xf8\x64\xf6\xea\x25\xf5\xfb\xa5\xca\x3d\xb9\x66\x5f\x5e\xad\xcf\x96\x5c\xbf\x42\x9f\x51\x3c\x56\x95\x87\xeb\xeb\xc4\xc0\xf4\x8b\x2d\x36\x2d\xc7\x7d\x3d\x8c\x50\xb3\xf4\x5e\x84\x7a\x91\x1d\x0d\x9d\x95\xee\xc1\x33\xba\x0b\x43\x67\x71\x98\xbc\xa8\xed\x0a\x9f\x66\xd2\xf6\xfc\xf6\x58\x58\x23\xc6\x27\x38\x3d\x76\x82\x1f\xe0\xfe\xb4\x16\xc7\x82\x6d\xd1\xfa\xc2\xc9\x2a\x80\x77\xc5\xf1\xab\x86\xee\x52\xe1\x32\x99\x26\xd3\xe6\xee\xe2\xd6\x13\x98\xa5\xac\x9d\x3b\x7b\x09\xd4\xfe\xd6\x62\x7f\x53\x71\xeb\xc9\x69\x60\x2f\xb8\x6f\xb9\x1d\x5f\xb7\x9c\x6c\x64\xbd\x5e\x27\x4b\x1f\x78\x90\x45\x83\xdc\xec\x98\x9e\x29\xcb\x05\xba\xd3\x61\x0a\x61\x6e\x7d\x52\x28\x5b\x8b\x85\xe2\x0e\x1b\x2c\x7e\xcb\xef\x99\x92\xb9\x67\x9f\x78\xc5\x3f\x71\xe7\x91\x5d\x25\x97\xc9\x84\x55\x3c\xfe\x77\x1e\x4f\x23\xcb\x16\xdb\x7b\x87\xa7\xba\x29\x6b\xef\x48\x52\xd6\x5c\xaf\xfd\x1b\x00\x00\xff\xff\x41\x6b\x92\x22\x6e\x13\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4974, mode: os.FileMode(436), modTime: time.Unix(1740344273, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated for package frontend by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x3a\xfd\x77\x13\x37\xb6\xbf\xfb\xaf\xb8\x9d\x50\x66\xa6\x31\x63\x3b\x50\x78\x38\x31\xef\xd0\x40\xda\xbc\x42\xe8\x2b\x69\xdf\x39\xcf\xf1\x06\x79\xe6\xda\x56\x22\x4b\x53\x49\xe3\x24\x85\xfc\xef\x7b\x24\xcd\x87\xc6\xb1\x03\x6c\x77\xf7\xa7\x2d\xe7\x80\x2c\xdd\xef\xab\xfb\xa5\xe9\x8a\x48\x98\x51\xa6\x51\xaa\x43\x51\x70\x0d\x23\xe8\xef\x77\x3a\x0f\xa2\x4c\xa4\xc5\x12\xb9\x8e\x13\x89\x24\xbb\x89\x66\x05\x4f\x35\x15\x3c\x8a\xe1\x63\x07\xc0\xe0\x29\x4d\xa4\x41\x98\x09\xb9\x24\xfa\x94\x2e\x51\x69\xb2\xcc\x23\x8e\x57\xf0\x8a\x68\x8c\xa2\x66\x19\x43\x0f\x06\xfd\x7e\x3f\x86\x47\xf0\xbc\xdf\x87\x47\xd0\x1c\x25\x73\xb4\xd8\x7f\x0a\x8e\xef\x66\x33\x85\x3a\x8a\xe1\x3b\x78\xda\x8f\xbf\x73\x38\xf1\x7e\x07\x80\xce\x20\x7a\x10\x05\x3b\x9a\x2e\xf1\xdc\xb2\x0e\xe2\x64\x45\x58\x14\xc3\x68\x04\x41\xe0\xe4\x02\xd8\x08\x63\xd7\x96\xcc\x6d\xa7\x94\x1e\x79\xf6\x0f\xc8\xfe\x97\xa4\x46\x9e\x7d\x46\xe6\x06\x02\x79\xd6\xc8\x6b\xce\x9d\x97\x7e\x61\x85\x0a\xe2\x24\x65\x34\xbd\x8c\x48\x96\x1d\xd9\x5d\x0b\xf9\x20\x0a\x8c\x36\x41\x9c\x08\x1e\x85\xaa\x98\x2e\xa9\x0e\xbb\xe0\x16\xff\x5b\xa0\xbc\x89\xf7\x0d\xb1\xb9\x10\x73\x86\x49\xba\x20\x52\xab\x84\x09\x92\x45\x61\x5a\x48\x89\xdc\x80\x5b\x81\xc2\x9c\xa4\x97\x64\x8e\x2a\x1c\xc2\x38\x4c\x85\x44\x0b\x1d\x4e\x8c\x40\x96\x19\x74\x00\xae\x28\xcf\xc4\x55\x22\xf8\x82\xa8\x45\xba\x20\x7c\x8e\xc6\xa2\xe5\x45\x81\xa8\xd2\xae\xcd\x50\xa1\x7e\xc7\xdf\x08\x92\x1d\x12\xc6\xa6\x24\xbd\x8c\x32\x49\xae\x0e\x17\x2d\x07\x7d\x0d\x4a\x07\x20\x17\x79\xc1\x88\xc6\x23\x8a\x2c\x53\x51\xbc\xdf\x31\x52\x76\x6a\x51\x6a\x43\x95\x32\xa5\x82\x2b\x5d\xde\xfb\x53\x5c\xe6\x06\x17\x46\x9e\x99\xab\xcd\x20\x4e\x16\x7a\xc9\x22\x13\x05\x39\x23\x29\x46\xbd\xf3\xf3\x93\xdf\xde\x9e\x9f\xf7\xe6\xdd\x56\xe0\x54\x2e\x28\x09\x18\x27\x91\x3c\x47\x9e\x45\x6d\x8a\x4e\x60\x27\xc0\x03\x77\x64\xa5\xb6\xec\x3f\x94\xd8\xe7\x33\xb3\x75\x76\x36\x7e\xf0\xd1\xe7\x71\x7b\x76\x36\xf9\x60\x19\xb5\xf0\x7f\x27\xac\xc0\x36\xfe\xca\x6c\x7d\x29\xfe\xaf\xb8\x14\xab\x35\x02\xd2\xee\x6d\xa5\x60\x74\xf5\x84\x4f\x9c\xf7\xd7\x93\x44\x63\x68\x64\xd9\x09\x59\x3a\x1e\x7a\x41\x55\x19\x05\xfb\x2d\x20\x43\xee\xa4\x58\x7a\x40\x44\x6b\x19\x05\xd4\xc4\xc4\x92\xe8\x74\x11\xf5\xce\xb2\xdd\x5e\x3c\xee\x4f\x1c\xa6\x6f\x80\x12\x98\x93\x25\x06\xdd\x86\x65\xc9\xc3\x5c\x73\x0b\xa6\xa2\x9a\xd1\x3a\xd4\x6d\x4b\x31\x67\x95\x32\xd2\xee\x28\x56\x49\x98\x32\xa1\x50\xe9\x28\x4c\xa4\xb8\x0a\xcd\x35\x31\x58\x91\x4f\xcf\xb7\xdf\xee\xee\x7e\xe7\xb6\xe3\xdd\xcc\x9c\x48\x85\xbf\x10\x49\x96\x2a\x52\x5a\x3a\xf2\x12\x75\x21\x39\x28\x2d\x13\x95\x33\xaa\xa3\xf0\xa1\x25\x9d\x15\xa9\x67\xe3\xdc\x62\x75\xc1\xfe\xdb\x36\xf8\xf8\x12\x6f\xba\x60\x2f\xc1\x04\x46\x0e\xa2\x22\x35\x0a\x8d\x31\xf3\x28\xc3\x54\x64\xf8\xdb\xaf\xc7\x87\x62\x99\x0b\x8e\xe5\x15\x06\x07\xad\x0c\x09\x83\x6b\x89\x34\xb7\xff\x6c\xd7\x5c\xfc\x10\xc2\x12\xb8\x14\xd5\xe1\x58\xa5\xbb\xf0\xd1\x28\x7e\xeb\x2b\xb9\x16\x9e\x75\x05\xf9\xc3\x64\x25\x18\x01\x13\x29\x31\x90\xc9\x42\xe2\xac\x14\x34\xd8\x09\xe2\xf1\x60\x52\x25\xd1\x6f\x2c\x6c\xa5\xa6\x63\xdb\xca\xe7\xf6\xfc\xf5\x1f\x85\x25\xa4\x60\xe4\x36\x3c\x03\x1a\xe8\x99\x90\x10\x19\x68\x6a\x0b\x1d\x50\x38\x58\x43\x4c\x18\xf2\xb9\x5e\xec\x03\xdd\xdd\xad\xb8\xd9\x72\x51\x51\xac\x21\xc7\x74\xe2\xd9\x74\xbf\x86\xbc\x84\x11\x60\x7d\x45\xcd\xce\x0a\x46\x70\xd7\xdc\x11\x8e\x07\x13\x77\x45\x9c\x8a\x97\xb6\x28\x4c\x25\x92\xcb\x4c\x5c\xf1\xba\x3a\xb8\xbc\x52\xef\x83\xc8\x0d\xff\xb1\xf5\xcc\x28\x80\x5d\x58\xc1\x2e\x04\x93\xa0\x8c\x97\x50\x21\xc3\x54\x63\x16\x76\xa1\x59\x97\x02\xda\x1b\xa2\x29\x2f\xd0\xfd\xbe\xb5\x7f\xaf\x89\xe0\x97\xcf\x96\x0c\x77\xea\xea\xea\xab\xc9\xda\x0a\x77\x97\x68\x53\xf8\xb6\x93\x5c\x27\x27\xf2\x23\x26\xae\xd4\x3a\xb9\x7a\xfb\x8b\xc9\x55\xc9\xe5\x6f\x7e\xf6\xed\xc5\x0d\xdd\x8d\xa8\xae\x75\x42\x96\x1d\xf3\x0c\xaf\x61\xe4\x57\x99\xfd\xba\xac\xaf\x25\x74\xe3\x2e\x0f\x69\x17\x82\xb3\xb3\x49\x29\xea\xe5\xd7\xa3\x69\x49\xe7\x73\x94\x51\xe0\x12\x70\x70\x97\x42\x55\x09\xee\x63\xbc\x2a\x0b\xaf\x1f\xb3\x5e\xdb\x50\x06\x2c\xae\x90\xeb\x24\x97\xf6\xdf\x57\x38\x23\x05\xd3\x91\xbb\xbf\xbd\x1e\xfc\x4e\x18\xcd\x4c\x19\x0d\x2b\x07\x84\x30\x15\xd7\x75\xad\xa9\x76\x6d\x76\x0f\x6b\x2f\x85\x5e\x25\x68\x03\x1e\xdb\x66\xd4\xe6\xc7\x63\xae\xa3\x6a\xbb\x0b\x83\x7e\xdd\x59\x51\x75\x42\x4e\x22\x0f\x23\x86\x4f\x9f\x5a\x14\x0e\x60\xb0\xbe\xf5\xc2\xb6\x67\xfd\xca\xbb\x84\xa1\xd4\x51\x70\xcc\x53\x21\x25\xa6\x1a\xc2\x53\x91\x83\x13\x6e\x08\x39\x43\xa2\x10\x90\x6b\x94\x40\x4c\x36\xa4\x19\x50\xae\x71\x8e\x12\xa6\xa8\xaf\x10\x39\x0c\x80\xf0\xcc\x51\x4d\x82\x76\x62\x9c\x11\xa6\xb0\xce\x53\x2e\x4d\x3a\x13\x98\x5e\x2d\x8c\x13\x85\x92\x12\x46\xff\x2c\x6b\x46\x09\xb1\x3b\x82\xf0\x61\x25\xf4\x28\x84\x5d\x40\x7e\x27\x7f\x54\xe7\x16\xb1\x95\x42\x61\x04\xc1\x8e\xf1\xb8\x23\xd7\x69\x8b\xd3\xf2\x73\xdd\x49\x7d\x5d\x5a\xfe\x92\xac\xfc\x20\x21\x17\xe4\x3a\x72\x67\xfa\x26\xc7\x21\x04\x3f\xbe\x3e\x0d\xba\x76\xa3\x90\x6c\x08\x41\xcf\x12\xf8\x6f\x23\xab\x5d\xb9\xb3\x8c\x68\x72\xea\x10\x34\x5e\xeb\x12\x43\x15\x69\x8a\x4a\x0d\xeb\x16\x33\x92\x06\xb0\x6b\x06\x11\x5d\xa8\x2e\x5c\x2f\x64\x13\xb3\x46\x3c\x7b\x6e\x92\x45\xc1\x33\x9c\x51\x8e\x59\x73\xee\xa2\xc4\x76\x98\xe7\x19\x5d\x99\x60\xc2\x6b\x1d\x05\x27\xc2\xb2\x87\x99\x28\x4c\x4e\xaa\xa1\x2b\xf5\xea\x8d\xdb\x4e\xb5\xcd\x33\x94\xce\x86\x96\xa1\xc3\xb9\x75\x42\xa3\x94\x42\x7a\x22\xb7\x64\xdc\x28\xc1\xf5\x42\x26\x12\x55\x2e\xb8\xc2\x53\xbc\xd6\x71\x9d\x51\x6f\xe3\x96\xeb\xee\x32\xb6\x84\x73\x89\xe6\x8a\xfd\x42\x72\x92\xd8\xf0\x71\x87\x26\x57\x2c\xa3\xd8\x05\x6c\x33\xf6\xa1\xe9\x3c\xc7\x06\x27\x31\x50\xe3\xfe\x64\x52\x17\x4a\x17\x90\x52\x5c\x81\x98\x41\x0d\xd2\x6e\x35\x16\x44\x9d\x08\xfe\xff\x28\x05\x8c\x0c\x68\xa2\x18\x4d\x31\x1a\xc4\x89\x12\x4b\x8c\x56\x84\xc1\xe8\x85\x9f\x48\x95\x06\x6e\x9b\x3c\x2b\xdb\x11\x13\x44\x47\x16\xec\xd3\x27\x08\xc3\xb8\x11\xd3\x37\x3a\x7c\xe3\x42\x9d\x17\xcb\x18\x1e\x3e\xb4\x14\xbe\x19\xd9\x59\xd5\x1a\xa7\x04\x37\x3e\x6f\x04\x6a\xec\x5c\xa9\x9a\xe4\x85\x5a\x44\x52\x5c\xc5\x4d\x99\xaa\x1b\x08\x77\x57\x60\x3c\xd9\xd6\x28\xd4\x54\x36\xb4\x08\xd6\x76\x74\x52\xe3\x7b\x14\x2e\x1c\x85\x0b\x8f\x82\x69\x1d\x2a\x22\x17\x0d\x11\x27\x87\x29\x25\x1e\xe0\xf8\x62\xb2\xef\x5d\x69\xea\xf4\x36\x46\xb8\x70\x4b\xff\x4a\x5f\xaf\xd9\xf5\x7a\x8b\x55\xfd\xf4\x79\x1d\xc7\x16\xaf\x5f\x1d\x56\x17\xbb\xd4\x69\x7c\x61\xd4\xba\x5e\xb3\x98\x8d\xfe\x72\x02\x34\x39\x0c\xd5\xef\x54\xd1\x29\x65\x54\xdf\x18\xa6\x5b\x8e\x4a\xb5\xad\xe4\xe5\x7d\xab\xb6\x1e\xc1\xa0\x52\x65\x1b\xdd\x11\xbc\x94\x92\xdc\x44\x1b\x30\x93\x19\x65\x2c\xd2\xb2\xc0\xf6\x98\x5f\x59\xf2\xd5\xe7\xbc\x6b\x63\x64\x4b\xf3\x67\x42\x60\x04\xe3\xca\x20\x26\x46\x4c\xcd\x23\xec\x8a\xdc\x28\xb8\x44\xcc\x41\x57\x4f\x08\x77\x9d\x3f\x70\xce\x2f\xb1\x37\x3b\xde\x98\x73\x8b\xd6\xe3\x0b\xa3\xe0\xc4\x77\xb3\x89\x33\x7b\x95\x1b\x17\xc5\x6d\xef\xb9\xbf\x7d\xe5\xdb\x77\xbf\xf6\xa1\x0f\xe2\x99\xf4\x00\xf6\xfc\xc7\x89\x8d\x69\xd2\x09\x0a\x55\x8b\x59\x97\xbe\xea\xe9\x28\x99\xa3\x7e\xcd\xd0\x2c\x7f\xb8\x39\xb6\xaf\x0c\x4a\x8b\xe5\x39\xc3\x39\xf2\x2c\x8c\x13\xca\x39\xca\x9f\x4e\xdf\xbe\x81\x11\x84\xe1\xfe\xb6\xce\xde\x32\x2f\xfd\x57\x3e\x0c\xac\xa8\x2a\x4c\xd5\x74\xe5\x89\x98\x4b\x71\x2a\x0c\xc8\x29\x99\x32\x6c\x29\xd5\x24\x3c\xd7\x37\x9b\xdc\xe8\x14\xa3\xea\xbd\x26\xe9\x25\x66\x43\x57\x17\x5d\xc2\xd6\x54\x33\x1c\x42\x68\x4a\x2b\xbc\x9d\xe6\x2a\xf4\xf6\x4d\x3e\x7e\xaf\x6f\x0c\x40\x9d\x5b\x04\xd7\xef\xe9\x9f\x38\x84\xbd\x27\xdd\x72\x6f\x2a\x58\x36\x04\x73\x19\xbb\x75\xe2\x63\xa6\x0c\x84\x3b\x8f\x1f\x3f\x0e\xfd\xfa\xb0\x78\x79\x4d\x55\x43\xad\xe2\x7e\x4a\x97\x18\x56\xc8\x8a\x11\xae\x31\x33\xcc\xdb\x54\xbd\x83\x97\x7c\x6e\x10\x9f\xf6\xeb\xb3\x85\xb8\x32\x07\xaf\x57\x28\x6f\x86\x30\xa8\x0f\xb6\x29\xb2\x26\x64\xb7\x49\x15\x9a\x30\x9a\xb6\x8c\xb4\x59\x49\xdf\x18\x83\xff\xaa\xee\x63\x75\x3a\x97\x34\x63\x94\xa3\xda\xc8\x72\xf6\xd8\xfc\xf1\xb8\xa6\x66\x5e\x36\x72\xaf\xd3\x59\x52\x2e\xe4\x8f\xf7\x12\xc3\xe7\xe6\x4f\xb8\x8e\xa9\xbf\x42\x69\x4f\x93\xbd\x76\x64\x39\x98\x55\xdb\x6f\x4b\xca\xed\xf3\xc2\x10\xda\x76\x1e\x42\xf8\x16\xe7\x64\x4a\xb5\x82\x1c\x25\x28\x4c\x05\xcf\xc2\xff\xf8\xe2\x9f\xe9\x8b\x05\xd2\xf9\x42\x0f\x41\xa5\x12\x91\x27\xee\x27\x7c\x07\xfd\xe4\x99\x03\xb0\x19\xe4\xa5\x44\xd2\x30\xbb\xa2\x99\x5e\x0c\x21\x7c\xde\xff\x36\xec\x42\xb9\x59\x11\x0a\x9f\x99\xdd\x4a\x52\x91\x0f\x21\xfc\xbe\xd9\x98\x92\xf4\x72\x2e\x4d\x7b\x78\xe8\xe4\x6d\x14\x50\x5a\x8a\x4b\xe3\xf4\x9d\x34\x4d\x3d\x0d\xdc\xfe\xff\x39\x9e\x83\x4d\x3a\xdc\x21\x1a\xee\xcc\xec\x7f\x25\x15\x6b\x1a\x35\x84\x71\xb8\xb3\x37\x78\xfe\xf4\xe8\xb1\x99\xee\x77\x9e\x1c\xbe\x3c\xfa\xbe\x6f\x97\x47\x47\x87\x83\xfe\xb3\x72\xf9\xfd\xb3\xbd\x3d\xbb\x7c\x7e\xb8\xf7\xec\x87\x7e\x38\x71\x44\x08\xa7\x4b\x9b\x32\x1b\x99\xed\x34\x5f\xe4\xed\xcb\x93\x15\xb2\x04\x33\x43\x4d\xb5\x8b\x44\x51\x3e\x1f\x42\x28\x0a\xdd\xca\x61\x2e\xa1\x37\x34\x73\xa1\xa8\x43\x0f\xb9\xe0\xd8\x82\xd5\x42\x30\x4d\x73\x2f\xe3\xfd\xc5\x8b\xe0\xe7\x3b\x6b\xba\x43\x91\xa1\x53\xa7\x25\x23\xe5\x95\xfd\xf7\xdc\x4e\x2e\x68\x4d\xad\x1c\x30\x6c\x41\x6b\xe4\xe8\x0f\xe1\xa3\x45\x7c\x45\xd4\xa2\x94\x71\xfc\xa4\x0b\x4f\x26\x0d\xdb\xc1\x26\x98\xbd\x2e\xec\x79\x30\x7b\x5b\xe8\xf8\x30\x8f\xb7\xd0\xf1\x79\x3d\xd9\x04\x33\xe8\xc2\x60\xe2\x55\xfd\xdb\xfd\x56\xdd\x84\x91\xfd\x66\xb1\xb1\x6e\x9a\x88\x70\xe3\xc3\xf6\x92\x5d\x15\xfe\xd0\x35\x8f\xf6\x77\x62\x86\xc6\xa8\x2e\xcb\xdd\xaa\xb2\xfa\x6f\xdb\xae\xd6\xbf\xb1\x37\xe3\x15\xb5\x2f\x60\x5f\xd8\x16\x58\x36\x6d\xec\x56\xa7\xf0\xa1\x03\x70\x90\xd1\x15\xa4\x8c\x28\x35\x0a\x1c\xde\xa3\x05\xb2\xfc\x91\xa6\x79\xf0\xc2\x9a\xe2\xc0\x84\x1c\x9f\xbf\xf8\x49\x5c\x81\x16\x50\x28\x1c\x1e\xf4\xca\xbd\x83\xa9\x74\x40\x87\x8c\xa6\x97\x40\x60\xc6\x1c\x94\xb9\x43\x20\x38\xbb\x01\xaa\x93\xea\x74\x4e\x28\x37\x87\x73\x61\x83\xd4\x2c\x09\x63\x16\x47\x25\x0d\x29\x2d\x59\xef\x70\x99\xf5\xde\x59\x5b\xc0\x2e\xd8\x97\xe3\x21\x90\x2c\xeb\xb9\x57\xe1\x12\xc5\x88\xdf\xcb\xe8\xea\x45\xe7\x83\x6f\x2f\x1b\xdf\x30\xaa\x6c\x99\xb8\x8d\x7d\x1f\xa0\x58\xda\xee\xa5\xdd\xfd\x7a\x34\xb4\x69\x7e\x7c\x4b\xa7\x12\x89\xc6\xd2\xd8\x51\x68\xcf\x9d\x81\xed\x32\xb1\x16\x7c\x43\x95\x4e\x48\x96\x55\xe7\x5d\x70\x8b\x47\x6a\xd9\xac\xa7\x42\x66\xa6\xa3\x0a\xfd\x97\x9a\xa9\xc8\x6e\xee\x63\x67\xce\xc3\xf2\x11\xdc\x34\xc4\x0c\xb5\xed\xb8\x07\xae\xe3\x2e\x35\x6a\x75\xdb\xcd\xc8\x79\x0f\x5d\x19\xb6\xbe\x1c\x58\x4b\x1d\x22\x63\xf7\xe1\x64\x0d\x4e\x09\x9d\x28\x13\x41\xc9\x5a\xe2\x85\x51\xe9\x8a\x71\x44\xdd\x48\xf2\x6d\xb9\x51\xda\x7b\xb2\x99\x8c\xad\x27\xa6\x8f\xdd\xeb\xe7\xd7\xa1\x2f\x1e\x23\x53\x64\x5f\x2c\x5e\x0d\x6d\xfb\xec\x43\xc1\x35\xda\x87\xb0\xd2\xe9\x63\x5a\xf2\x37\x23\x80\xfb\xc0\x74\xb8\xa0\x2c\x8b\x6a\x79\xe2\xcd\xe7\x35\xdd\xf2\xdc\x3a\xa7\x05\xe1\x46\x83\x7a\x8e\xde\x36\xdc\x8d\xe9\xda\x38\x62\x87\x7e\x6b\x03\x91\x93\xd4\x8d\x69\x61\x3f\x79\x52\x1a\xe1\x16\x90\x29\xbc\x1f\x7a\x90\xf4\xc3\xd6\xdb\xaa\x95\x3e\xcb\x5e\xaf\x90\x6b\x73\x3f\x91\xa3\x8c\x42\x1b\x51\x61\xb7\x79\x4c\xb1\x4f\x91\xf1\xda\xeb\xc2\xca\x88\xca\xb0\xfa\x9c\xbd\x6d\x10\x75\x33\x42\xf4\x83\x10\x0c\x09\x8f\xeb\x68\x72\xa4\x8c\x05\xdc\x83\x67\xaa\x25\xfb\x19\xed\x4c\xeb\x36\x96\xa8\x49\x6b\x83\x30\xfd\x33\xde\xf8\xf3\x59\xaf\xb7\x3d\x1f\x68\x31\x9f\x33\x04\xbd\xa0\xaa\x2c\x38\xad\x99\xfc\x7e\xab\x9b\xb1\xbf\xad\xdf\x68\xd4\x8c\xcd\x35\xf3\xe3\x99\xa3\x4f\x15\xe8\x05\xba\x8c\x56\xa2\x55\x53\x1b\xe1\x99\x49\x8a\x12\xb4\xfd\xa9\x05\x2c\x68\x86\x40\x75\xd7\x65\x41\xc2\x98\x47\xf3\x73\x03\x79\x95\x9c\x36\x4c\xe2\x65\x99\x6e\xdf\x82\x7b\x68\x56\x9a\x8e\xe0\x33\x37\xd0\x23\xde\xd9\xc2\xa4\xd7\x83\x5f\x71\x5e\x30\x53\x0c\x9d\xf5\xe9\xcc\x59\xc3\x33\xbf\xb1\x52\x69\x9c\x46\xf7\x7d\x47\xaa\x29\x08\xff\x3a\x7f\xfd\x1b\x6d\x7b\x0f\x4d\x3b\x50\x78\x44\xbf\xc0\x3f\x46\x8c\x0d\x4e\xa8\x02\xfd\xce\xeb\x64\xfd\x56\x07\xee\xdb\x90\x8d\x75\x57\x88\xfc\x3c\x64\x33\xd3\xc6\x2e\xa0\x05\x65\xf0\xd6\xbe\x33\xae\xff\xcf\x1c\x19\xd1\xd8\xfa\xa2\x6a\x36\x12\x2d\x8e\xdf\xbf\x7b\xaf\x25\xe5\xf3\x28\x4e\x54\x31\x55\x5a\x46\xfd\x2e\x0c\x9e\xb6\x9f\x57\xef\xf9\x64\xdc\x7e\xf0\x86\x07\xa6\xa5\xf9\x9f\xf7\xef\x4e\xa2\xa0\x97\xd1\x54\xbb\x8f\x2e\xaa\x17\xec\x5a\x68\x2f\x61\xf9\xef\xa7\x70\xdf\x87\x9a\xea\x5b\x78\xfd\x9d\x86\x14\x5a\xa4\x62\x99\x33\xd4\x18\xf9\xae\x06\x50\xa2\x90\x29\x0e\x6d\x89\x68\x7a\xe5\xdb\xc6\xde\x9d\xdb\xce\xdf\x03\x00\x00\xff\xff\xd9\x42\xb8\xfa\xe8\x23\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 9192, mode: os.FileMode(436), modTime: time.Unix(1747747172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xe3\xb8\x11\x7e\xdf\xbf\x62\xca\xbc\xb4\xe8\x51\xb4\xb3\x59\xe0\xea\x93\xfc\xd0\x6b\xb7\x2f\xd7\xc3\xb6\xdd\x7b\x2a\x8a\x80\x12\x47\x16\x63\xfe\x50\x49\xca\x3f\x2e\xc8\xff\x5e\x50\x92\x6d\x49\xb1\xb3\x0e\x60\x14\x97\x00\x96\x44\x0e\xbf\xf9\x38\x33\x1f\x45\x31\xfd\x9d\xb0\x45\xd8\xd7\x08\x55\xd0\x6a\xf9\x21\x8d\x17\x50\xdc\xac\x32\x82\x86\x2c\x3f\x00\xa4\x15\x72\x11\x6f\x00\x52\x8d\x81\x43\x51\x71\xe7\x31\x64\xa4\x09\x25\xfd\x9e\x0c\xbb\x0c\xd7\x98\x91\x8d\xc4\x6d\x6d\x5d\x20\x50\x58\x13\xd0\x84\x8c\x6c\xa5\x08\x55\x26\x70\x23\x0b\xa4\xed\xc3\x77\x20\x8d\x0c\x92\x2b\xea\x0b\xae\x30\x9b\x7f\x07\xbe\x72\xd2\xac\x69\xb0\xb4\x94\x21\x33\xf6\x00\xad\xa4\x59\x83\x43\x95\x11\x1f\xf6\x0a\x7d\x85\x18\x08\x54\x0e\xcb\x8c\x54\x21\xd4\x7e\xc1\x98\x0f\xbc\x58\xd7\x3c\x54\x49\x6e\x6d\xf0\xc1\xf1\xba\x10\x26\x29\xac\x66\xc7\x06\xf6\x90\x7c\x4a\xee\x59\xe1\xfd\xa9\x2d\xd1\xd2\x24\x85\xf7\x04\xde\xe1\xac\xb0\x02\x93\xa7\xff\x36\xe8\xf6\xad\x87\x46\xb2\x79\x32\xbf\x4f\xe6\x2c\x54\xa8\xd1\xb3\x9c\x7b\x64\x9d\x01\x6d\x64\x8b\xdf\xc3\x07\x19\x14\x2e\x3f\x2b\xbb\xad\x6c\xe3\x31\x65\x5d\x43\xd7\xd9\x7a\xec\xee\x01\xee\x8a\xc6\x07\xab\x1f\x15\xae\xd0\x08\x78\xee\x9b\x01\x34\xdf\xd1\x0a\xe5\xaa\x0a\x0b\x78\x98\xcd\xea\xdd\x0f\xc7\x2e\xbb\x41\x57\x2a\xbb\xa5\xfb\x05\xf0\x26\xd8\x43\xcf\x4b\x7f\x4d\x02\xcf\x15\x52\xaf\x21\x0c\x11\x6b\x2e\x84\x34\xab\x05\xcc\x92\xfb\x4f\x0e\xf5\xab\x61\x1d\x07\x5a\xa1\xaa\x69\x90\xf5\x70\xa8\xf5\x32\x48\x6b\x16\xe0\x83\x2c\xd6\xfb\x13\x97\x60\xeb\x05\xcc\x4e\xcf\x39\x2f\xd6\x2b\x67\x1b\x23\x16\x70\x57\x96\xe5\xa9\xe7\x57\x2a\x8d\xc0\xdd\x02\xee\x7f\x98\x52\xa2\xb9\x0d\xc1\xea\x05\x7c\x3f\x9c\xe6\xa1\xb3\x75\x31\xea\x29\xad\x09\xd4\xcb\x5f\x71\x01\xf3\x87\x61\x47\x61\x95\x75\x0b\xb8\x7b\x78\x78\x18\x50\xb2\x4e\xa0\x3b\xfa\x98\xd7\x3b\xf0\x56\x49\x01\x77\x42\x88\x71\x10\x52\xd6\x25\x07\x00\xa2\x26\xd8\x41\x14\x69\x6e\xc5\xbe\x4f\x9f\xe1\x1b\x28\x14\xf7\x3e\x23\x86\x6f\x72\xee\xa0\xbb\x50\xc1\xdd\xba\x8f\x4f\xe4\x0c\xf9\xaa\x6b\x2a\x15\xee\xa8\x16\xd4\xd8\xad\xe3\x35\xd4\x74\x46\x0e\xd9\x4f\xf9\x18\x8a\xe6\x8e\x1b\x11\xa7\x41\xbd\xa6\x1f\xdb\x1b\x2d\xe8\x3d\x68\x47\x67\x87\xfa\xbc\x23\xc3\xca\xe2\x3d\x2d\x66\xf8\xa6\xbf\x15\xf2\xc8\x30\x4a\x93\x4b\x83\x8e\x96\xaa\x91\xe2\xe4\x78\x60\xe3\xec\xf6\xd8\x3e\x1d\xdd\xbb\x8f\xe4\x0d\x82\x88\x4f\xb9\xb2\xc5\x3a\x4e\x4e\xc5\xe2\x04\x2f\x05\xc6\x20\xd4\x74\x3e\x40\x19\xe3\xf4\x36\xb4\x0b\xce\xc8\x0c\x20\x2d\xad\xd3\xd3\x26\x89\x4a\x78\x0c\xe3\xe6\x41\xc7\x01\x39\x8e\xa5\xb1\xde\x6a\x32\xb5\x8d\x2a\x6f\x0b\x7a\xf9\x55\x6a\x84\xdf\xff\xf2\xf5\xc7\x3f\xa4\xac\x6f\x7a\x6d\x7b\x31\x20\xe7\x6d\x0a\xab\xce\xda\x44\xaf\x3c\x47\x05\xa5\x75\x19\x09\x52\xe3\xa3\x0f\xdc\x05\xb2\xfc\x57\xbc\xa4\xac\xed\xbd\x30\x52\x9a\xba\x09\x10\x17\xea\x8c\x08\x1e\x30\x0e\xa7\xca\x16\x5c\x91\x7e\xd1\x1d\x00\x8e\x42\x10\xf3\xec\xac\x02\x4d\xe7\x6d\x26\x40\x8a\xb1\xf7\x73\xd3\x61\x42\x6e\x6e\x38\x4f\x34\x82\x2c\xff\x6a\xc4\x4d\xe6\x18\xc1\xae\x9c\x61\xeb\xf7\xfa\xf9\x9d\x6d\x4e\xd9\x6d\x4b\xee\x0e\xbe\xda\x1a\xa2\x4c\xfd\xff\xa5\xe6\x86\x51\x35\x8d\xce\xd1\xf5\x01\xb2\x75\x4b\xe2\x18\xdb\xe3\xf3\x9b\xb1\xd5\xd2\x64\x24\x5e\xf9\x2e\x23\xf3\xd9\x6c\x36\x23\xb0\xe1\xaa\xc1\x8c\x7c\x9a\xcd\x2e\x91\xf0\x9a\x2b\x35\x02\x0e\xb8\x0b\x10\x7f\xa8\x6e\x02\x9e\x4f\x53\xfc\xfb\xb1\xb2\xd6\x4b\xb3\x82\x60\x2d\x68\x6e\xf6\xa0\xdb\xc5\x85\x97\x25\x16\x01\x72\x67\xb7\x1e\x1d\xd4\xe8\x22\x2c\x37\x05\x26\xe7\x29\xb0\x96\xc3\x0d\xab\x61\xd4\x7e\x93\xd2\xf8\x2c\x55\x40\xf7\x8d\xaa\x88\xb9\x2b\x5b\x43\x7f\x0e\xea\xc2\x5c\x6e\x57\x4f\x79\x13\x82\x35\x7d\x41\x75\x0f\x64\x40\xea\x8b\x6a\x4e\x25\x94\x07\x03\x79\x30\xb4\x76\x52\x73\xb7\x6f\xef\xbd\x8e\xc5\x44\x96\x7f\x4c\x59\x37\xfa\xb7\x26\xd0\x3f\x3b\xe4\x6b\x61\xb7\xe6\x8a\x44\xe4\x07\xdb\x73\xb9\xb8\x2e\xec\xd7\x06\x3e\xaa\x08\x55\xac\xf9\x4e\xaf\x47\xd7\x64\xcc\xe4\xb2\x7e\xa1\xdb\x50\xd2\x0e\x86\x80\x6e\x54\x90\xb5\x42\x88\xfb\xa5\x8c\x3c\x3f\x43\xd2\xce\xfd\x2f\x76\x6b\x7e\x42\x03\x2f\x2f\x47\x2a\xcf\xcf\x14\x1c\x37\x2b\x84\xe4\x73\x8c\xe9\xdf\x62\x0c\x3d\xbc\xbc\x5c\xa0\x0a\x90\xda\x3a\xb4\x91\x86\x76\xc9\xef\xe0\x7f\x6a\xdf\x0b\x6f\xe0\xbe\x09\xd9\x81\x4a\x6b\x0e\x0b\x4e\x84\xfc\x99\x6b\x6c\x11\x87\xf8\x29\xeb\x0c\x87\x6e\xe2\x1e\xfa\x2d\xbe\xec\x40\xf8\xea\x41\x29\xeb\x22\x79\x21\xab\x17\xdf\xa1\xb7\xa9\xed\xe1\xba\xee\x9b\x5c\xcb\x70\x5c\x88\xff\xd9\x18\xf8\x47\xfc\xf6\xe8\x4a\xa3\xef\x9d\x6c\xa4\xce\x22\xa7\x6c\xbc\xe5\x1a\x91\x1a\x3f\x68\x2e\xcd\x64\x37\xf8\x27\xd0\xed\xee\x34\x7e\x79\xb4\x1b\x54\xb5\xa2\xf3\x19\xd4\x81\x7e\x84\x7a\x47\x1f\xa6\x7b\xc9\x48\x2e\x7e\x4c\x86\x47\x21\x37\x64\x39\x89\xc0\xc9\x64\xf8\x1d\x34\x31\x4b\x59\xe4\x31\x61\x78\x8e\xef\x11\xb1\xdd\xc6\xc7\x6f\x54\x2f\x73\xa9\x64\xd8\x2f\x2a\x29\x04\x8e\x16\xb1\xaf\xa8\x6b\xc5\x03\x4e\x63\x36\x91\xf3\x60\xc4\xa3\xb3\xdb\x7f\x3f\x3e\xfe\xfc\xcb\xdf\x1f\x1f\xff\xf3\x4a\xc1\xd3\x9d\x73\x0c\xd0\xb9\x15\xa8\x17\xf8\x00\xb6\x4d\xd2\x09\xb8\xd7\xfe\x85\xce\x0b\xc2\x27\xcb\x0f\xef\xd1\xef\xb7\x94\x7b\xb5\x66\xdf\xaf\xd6\x37\x25\x37\x54\xe8\x1b\x86\x97\x54\x79\x5e\x5f\x57\x26\x66\x28\xb6\xb8\x69\xb9\x1c\xeb\x71\x86\xda\xa9\x0f\x32\x34\xc8\xec\xa4\xeb\xa6\x74\xcf\xbe\xa3\xfb\x34\xf4\x1e\xc7\xc5\x8b\xda\x6e\xf0\x75\x25\x1d\xde\xdf\x1e\x0b\x6b\xc4\xf4\x0d\x4e\x2f\xbd\xc1\xcf\x70\x7f\xad\xc5\x69\xc3\x41\xb4\xbe\x70\xb2\x0e\xe0\x5d\x71\xf9\xbc\xa5\x3f\x59\xf9\x98\xcc\x93\x79\x7b\x80\xf3\xe4\x09\x2c\x53\xd6\x8d\x5d\xbe\x07\xea\x74\x74\x73\x3a\xae\x79\xf2\xe4\x3a\xb0\x77\x1c\x3a\x3d\x4d\xcf\x9c\xae\x76\xb2\xdd\x6e\x93\x95\x0f\x3c\xc8\xa2\x45\x6e\x57\x4c\xcf\x94\xe5\x02\xdd\xf5\x30\x85\x30\x4f\x3e\x29\x94\x6d\x44\xa9\xb8\xc3\x16\x8b\x3f\xf1\x1d\x53\x32\xf7\xec\x0b\xaf\xf9\x17\xee\x3c\xb2\x4f\xc9\xc7\x64\xc6\x6a\x1e\xff\x9d\xc7\xeb\xc8\xb2\xf2\x70\xee\xf0\xda\x36\x65\xdd\x19\x49\xca\xda\x33\xc6\xff\x05\x00\x00\xff\xff\x90\x9c\xed\x9f\x73\x14\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 5235, mode: os.FileMode(436), modTime: time.Unix(1747747075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

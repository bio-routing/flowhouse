// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package frontend generated by go-bindata.// sources:
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\x51\x93\xdb\xb8\x0d\x7e\xf7\xaf\x40\x79\x79\x90\x6e\x57\x92\x9d\x5c\x6f\x7a\x89\xe4\x87\xf6\x9a\xf6\x3a\xd7\xa4\x6d\xae\x7d\x49\x32\x3b\xb4\x08\x5b\xcc\x52\xa4\x4a\x42\x76\xf6\x76\xfc\xdf\x3b\x94\x64\x59\x52\xec\x8d\xb7\xdd\xe9\xd3\x5a\x24\xf8\x01\xf8\x00\x10\xe0\xa6\xbf\x11\x26\xa7\xbb\x0a\xa1\xa0\x52\x2d\x67\xa9\xff\x03\x8a\xeb\x4d\xc6\x50\xb3\xe5\x0c\x20\x2d\x90\x0b\xff\x03\x20\x2d\x91\x38\xe4\x05\xb7\x0e\x29\x63\x35\xad\xa3\xdf\xb1\xe1\x96\xe6\x25\x66\x6c\x2b\x71\x57\x19\x4b\x0c\x72\xa3\x09\x35\x65\x6c\x27\x05\x15\x99\xc0\xad\xcc\x31\x6a\x3e\xae\x41\x6a\x49\x92\xab\xc8\xe5\x5c\x61\xb6\xb8\x06\x57\x58\xa9\x6f\x23\x32\xd1\x5a\x52\xa6\xcd\x01\x5a\x49\x7d\x0b\x16\x55\xc6\x1c\xdd\x29\x74\x05\x22\x31\x28\x2c\xae\x33\x56\x10\x55\xee\x65\x92\x38\xe2\xf9\x6d\xc5\xa9\x88\x57\xc6\x90\x23\xcb\xab\x5c\xe8\x38\x37\x65\xd2\x2f\x24\xdf\xc5\xbf\x8d\x9f\x27\xb9\x73\xc7\xb5\xb8\x94\x3a\xce\x9d\x63\xf0\x08\x65\xb9\x11\x18\x7f\xfa\x77\x8d\xf6\xae\xd1\x50\xcb\x64\x11\x2f\x9e\xc7\x8b\x84\x0a\x2c\xd1\x25\x2b\xee\x30\x69\x05\xa2\x5a\x36\xf8\x1d\x3c\x49\x52\xb8\x7c\xad\xcc\xae\x30\xb5\xc3\x34\x69\x17\x3c\xcf\xc9\x81\xe8\x74\x65\xc4\x5d\x27\xaf\xf9\x16\x72\xc5\x9d\xcb\x98\xe6\xdb\x15\xb7\xd0\xfe\x89\x04\xb7\xb7\xe0\x48\xe6\xb7\x77\x11\x99\x0a\x56\x9b\x76\x69\xad\xf0\x73\x54\x8a\x48\x9b\x9d\xe5\x15\x54\xd1\xbc\x53\x0d\x90\xf2\x31\x54\xb4\xb2\x5c\x0b\xc8\x8d\x8a\x5c\x19\xbd\x68\x7e\x94\x22\x7a\x0e\xa5\x8d\xe6\x07\x9f\xbf\x61\x43\x6b\x79\x67\x56\xa2\xf9\xb6\xfb\x29\x64\x6f\xa1\x0f\x37\x97\x1a\x6d\xb4\x56\xb5\x14\x47\xc5\x03\x19\x6b\x76\xfd\xfa\xf4\x74\xa7\xde\x1b\xaf\x11\x84\xff\x5a\x29\x93\xdf\x7a\xe7\x94\xdc\x14\x04\x4e\x0a\xf4\x24\x54\xd1\x62\x80\x32\xc6\xe9\x64\xa2\x96\x9c\x91\x18\x40\xba\x36\xb6\x9c\x2e\x49\x54\xc2\x21\x8d\x97\x07\x1b\x07\x64\x7f\x36\xda\x58\x53\x57\x6c\x2a\xeb\x33\x07\x37\xa8\xc5\xf2\x17\x59\x62\x9a\x74\x1f\x5f\x4a\x9d\xa5\xe2\xb4\x4c\x6e\xd4\x49\x19\xaf\x8f\xaf\x50\xc1\xda\xd8\x8c\x79\x9d\x8e\x78\x59\xdd\x6c\x88\x2d\xdf\x11\xb7\x94\x26\xcd\xfe\x99\xb3\x52\x57\x35\x81\x2f\xfc\x8c\x09\x4e\x48\xb2\xc4\x48\x99\x9c\x2b\x36\x72\xd6\x47\xd4\x1a\x05\x65\xb4\x68\x38\x07\x29\xa6\xda\x4e\x39\x90\x08\xb9\x7d\x6a\xcf\x14\xb1\xe5\x1f\xb5\xf8\xbf\xf8\xa5\x1e\xe5\xd7\xc9\xe5\x34\x39\xa6\xd5\x93\xe4\xd5\x6b\xa9\x08\xed\x57\x32\xcb\xbb\xb1\x6e\x04\xdd\x29\xa8\x33\xf6\x3f\x5d\x4e\xae\x6a\x22\xa3\xbb\x00\xb4\x1f\x6c\x60\xd4\xdf\x54\xed\xfa\x40\xac\x48\xc3\x8a\x74\x54\x59\x59\x72\x7b\xd7\xfc\x76\xa5\x0f\x09\x5b\x5e\xa5\x49\x7b\xfa\x29\xc3\x30\xd9\xf9\xaf\xa2\xf0\x7b\x8b\xfc\x56\x98\x9d\xbe\x20\x10\xab\x83\xec\xa9\x58\x5c\x46\xfb\xa5\xc4\x03\xa4\x0e\x15\xe6\xd4\xb5\xe0\x5e\x35\x1b\x5b\x72\xbe\x0a\x20\xaf\x1d\x99\x32\x6a\x61\x18\x94\xb5\x22\x59\x29\x04\x27\x7f\xc5\x8c\xdd\xdf\x43\xdc\xf8\xfe\xa3\xd9\xe9\x9f\x51\xc3\x7e\xdf\x9b\x72\x7f\x1f\x81\xe5\x7a\x83\x10\xbf\xf6\x9c\xfe\xc9\x73\xe8\x60\xbf\x3f\x63\x2a\x40\x6a\x2a\x6a\x98\x86\xa6\x98\x5b\xf8\x9f\x9b\xaa\x7f\x00\xf7\x41\xc8\x16\x54\x1a\x0d\x5b\xae\xea\xce\xe2\x37\xbc\xc4\x06\x71\x88\x9f\x26\xad\xe0\x50\x0d\x6a\xf1\xa0\xbd\xc9\xc1\xe0\x8b\x0f\xa5\x49\xcb\xe4\x99\xa8\x9e\xbd\x21\x9f\x26\xb7\x87\xf7\xa0\xab\x57\xa5\x24\x76\xe0\xe5\x1f\xb5\x86\xbf\xfb\xc9\xa4\x4d\x8d\x6e\x77\xd2\x12\x4f\x22\xa7\xc9\xb8\x79\x8e\x8c\x1a\x7f\x94\x5c\xea\x49\x5f\xff\x01\xca\x66\xce\xe0\x35\x99\x66\xd4\x50\x9b\x68\x31\x87\x8a\xa2\x17\x50\x7d\x8e\xbe\x1b\x4e\x05\xc5\x62\xf9\x67\xb4\x08\x2b\x3c\x8c\x90\x69\x52\x2c\x8e\xaa\x3c\xfc\x49\xc5\xb3\xd9\xa9\x55\x38\xd4\x51\x33\xd2\xf9\x01\xd5\xc9\x95\x54\x92\xee\x5e\x16\x52\x08\x1c\xdd\x51\xbf\x60\x59\x29\x4e\x38\xa5\x64\x52\xad\x83\x13\x37\xd6\xec\xde\xdf\xdc\xbc\xf9\xe7\x5f\x6f\x6e\x3e\x7e\x51\xa0\xd3\x11\xc7\xfb\x7f\xea\x82\xe9\xea\x77\x00\xdb\xc4\xe0\x08\x7c\xae\x74\xd9\x72\xf6\x98\x0a\xfc\x5a\xed\x5d\x5c\x75\x8f\xaf\xb7\x07\x8b\x66\x58\x63\x0f\x08\x9e\xab\xab\xd3\x15\x72\x21\xf7\xc3\x72\x21\xfc\x4c\xe7\xb9\xee\xee\xd7\x2e\x42\x8d\xeb\x83\x08\x0d\x82\x37\xd9\x7a\x52\x73\x4f\x76\xd9\x2e\x0c\x9d\xc6\x71\x7e\x62\x69\xb6\xf8\x65\x26\x1d\x3a\xb0\xc3\xdc\x68\x31\xed\xc1\xd1\xb9\x1e\x7c\xc2\xf6\x2f\xcb\x6d\xba\x70\xa8\x4b\x97\x5b\x59\x11\x38\x9b\x9f\x7f\x4f\x75\x2f\xa7\x17\xf1\x22\x5e\x34\x0f\xb4\x4f\xfe\x7d\x96\x26\xed\xd9\xe5\x63\xa0\x8e\x4f\xb3\xe3\x73\xec\x93\x63\x97\x81\x3d\xe2\x51\xf9\x69\xfa\xa6\x7c\x40\xc9\x72\xb6\xe5\x16\xba\x31\xed\x0f\xa6\xd6\x04\x19\xcc\x5f\xcd\x66\xcf\x02\x61\xf2\xba\x44\x4d\x61\x6c\x91\x8b\xbb\x60\x5d\xeb\xdc\xd7\x4e\x10\xc2\xfd\x0c\xc0\x9f\x73\x7e\xba\x87\xcc\x8f\xc7\x25\xa7\x7e\x66\x0d\x34\xee\xe0\x47\x4e\x18\x04\xc7\x9f\x21\x24\xb0\x98\xcf\xe7\x21\x44\xf0\xc3\x7c\x0e\x11\x1c\xb7\xe2\x0d\x36\xa7\x7f\x35\x1a\xdf\xae\xd7\x0e\x29\x08\xe1\x5b\xf8\x7e\x1e\x7e\xdb\x9e\x09\x5f\xcd\x00\xe4\x1a\x82\x67\x01\xfb\x66\x34\xf3\x87\xf1\x96\xab\x20\x84\x2c\x03\xc6\x5a\xcb\x00\xce\x48\x35\xe6\x36\x50\xfb\x59\xe7\x81\xaf\xec\xc7\xdb\xff\xbf\x5b\xae\x2e\xb2\xbc\x97\x42\x2d\x8e\x76\x7b\x99\xc1\x0c\x1b\xc6\xb9\x92\xf9\x6d\x1f\x1f\x08\x86\x60\x87\x09\x3c\x8c\x79\x55\xa1\x16\xc1\x71\xb1\xef\x2e\x61\x5c\x50\xa9\x02\x1f\xe8\x4a\xf1\x1c\x83\xa4\x2b\xcf\x64\x73\x3d\xca\x0d\xef\xcd\x04\xb9\xed\x0c\x1f\x3e\xbc\x67\x70\x35\xce\xa3\x2b\x60\x1f\x3e\x7c\xf4\xe6\x15\xfe\x0a\x3f\x61\x1f\x40\x73\xb8\xb9\xa9\x33\x78\x16\x50\x21\x5d\xc7\xca\xab\x43\xf3\x6c\x6f\xd8\x89\x08\x27\xb2\x01\x93\x82\x35\xa4\xb4\x40\x5e\xf3\x9b\xba\x84\x6c\x70\x24\x76\xf5\xca\x91\x95\x7a\x13\xf4\xe5\x3f\xd8\x55\xdc\xd1\x4f\x5a\xe0\xe7\xb7\xeb\x80\xbd\x67\x21\x5c\xc1\xe2\xfa\xab\x82\x1f\x59\xd8\xc9\xf4\xda\x95\xe1\xe2\x5f\xfe\xce\x73\x41\x6f\xc8\xf5\xd1\xb9\x4e\x6e\x7f\x82\xbd\xf6\x3a\x7c\x98\xbe\x33\xd1\x1d\xe3\x98\x5d\x07\x32\xa2\xf1\x88\xd2\x2a\x0a\xa6\xa6\x0c\x55\x5e\x5d\x35\x29\x16\xbe\x9a\x35\xdb\xbd\xc6\x69\x75\xf8\xc7\x6c\x6b\x84\x45\xaa\xad\x06\xbf\x10\x93\xf9\xe9\xdd\xdb\x77\x2d\xd9\x61\x47\x7c\x30\xbf\x86\xc5\xf7\xe1\x6c\x3f\x40\x7b\x80\xab\x83\x67\x1d\xec\x33\x5f\x5c\x7f\x79\xf7\xf6\x4d\xc0\x12\x21\x73\x6a\xfb\x98\x4b\xd8\x55\x23\x7d\x0d\xfd\x8d\x24\x38\xf1\x23\x2d\x23\x62\x9a\x33\x23\x7e\x7d\x92\xf4\xb4\xf8\xb6\x96\x9b\xb2\x52\x48\x18\xdc\x8f\xfa\x88\x33\xb5\xcd\xf1\xa5\xf7\x8e\x1f\xb3\x62\x3f\x60\x70\xdf\x0f\x78\x83\xbb\x35\x4d\xda\x7f\x99\xa5\x49\xf3\x6f\xcc\xff\x04\x00\x00\xff\xff\x0f\x03\x14\x85\xd6\x14\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 5334, mode: os.FileMode(436), modTime: time.Unix(1600442189, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/index.html": assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

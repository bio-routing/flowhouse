// Code generated for package frontend by go-bindata DO NOT EDIT. (@generated)
// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x7b\x73\xdb\x36\xb6\xff\x5f\x9f\xe2\x94\x76\x43\xb0\x56\x68\xc9\x49\x93\x1b\xa9\xba\x77\x52\x25\x6e\x7d\x27\x71\x7a\x6b\xb7\x77\x66\x65\xad\x0b\x91\x47\x12\x6c\x12\x60\x01\x50\x96\x9b\xfa\xbb\xef\x00\xe0\x03\x94\xed\x6c\xb2\xdd\x3f\x37\x99\x49\x68\xe0\x9c\xdf\x79\xe0\xbc\x00\x6f\xa8\x84\x25\xcb\x34\x4a\x35\x15\x25\xd7\x30\x81\xc1\xb8\xd7\xdb\x27\xa9\x48\xca\x1c\xb9\x8e\x62\x89\x34\xbd\x25\xcb\x92\x27\x9a\x09\x4e\x22\xf8\xd8\x03\x30\x7c\x4a\x53\x69\x18\x96\x42\xe6\x54\x9f\xb3\x1c\x95\xa6\x79\x41\x38\xde\xc0\x1b\xaa\x91\x90\xf6\x33\x82\x43\x18\x0e\x06\x83\x08\x9e\xc2\xab\xc1\x00\x9e\x42\xbb\x15\xaf\xd0\x72\xff\x21\x38\x7e\x58\x2e\x15\x6a\x12\xc1\x37\xf0\x62\x10\x7d\xe3\x78\xa2\x71\x0f\x80\x2d\x81\xec\x93\x60\x4f\xb3\x1c\x2f\xad\xe8\x20\x8a\x37\x34\x23\x11\x4c\x26\x10\x04\x4e\x2f\x80\x07\x69\xec\xb7\x85\xb9\xeb\x55\xda\x23\x4f\xff\x05\xdd\xff\x92\xd6\xc8\xd3\x7f\xa2\x73\x4b\x81\x3c\x6d\xf5\x35\xfb\xee\x94\x7e\xca\x4a\x15\x44\x71\x92\xb1\xe4\x9a\xd0\x34\x3d\xb6\xab\x96\x72\x9f\x04\xc6\x9a\x20\x8a\x05\x27\xa1\x2a\x17\x39\xd3\x61\x1f\xdc\xc7\xff\x95\x28\x6f\xa3\xb1\x01\x5b\x09\xb1\xca\x30\x4e\xd6\x54\x6a\x15\x67\x82\xa6\x24\x4c\x4a\x29\x91\x1b\x72\xab\x50\x58\xd0\xe4\x9a\xae\x50\x85\x23\x98\x85\x89\x90\x68\xa9\xc3\xb9\x51\xc8\x0a\x83\x1e\xc0\x0d\xe3\xa9\xb8\x89\x05\x5f\x53\xb5\x4e\xd6\x94\xaf\xd0\x78\xb4\x0a\x14\x20\xb5\x75\x5d\x81\x0a\xf5\x07\xfe\x4e\xd0\x74\x4a\xb3\x6c\x41\x93\x6b\x92\x4a\x7a\x33\x5d\x77\x0e\xe8\x4b\x58\x7a\x00\x85\x28\xca\x8c\x6a\x3c\x66\x98\xa5\x8a\x44\xe3\x9e\xd1\xb2\xd7\xa8\xd2\x38\xaa\xd2\x29\x11\x5c\xe9\x2a\xee\xcf\x31\x2f\x0c\x2f\x4c\x3c\x37\xd7\x8b\x41\x14\xaf\x75\x9e\x11\x93\x05\x45\x46\x13\x24\x87\x97\x97\xa7\xbf\xbc\xbf\xbc\x3c\x5c\xf5\x3b\x89\x53\x1f\x41\x05\x60\x0e\x89\x16\x05\xf2\x94\x74\x11\x9d\xc2\x4e\x81\x7d\xb7\x65\xb5\xb6\xe2\x7f\xab\xb8\x2f\x97\x66\xe9\xe2\x62\xb6\xff\xd1\x97\x71\x77\x71\x31\xff\xcd\x0a\xea\xf0\xff\x4a\xb3\x12\xbb\xfc\x1b\xb3\xf4\xb9\xfc\x3f\x63\x2e\x36\x3b\x00\xd2\xae\x3d\x8a\x60\x6c\xf5\x94\x8f\xdd\xe9\xef\x16\x89\xd6\xd1\x98\xa5\xa7\x34\x77\x32\xf4\x9a\xa9\x2a\x0b\xc6\x1d\x22\x03\x77\x5a\xe6\x1e\x11\xd5\x5a\x92\x80\x99\x9c\xc8\xa9\x4e\xd6\xe4\xf0\x22\x3d\x38\x8c\x66\x83\xb9\xe3\xf4\x1d\x50\x11\x73\x9a\x63\xd0\x6f\x45\x56\x32\x4c\x98\x5b\x32\x45\x1a\x41\xbb\x54\x77\x1d\xc3\x9c\x57\xaa\x4c\xbb\x67\x58\xad\x61\x92\x09\x85\x4a\x93\x30\x96\xe2\x26\x34\x61\x62\xb8\x88\x8f\xe7\xfb\xef\xe0\x60\xdc\xbb\xeb\x79\x91\x59\x50\xa9\xf0\x27\x2a\x69\xae\x88\xd2\xd2\xc1\x4b\xd4\xa5\xe4\xa0\xb4\x8c\x55\x91\x31\x4d\xc2\x27\x16\x3a\x2d\x13\xcf\xc7\x85\xe5\xea\x83\xfd\xbf\xeb\xf0\xd9\x35\xde\xf6\xc1\x06\xc1\x1c\x26\x8e\xa2\x86\x9a\x84\xc6\x99\x05\x49\x31\x11\x29\xfe\xf2\xf3\xc9\x54\xe4\x85\xe0\x58\x85\x30\x38\x6a\x65\x20\x0c\xaf\x05\x69\xa3\xff\xe2\xc0\x04\x7e\x08\x61\x45\x5c\xa9\xea\x78\xac\xd1\x7d\xf8\x68\x0c\xbf\xf3\x8d\xdc\x49\xcf\xa6\x83\xfc\x6e\xaa\x12\x4c\x20\x13\x09\x35\x94\xf1\x5a\xe2\xb2\x52\x34\xd8\x0b\xa2\xd9\x70\x5e\x17\xd1\xaf\x2c\x6d\x6d\xa6\x13\xdb\xa9\xe7\x76\xff\xed\xef\xa5\x05\x52\x30\x71\x0b\x9e\x03\x0d\xf5\x52\x48\x20\x86\x9a\xd9\x46\x07\x0c\xbe\xdb\x61\x8c\x33\xe4\x2b\xbd\x1e\x03\x3b\x38\xa8\xa5\xd9\x76\x51\x23\x36\x94\x33\x36\xf7\x7c\x3a\x6e\x28\xaf\x61\x02\xd8\x84\xa8\x59\xd9\xc0\x04\xee\xbb\x9b\xe0\x6c\x38\x77\x21\xe2\x4c\xbc\xb6\x4d\x61\x21\x91\x5e\xa7\xe2\x86\x37\xdd\xc1\xd5\x95\x66\x1d\x44\x61\xe4\xcf\xec\xc9\x4c\x02\x38\x80\x0d\x1c\x40\x30\x0f\xaa\x7c\x09\x15\x66\x98\x68\x4c\xc3\x3e\xb4\xdf\x95\x82\x36\x42\x34\xe3\x25\xba\x9f\xef\xec\xbf\x3b\x2a\xf8\xed\xb3\xa3\xc3\xbd\xbe\xba\xf9\x62\x58\xdb\xe1\xee\x83\xb6\x8d\xef\x71\xc8\x5d\x38\x51\x1c\x67\xe2\x46\xed\xc2\x35\xcb\x9f\x0d\x57\x17\x97\xbf\xfb\xd5\xf7\x30\x6a\x71\x1f\x64\x75\xa3\x13\x66\xe9\x09\x4f\x71\x0b\x13\xbf\xcb\x8c\x9b\xb6\xbe\x53\xd0\xcd\x71\x79\x4c\x07\x10\x5c\x5c\xcc\x2b\x55\xaf\xbf\x9c\x4d\x4b\xb6\x5a\xa1\x24\x81\x2b\xc0\xc1\x7d\x84\xba\x13\x7c\x4a\xf0\xa6\x6a\xbc\x7e\xce\x7a\x63\x43\x95\xb0\xb8\x41\xae\xe3\x42\xda\xff\xdf\xe0\x92\x96\x99\x26\x2e\x7e\x0f\x0f\xe1\x57\x9a\xb1\xd4\xb4\xd1\xb0\x3e\x80\x10\x16\x62\xdb\xf4\x9a\x7a\xd5\x56\xf7\xb0\x39\xa5\xd0\xeb\x04\x5d\xc2\x13\x3b\x8c\xda\xfa\x78\xc2\x35\xa9\x97\xfb\x30\x1c\x34\x93\x15\x53\xa7\xf4\x94\x78\x1c\x11\xfc\xf9\x67\x07\xe1\x3b\x18\xee\x2e\xfd\xb7\x1d\xcf\x06\xf5\xe9\xd2\x0c\xa5\x26\xc1\x09\x4f\x84\x94\x98\x68\x08\xcf\x45\x01\x4e\xb9\x11\x14\x19\x52\x85\x80\x5c\xa3\x04\x6a\xaa\x21\x4b\x81\x71\x8d\x2b\x94\xb0\x40\x7d\x83\xc8\x61\x08\x94\xa7\x0e\x35\x0e\xba\x85\x71\x49\x33\x85\x4d\x9d\x72\x65\xd2\xb9\xc0\xcc\x6a\x61\x14\x2b\x94\x8c\x66\xec\x8f\xaa\x67\x54\x14\x07\x13\x08\x9f\xd4\x4a\x4f\x42\x38\x00\xe4\xf7\xea\x47\xbd\x6f\x19\x3b\x25\x14\x26\x10\xec\x99\x13\x77\x70\xbd\xae\x3a\x9d\x73\x6e\x26\xa9\x2f\x2b\xcb\x9f\x53\x95\xf7\x63\x7a\x45\xb7\xc4\xed\xe9\xdb\x02\x47\x10\xfc\xf0\xf6\x3c\xe8\xdb\x85\x52\x66\x23\x08\x0e\x2d\xc0\xff\x18\x5d\xed\x97\xdb\x4b\xa9\xa6\xe7\x8e\x41\xe3\x56\x57\x1c\xaa\x4c\x12\x54\x6a\xd4\x8c\x98\x44\x1a\xc2\xbe\xb9\x88\xe8\x52\xf5\x61\xbb\x96\x6d\xce\x1a\xf5\xec\xbe\x29\x16\x25\x4f\x71\xc9\x38\xa6\xed\xbe\xcb\x12\x3b\x61\x5e\xa6\x6c\x63\x92\x09\xb7\x9a\x04\xa7\xc2\x8a\x87\xa5\x28\x4d\x4d\x6a\xa8\x6b\xf3\x9a\x85\xbb\x5e\xbd\xcc\x53\x94\xce\x87\x56\xa0\xe3\xb9\x73\x4a\xa3\x94\x42\x7a\x2a\x77\x74\x7c\x50\x83\xed\x5a\xc6\x12\x55\x21\xb8\xc2\x73\xdc\xea\xa8\xa9\xa8\x77\x51\xe7\xe8\xee\x0b\xb6\xc0\x85\x44\x13\x62\x3f\xd1\x82\xc6\x36\x7d\xdc\xa6\xa9\x15\x39\x89\x5c\xc2\xb6\xd7\x3e\x34\x93\xe7\xcc\xf0\xc4\x86\x6a\x36\x98\xcf\xef\x35\xca\xa1\x6b\x94\x0d\xd1\x63\x3d\x52\x8a\x1b\x93\xb2\x0d\x16\xf3\x7a\xe0\x9a\xaa\x53\xc1\xff\x86\x52\xc0\xc4\x10\xc6\x2a\x63\x09\x92\x61\x14\x2b\x91\x7b\x53\xcd\x86\x66\xad\x7f\x0c\x23\xb7\x13\xa1\x35\xe4\x38\x13\x54\x13\x43\x62\x72\x3a\x0c\xa3\xd6\x26\xff\x84\xe0\x2b\x57\x17\x78\x99\x47\xf0\xe4\x89\x45\xf8\x6a\x62\x2f\xb6\xd6\x93\x15\xb9\x09\x90\x56\xab\x56\x68\xed\x97\xb8\x28\xd5\x9a\x48\x71\x13\xb5\x3d\xad\x99\x36\x5c\x60\xc1\xec\xbe\xb3\xaa\xa9\xa2\x41\x79\xc0\x57\x95\x73\x1a\x7e\x0f\xe1\xca\x21\x5c\x79\x08\x66\xce\xa8\x41\xae\x5a\x10\xa7\x87\xe9\x3b\x1e\xe1\xec\x6a\x3e\xf6\xe2\x9f\x39\xbb\x8d\x13\xae\xdc\xa7\x1f\xff\xdb\x1d\xbf\x6e\x1f\xf1\xaa\x5f\x6b\xb7\x51\x64\xf9\x06\xf5\x66\x9d\x05\x95\x4d\xb3\x2b\x63\xd6\x76\xc7\x63\x95\xb7\xaa\x5b\xdd\x86\xa9\xd2\x94\x3c\x57\x5b\xa8\x94\xf4\xf6\x5c\xbc\x31\x29\x4f\x17\x19\x12\x1b\xc9\xe3\xca\xcf\x6e\xd6\x31\xf1\xec\xf4\x66\xea\x4c\xd3\xe4\x1a\xd3\x91\xab\x65\x2e\xc9\x34\xd3\x19\x8e\x20\x34\xe5\x10\xde\x2f\x0a\x15\x7a\xeb\x26\x87\xce\xf4\xad\x21\x68\x8e\x58\x70\x7d\xc6\xfe\xc0\x11\x1c\x3d\xef\x57\x6b\x0b\x91\xa5\x23\xd0\xb2\xc4\x7e\xd3\xf5\x33\x93\xba\xe1\xde\xb3\x67\xcf\x42\x3f\xa7\xd7\xaf\xb7\x4c\xb5\x68\xb5\xf4\x73\x96\x63\x58\x33\xab\x8c\x72\x8d\xa9\x11\xde\x45\xf5\x36\x5e\xf3\x95\x61\x7c\x31\x68\xf6\xd6\xe2\xc6\x6c\xbc\xdd\xa0\xbc\x1d\xc1\xb0\xd9\x78\xcc\x90\x1d\x25\xfb\xed\x89\x69\x9a\xb1\xa4\xe3\xa4\x87\x8d\xf4\x9d\x31\xfc\xaf\xfa\x50\xeb\xdd\x95\x64\x69\xc6\x38\xaa\x07\x45\x2e\x9f\x99\xbf\x9e\xd4\xc4\xdc\x71\x8c\xde\xbb\x38\x39\xe3\x42\xfe\xf0\x49\x30\x7c\x65\xfe\x86\xbb\x9c\xfa\x0b\x8c\xf6\x2c\x39\xea\x84\x67\x85\xb6\xe9\x9e\x5b\xce\xb8\xbd\x12\x8e\xa0\xeb\xe7\x11\x84\xef\x71\x45\x17\x4c\x2b\x28\x50\x82\xc2\x44\xf0\x34\xfc\xcf\x59\xfc\x3b\xcf\x62\x8d\x6c\xb5\xd6\x23\x50\x89\x44\xe4\xb1\xfb\x11\xbe\x81\x41\xfc\xd2\x11\xd8\xbe\xf8\x5a\x22\x6d\x85\xdd\xb0\x54\xaf\x47\x10\xbe\x1a\x7c\x1d\xf6\xa1\x5a\xac\x81\xc2\x97\x66\xb5\xd6\x54\x14\x23\x08\xbf\x6d\x17\x16\x34\xb9\x5e\x49\xd3\xd2\xa7\x4e\xdf\xd6\x00\xa5\xa5\xb8\x36\x87\xbe\x97\x24\x89\x67\x81\x5b\xff\x7f\x27\x73\xf8\x90\x0d\xf7\x40\xc3\xbd\xa5\xfd\x53\xa1\x58\xd7\xa8\x11\xcc\xc2\xbd\xa3\xe1\xab\x17\xc7\xcf\xcc\x8d\x6c\xef\xf9\xf4\xf5\xf1\xb7\x03\xfb\x79\x7c\x3c\x1d\x0e\x5e\x56\x9f\xdf\xbe\x3c\x3a\xb2\x9f\xaf\xa6\x47\x2f\xbf\x1f\x84\x73\x07\x42\x39\xcb\x6d\xa5\x6c\x75\xb6\x37\xb0\xb2\xe8\x06\x4f\x5a\xca\x8a\xcc\x0c\xa2\xf5\x2a\x52\xc5\xf8\x6a\x04\xa1\x28\x75\xa7\x86\x65\xb8\x42\x9e\xb6\x98\x85\x50\xcc\xb1\x87\x5c\x70\xec\xd0\x6a\x21\x32\xcd\x0a\xaf\xe2\xfd\xc5\x40\xf0\xeb\x9d\x75\xdd\x54\xa4\xe8\xcc\xe9\xe8\xc8\x78\xed\xff\x23\xb7\x52\x08\xd6\x54\xee\x6a\x28\x44\xc9\xfc\x28\x1e\x8c\xe0\xa3\x65\x7c\x43\xd5\xba\xd2\x71\xf6\xbc\x0f\xcf\xe7\xad\xd8\xe1\x43\x34\x47\x7d\x38\xf2\x68\x8e\x1e\xc1\xf1\x69\x9e\x3d\x82\xe3\xcb\x7a\xfe\x10\xcd\xb0\x0f\xc3\x79\x1d\x4b\xa6\x49\x36\x43\x99\x8d\x7a\x98\xd8\x77\xe6\x07\xdb\xa5\xc9\x08\x37\xf2\xd5\x2f\xf4\xf1\x0a\xf5\xdb\x0c\xcd\xe7\xf7\xb7\x27\x29\x09\x9b\x89\x32\x74\x3d\xdc\xfe\x1c\x9b\x41\x9f\xb8\x79\xb9\x6a\xaa\xfe\x53\x64\x52\x2a\x2d\xf2\x77\x36\x28\xde\x30\xfb\x60\xf1\x28\xbc\x25\xbd\x74\x01\xe4\xde\x15\x76\xb8\x63\xc6\x39\xca\x1f\xcf\xdf\xbf\x83\x09\x84\xe1\xd8\xdc\x0f\xa7\x19\x52\x09\x94\xdf\x02\x6e\x99\xd2\x8c\xaf\xaa\x10\x6c\x55\xb0\xd9\x02\x93\x5a\xbd\xd8\x2d\x8c\x7d\x82\x32\xb7\xb3\x80\x1d\x42\x57\xa8\x4f\xcb\x7c\x81\xf2\xc3\x72\xea\x76\x88\x6f\x91\x36\xc3\x84\x6f\x47\x22\x91\x6a\xac\x4c\x21\xa1\xdd\x77\xea\xdb\xcf\x38\xc9\xa8\x52\xef\x98\xd2\x31\x4d\xd3\x7a\xbf\x0f\xee\xe3\xa9\xca\xdb\xef\x85\x90\xa9\x19\xb8\x42\xff\xda\xba\x10\xe9\xed\xa7\xc4\x99\xfd\xb0\x7a\x11\x34\xd3\x5e\x86\xda\x1f\xae\x2b\xe3\x3a\x73\xa2\x43\x76\x53\xf5\xa3\xb8\x32\xec\x3c\xa3\x5a\xa7\x4d\x31\xcb\x3e\xc5\x93\xb6\x3c\x15\x75\xac\x4c\x68\xc6\x3b\x15\x0d\x26\xd5\xa9\xcc\x08\x83\xa7\x30\x8c\xe0\xeb\x6a\xa1\x9a\x48\xe7\x0f\xc3\xd8\x42\x6d\xce\xfe\x68\x50\x6c\x43\x5f\xbd\x8c\x2e\x30\xfb\x6c\xf5\x1a\x6a\x7b\x33\x9a\x0a\xae\xd1\xbe\x0a\xd4\xe7\xef\xce\xfd\x9d\xa1\x22\xac\xbe\x78\x8b\x9b\xea\xe5\x7d\xba\x66\x59\x4a\x1a\xdd\x1e\xd9\x6f\x64\x54\xfb\xf6\xa0\x3a\x14\xee\x0a\x60\x37\xdb\x7b\x8a\xab\x3b\xf6\x31\xa5\x9d\xa9\x2d\x76\x9a\xbe\xdd\x20\xd7\x26\x92\x90\xa3\x24\x61\x2e\x4a\x85\x62\x83\x32\xec\xc3\xbd\x87\x64\xdb\xc2\xd8\x6a\x9d\x99\x2e\x76\x66\x41\x89\x4d\xd8\x3e\x74\x92\xb5\x0f\xbe\xc4\x66\xfa\x6e\xaf\x3e\x9f\x10\x5d\xea\xc7\x24\x4b\x54\xa8\x7f\xac\xc5\x3f\x28\xf8\x9e\xac\xbb\xa8\x0a\x86\xe6\xa2\xef\xf2\xc7\x77\x99\x75\xe2\x83\xa5\xa1\x43\x65\xf8\x76\xde\x8a\x77\x7f\x21\x97\x52\x8d\x9d\x57\x71\xb3\x10\x6b\x71\x72\xf6\xe1\x4c\x4b\xc6\x57\x24\x8a\x55\xb9\x50\x5a\x92\x41\x1f\x86\x2f\xba\x57\xe4\x4f\x3c\xfb\x77\x1f\x2d\x60\xdf\xc4\xd3\xff\x9e\x7d\x38\x25\xc1\x61\xca\x12\xed\x1e\xce\xd4\x61\x70\x60\xa9\x3d\xff\xb5\x37\x6d\xf7\xe7\xd1\xc7\xb6\xfa\xf7\x19\xcd\x5b\x1b\x2d\xb5\x48\x44\x5e\x64\xa8\x91\xb4\x00\xb6\x8d\x89\x52\x26\x38\x72\xae\x6f\x76\x5a\x97\x8f\x7b\x77\xff\x08\x00\x00\xff\xff\xf7\xdb\xeb\x00\xab\x1d\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 7595, mode: os.FileMode(436), modTime: time.Unix(1747735270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\xb1\x2f\x1b\x56\x8a\x76\xd2\x00\x5b\x26\xf9\x61\xdd\xba\x97\xae\xe8\xb6\xf4\x69\x18\x0c\x4a\x3c\x5b\x4c\xf8\x47\x23\x29\x3b\x5e\x90\xef\x3e\x50\x92\x6d\x49\xb1\x53\x07\x30\x86\xb5\x40\x24\x1d\x8f\xbf\xfb\xf1\xfe\x90\x67\xa6\x5f\x09\x5b\x84\x4d\x85\x50\x06\xad\x66\xaf\xd2\xf8\x00\xc5\xcd\x32\x23\x68\xc8\xec\x15\x40\x5a\x22\x17\xf1\x05\x20\xd5\x18\x38\x14\x25\x77\x1e\x43\x46\xea\xb0\xa0\xdf\x91\xfe\x90\xe1\x1a\x33\xb2\x92\xb8\xae\xac\x0b\x04\x0a\x6b\x02\x9a\x90\x91\xb5\x14\xa1\xcc\x04\xae\x64\x81\xb4\xf9\x78\x03\xd2\xc8\x20\xb9\xa2\xbe\xe0\x0a\xb3\xe9\x1b\xf0\xa5\x93\xe6\x8e\x06\x4b\x17\x32\x64\xc6\x6e\xa1\x95\x34\x77\xe0\x50\x65\xc4\x87\x8d\x42\x5f\x22\x06\x02\xa5\xc3\x45\x46\xca\x10\x2a\x7f\xcd\x98\x0f\xbc\xb8\xab\x78\x28\x93\xdc\xda\xe0\x83\xe3\x55\x21\x4c\x52\x58\xcd\x76\x02\xf6\x36\xb9\x4a\x2e\x58\xe1\xfd\x5e\x96\x68\x69\x92\xc2\x7b\x02\x2f\x30\x56\x58\x81\xc9\xed\xdf\x35\xba\x4d\x63\xa1\x96\x6c\x9a\x4c\x2f\x92\x29\x0b\x25\x6a\xf4\x2c\xe7\x1e\x59\xab\x40\x6b\xd9\xe0\x77\xf0\x41\x06\x85\xb3\xf7\xca\xae\x4b\x5b\x7b\x4c\x59\x2b\x68\x07\x1b\x8b\xed\x3b\xc0\xeb\xa2\xf6\xc1\xea\xb9\xc2\x25\x1a\x01\x0f\x9d\x18\x40\xf3\x7b\x5a\xa2\x5c\x96\xe1\x1a\xde\x4e\x26\xd5\xfd\x0f\xbb\x21\xbb\x42\xb7\x50\x76\x4d\x37\xd7\xc0\xeb\x60\xb7\x23\x8f\xdd\x33\x09\x3c\x57\x48\xbd\x86\xd0\x47\xac\xb8\x10\xd2\x2c\xaf\x61\x92\x5c\x5c\x39\xd4\xc3\x69\x29\x6b\x79\x01\x40\x4c\x07\xb6\xcd\x87\x34\xb7\x62\xd3\x31\x37\x7c\x05\x85\xe2\xde\x67\xc4\xf0\x55\xce\x1d\xb4\x0f\x2a\xb8\xbb\x03\x1f\x64\x71\xb7\xa1\xc1\x56\x90\x2f\x5b\xd1\x42\xe1\x3d\xd5\x82\x1a\xbb\x76\xbc\x82\x8a\x4e\xc8\x76\xe1\x29\x1f\x42\xd1\xdc\x71\x23\xa0\xb0\x8a\x7a\x4d\x2f\x9b\x17\x2d\xe8\x05\x68\x47\x27\xdb\xd0\xbc\x26\x7d\xa7\xf2\x8e\x16\x33\x7c\xd5\xbd\x0a\xb9\x63\x18\xb3\x92\x4b\x83\x8e\x2e\x54\x2d\xc5\xde\x70\x4f\xc7\xd9\xf5\x4e\x3e\x9e\xdd\x99\x8f\xe4\x0d\x82\x88\x5f\xb9\xb2\xc5\x5d\x5c\x9c\x8a\x71\x01\x2f\x05\x46\x27\x54\x74\xda\x43\x19\xe2\x74\x3a\xb4\x75\xce\x40\x0d\x20\x5d\x58\xa7\xc7\x22\x89\x4a\x78\x0c\x43\x71\x6f\x60\x8b\x1c\xe7\xd2\xa5\xb3\x75\x45\xc6\xba\x31\xc1\x9b\x7c\x9a\xdd\x48\x8d\xf0\xf5\xe7\x9b\x77\xdf\xa4\xac\x13\x3d\xd5\x3d\xea\x90\xc3\x3a\x85\x55\x07\x75\xa2\x55\x9e\xa3\x82\x85\x75\x19\x09\x52\xe3\xdc\x07\xee\x02\x99\xfd\x11\x1f\x29\x6b\x46\x8f\xcc\x94\xa6\xaa\x03\xc4\x3d\x2a\x23\x82\x07\x8c\xd3\xa9\xb2\x05\x57\xa4\xdb\x6f\x7a\x80\x03\x17\xc4\x38\x3b\xab\x40\xd3\x69\x13\x09\x90\x62\x68\xfd\xd0\x72\x98\x90\xab\x33\xae\x13\x8d\x20\xb3\x9f\x8d\x38\xcb\x1a\x23\xd8\x89\x2b\x6c\xec\x9e\xbe\xbe\x83\xe2\x94\x9d\x37\xe5\x5e\xc3\x8d\xad\x20\x96\xa9\xff\x4f\x72\xae\xef\x55\x53\xeb\x1c\x5d\xe7\x20\x5b\x35\x24\x76\xbe\xdd\x7d\x3f\xeb\x5b\x2d\x4d\x46\xe2\x93\xdf\x67\x64\x3a\x99\x4c\x26\x04\x56\x5c\xd5\x98\x91\xab\xc9\xe4\x18\x09\xaf\xb9\x52\x03\xe0\x80\xf7\x01\xe2\x1f\xaa\xeb\x80\x87\xc3\x14\xff\xbd\x2b\xad\xf5\xd2\x2c\x21\x58\x0b\x9a\x9b\x0d\xe8\x66\x73\xe1\x8b\x05\x16\x01\x72\x67\xd7\x1e\x1d\x54\xe8\x22\x2c\x37\x05\x26\x87\x29\xb0\x86\xc3\x19\xb3\x61\x20\x3f\x4b\x6a\xbc\x97\x2a\xa0\xfb\x42\x56\xc4\xd8\x2d\x1a\x45\x7f\x08\xea\xc8\x5a\xce\x97\x4f\x79\x1d\x82\x35\x5d\x42\xb5\x1f\xa4\x47\xea\x93\xaa\xf7\x29\x94\x07\x03\x79\x30\xb4\x72\x52\x73\xb7\x69\xde\xbd\x8e\xc9\x44\x66\xdf\xa6\xac\x9d\xfd\x7f\x2b\xd0\x1f\x1d\xf2\x3b\x61\xd7\xe6\x84\x40\xe4\x5b\xdd\x43\xb1\x38\xcd\xed\xa7\x3a\x3e\x56\x11\xaa\x98\xf3\x6d\xbd\xee\x4c\x93\x21\x93\xe3\xf5\x0b\x6d\x2f\x45\x5b\x18\x02\xba\x56\x41\x56\x0a\xc1\xcb\x7f\x30\x23\x0f\x0f\x90\x34\x6b\xff\xc9\xae\xcd\x07\x34\xf0\xf8\xb8\xa3\xf2\xf0\x40\xc1\x71\xb3\x44\x48\xde\x47\x9f\xfe\x12\x7d\xe8\xe1\xf1\xf1\x08\x55\x80\xd4\x56\xa1\xf1\x34\x34\x5b\x7e\x0b\xff\xa1\x39\x17\x9e\xc1\x7d\x16\xb2\x05\x95\xd6\x6c\x37\x9c\x08\xf9\x91\x6b\x6c\x10\xfb\xf8\x29\x6b\x15\xfb\x66\x62\xfb\xf8\x1c\x5f\xb6\x25\x7c\xf2\xa4\x94\xb5\x9e\x3c\x12\xd5\xa3\x67\xe8\x79\x72\xbb\xbf\xaf\xfb\x3a\xd7\x32\xec\x36\xe2\xdf\x6b\x03\xbf\xc5\xb6\xbb\x4d\x8d\x6e\x74\xd4\x48\x1d\x44\x4e\xd9\xb0\xe5\x1a\x90\x1a\x7e\x68\x2e\xcd\xa8\x1b\xfc\x1e\x74\xd3\x9d\xc6\xa6\xbb\x69\x50\xd5\x92\x4e\x27\x50\x05\x7a\x09\xd5\x3d\x7d\x3b\xee\x25\x23\xb9\xf8\x3b\x2a\xcc\x85\x5c\x91\xd9\xc8\x03\x7b\x95\xfe\x4f\x80\x91\x5a\xca\x22\x8f\x11\xc3\x43\x7c\x77\x88\x4d\x1b\x1f\x7f\x9e\x79\x99\x4b\x25\xc3\xe6\xba\x94\x42\xe0\x60\x13\xbb\x41\x5d\x29\x1e\x70\xec\xb3\x51\x39\xf7\x66\xcc\x9d\x5d\xff\x39\x9f\x7f\xfc\xfc\xeb\x7c\xfe\xd7\x93\x0a\x1e\x77\xce\xd1\x41\x87\x76\xa0\xae\xc0\x7b\xb0\x4d\x90\xf6\xc0\x5d\xed\x1f\x19\x3c\x52\xf8\x64\xf6\xea\x25\xf5\xfb\xa5\xca\x3d\xb9\x66\x5f\x5e\xad\xcf\x96\x5c\xbf\x42\x9f\x51\x3c\x56\x95\x87\xeb\xeb\xc4\xc0\xf4\x8b\x2d\x36\x2d\xc7\x7d\x3d\x8c\x50\xb3\xf4\x5e\x84\x7a\x91\x1d\x0d\x9d\x95\xee\xc1\x33\xba\x0b\x43\x67\x71\x98\xbc\xa8\xed\x0a\x9f\x66\xd2\xf6\xfc\xf6\x58\x58\x23\xc6\x27\x38\x3d\x76\x82\x1f\xe0\xfe\xb4\x16\xc7\x82\x6d\xd1\xfa\xc2\xc9\x2a\x80\x77\xc5\xf1\xab\x86\xee\x52\xe1\x32\x99\x26\xd3\xe6\xee\xe2\xd6\x13\x98\xa5\xac\x9d\x3b\x7b\x09\xd4\xfe\xd6\x62\x7f\x53\x71\xeb\xc9\x69\x60\x2f\xb8\x6f\xb9\x1d\x5f\xb7\x9c\x6c\x64\xbd\x5e\x27\x4b\x1f\x78\x90\x45\x83\xdc\xec\x98\x9e\x29\xcb\x05\xba\xd3\x61\x0a\x61\x6e\x7d\x52\x28\x5b\x8b\x85\xe2\x0e\x1b\x2c\x7e\xcb\xef\x99\x92\xb9\x67\x9f\x78\xc5\x3f\x71\xe7\x91\x5d\x25\x97\xc9\x84\x55\x3c\xfe\x77\x1e\x4f\x23\xcb\x16\xdb\x7b\x87\xa7\xba\x29\x6b\xef\x48\x52\xd6\x5c\xaf\xfd\x1b\x00\x00\xff\xff\x41\x6b\x92\x22\x6e\x13\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4974, mode: os.FileMode(436), modTime: time.Unix(1747728480, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

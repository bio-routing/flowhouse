// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package frontend generated by go-bindata.// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x6d\x53\x1b\x39\xf2\x7f\xcf\xa7\xe8\x1d\xd8\xff\x68\x16\x67\x18\x03\x49\x2a\xe6\xef\xba\xca\x3a\x61\x93\xab\x04\x72\x07\x7b\xf7\xc2\xf1\x51\xf2\x4c\xdb\x16\xcc\x48\xb3\x92\xc6\x36\x49\xf1\xdd\xaf\x24\xcd\xa3\x6d\xd8\xe5\xf6\x5e\x1e\xae\xc2\xb2\xd4\x0f\x3f\x75\xb7\xba\x5b\x5a\x52\x09\x33\x96\x6a\x94\x6a\x24\x0a\xae\x61\x08\xd1\xd9\xde\xde\x01\x49\x44\x5c\x64\xc8\x75\x10\x4a\xa4\xc9\x3d\x99\x15\x3c\xd6\x4c\x70\x12\xc0\xf7\x3d\x00\xc3\xa7\x34\x95\x86\x61\x26\x64\x46\xf5\x35\xcb\x50\x69\x9a\xe5\x84\xe3\x0a\xde\x51\x8d\x84\x34\xc3\x00\x8e\xa0\x1f\x45\x51\x00\x2f\xe0\x4d\x14\xc1\x0b\x68\x96\xc2\x39\x5a\xee\x6f\x82\xe3\xe5\x6c\xa6\x50\x93\x00\x7e\x82\x57\x51\xf0\x93\xe3\x09\xce\xf6\x00\xd8\x0c\xc8\x01\xf1\xf6\x35\xcb\xf0\xc6\xaa\xf6\x82\x70\x49\x53\x12\xc0\x70\x08\x9e\xe7\x70\x01\xec\xa4\xb1\x63\x2b\xe6\x61\xaf\x44\x8f\x3c\xf9\x0f\xb0\xff\x29\xd4\xc8\x93\xdf\xc1\xdc\x50\x20\x4f\x1a\xbc\x66\xdd\x79\xe9\x4b\x5a\x28\x2f\x08\xe3\x94\xc5\x77\x84\x26\xc9\xb9\x9d\xb5\x94\x07\xc4\x33\xbb\xf1\x82\x50\x70\xe2\xab\x62\x9a\x31\xed\xf7\xc0\x0d\xfe\x56\xa0\xbc\x0f\xce\x8c\xb0\xb9\x10\xf3\x14\xc3\x78\x41\xa5\x56\x61\x2a\x68\x42\xfc\xb8\x90\x12\xb9\x21\xb7\x80\xfc\x9c\xc6\x77\x74\x8e\xca\x1f\xc0\xd8\x8f\x85\x44\x4b\xed\x4f\x0c\x20\xab\x0c\xf6\x00\x56\x8c\x27\x62\x15\x0a\xbe\xa0\x6a\x11\x2f\x28\x9f\xa3\xb1\x68\x19\x28\x40\xaa\xdd\x75\x15\x2a\xd4\x97\xfc\x93\xa0\xc9\x88\xa6\xe9\x94\xc6\x77\x24\x91\x74\x35\x5a\x74\x1c\xf4\x1c\x96\x3d\x80\x5c\xe4\x45\x4a\x35\x9e\x33\x4c\x13\x45\x82\xb3\x3d\x83\x72\xaf\x86\x52\x1b\xaa\xc4\xd4\xd8\xd3\x18\x93\xe6\x39\xf2\x84\x34\x93\xd7\x98\xe5\x46\x9c\x17\x84\x0b\x9d\xa5\xc4\x9c\x81\x3c\xa5\x31\x92\xa3\x9b\x9b\x8b\x5f\x3f\xdf\xdc\x1c\xcd\x7b\x9d\x63\x13\x38\x1c\x8d\x88\x9b\x99\x81\xf2\xf5\xeb\xd8\x83\xc3\xee\x01\x3b\x04\xef\xeb\xd7\x89\xf1\xa1\xb5\x18\xd9\xb6\x97\x65\xbd\xa0\x99\xb1\xe6\x01\xd1\x0b\xa6\xca\xa0\xb1\x3a\x00\x14\xa6\x18\xeb\x0d\x02\xaa\xb5\x24\x1e\x4b\x3c\xe7\x9e\x52\xe7\x45\x91\xc1\xb0\xc5\x10\xaa\x62\xaa\xb4\x64\x7c\x4e\x2c\x55\x5b\x58\x98\x52\xa5\x3f\xf2\x04\xd7\x97\x33\xe2\x8d\xbd\x00\x0e\xa1\xdf\xfb\x1d\xb2\x89\x17\x58\x8a\x0a\x5b\xcb\x02\x4b\x9a\x16\xd8\xb1\x80\x41\x53\x6f\xdf\x01\xe6\x34\x43\xaf\xd7\x6c\xb9\x44\x6f\xa2\xf2\x1f\x86\x5f\x91\x9a\x75\x93\xea\x61\xcb\xe6\x12\x33\xb1\xc4\xa7\x8d\x6e\x0f\xce\xb6\xcd\xdb\x52\xc4\xaa\x14\xd1\x31\x7e\x23\xc3\xa9\x21\x6d\x10\x26\xa1\x48\xb4\xc9\xb0\xa5\xd6\x10\xb4\x7f\x1f\x1e\x5a\x62\x89\xba\x90\xdc\x7c\x9d\xed\x3d\xb4\xa2\x34\xa7\x52\xe1\x17\x2a\x69\xa6\x88\xd2\xd2\x41\x2b\x89\x95\x96\xa1\xca\x53\xa6\x89\xff\x7f\xbe\x81\x90\x14\x71\x3b\x76\x72\xcb\xd6\x03\xfb\x5d\x6d\xca\xa0\xb2\x13\x57\x86\x13\x86\xee\x47\x25\x67\xe8\x07\x61\x46\xf3\x96\x10\xeb\xb1\x8a\xb9\x56\x9d\x60\x2c\x12\xfc\xf5\xef\x1f\x47\x22\xcb\x05\x47\xae\x1d\x61\x7d\x28\xfc\x43\xbf\x07\x3e\xf8\x41\xe9\xbc\x32\x43\x38\x6d\x6a\xdc\x20\x18\x47\x93\x49\x85\xc2\x4d\xf4\x27\x8e\xb4\x54\xe5\x38\xac\x5d\x7b\xf0\xdd\xc8\xe9\xd8\x67\xe3\x94\xd7\x85\xe8\x37\x93\xdc\x60\x08\xa9\x88\xa9\xa1\x0c\x17\x12\x67\xe5\x36\xbd\x7d\x2f\x28\xd5\x98\x5c\xfc\x83\xa5\xad\xf6\xe8\xd4\x76\xca\x82\x5d\x7f\xff\x5b\x61\x05\x29\x18\xba\x89\x96\xed\xad\x53\x85\x34\xd6\x92\xc0\x6c\xbd\x04\x06\xff\xbf\xc1\x18\xa6\xc8\xe7\x7a\x71\x06\xec\xf0\xb0\xed\x0e\xac\x24\xd6\x94\x63\x36\x69\x79\xe4\xac\xa6\xbc\x83\x21\xe0\x38\x9a\x34\x33\x4b\x18\xee\x72\x06\x8e\xfb\x93\xea\xf8\x99\x2d\xde\xd9\xda\x32\x95\x48\xef\x12\xb1\xe2\x5e\xe3\x50\x13\xe4\xf5\x3c\x88\xdc\xe8\x1f\x5b\x5f\x0e\x4d\xb8\x2f\x4d\x88\xd7\x47\xd3\x77\x47\x1e\x13\xe3\xdc\x7a\x5c\x02\x04\x88\x05\xd7\x8c\x17\x58\xba\xdc\xfe\xdf\x80\xd0\xae\xc2\x1d\x0c\x5b\xe5\x79\xf9\x6c\xb1\xb6\x50\x6e\x0b\x6d\xea\xe7\xe3\x22\x1b\x71\x61\x46\x75\xbc\x20\x47\xff\x6a\xe7\xec\xa3\xa0\x91\xbb\x93\xd5\xb5\x4c\x98\x26\x36\x09\xc2\xb0\x5d\x5d\xce\x36\x93\x49\xb7\x0c\xd4\x4c\x75\x2e\x31\x50\xef\x9e\xcf\xa6\x25\x9b\xcf\x51\x12\xcf\x15\x11\x6f\x5b\x42\x37\xfb\xee\x56\xbc\x2c\x0b\x6e\xfb\x90\xb5\xda\x85\xf2\x84\xb9\x43\x69\x4b\x8d\x6f\x1a\x0c\x3f\x08\x15\x4a\x46\x53\xf6\xad\x4c\x82\x9d\x73\x07\x43\xf0\xf6\x8d\x56\xc7\xd7\xa4\xb0\x19\x4d\x15\x76\x74\xd5\x55\xfc\x79\x67\xf9\x8f\x1c\xe5\x83\x90\xde\xd2\x35\x71\x6b\xfa\x3e\xc7\x01\x78\xbf\xbc\xbf\xf6\x5c\x3d\x2b\x64\x3a\x00\xef\xc8\x0a\xf8\x8b\xc1\x6a\x47\x6e\x2d\xa1\x9a\x5e\x3b\x06\x8d\x6b\x5d\x72\xa8\x22\x8e\x51\xa9\x41\xdd\xde\x10\x69\x08\x7b\xa6\x09\xd6\x85\xea\xc1\x7a\x21\x9b\xb8\x31\xf0\xec\xba\x09\xd8\x82\x27\x38\x63\x1c\x93\x66\xdd\x79\xca\x76\x37\x37\x09\x5b\x1a\x87\xe2\x5a\x13\xef\x42\x58\xf5\x30\x13\x85\x09\xe4\x9a\xba\xda\x5e\x3d\xf1\x50\xa7\x68\x9e\xa0\x74\x36\xb4\x0a\x1d\xcf\x83\x03\x8d\x52\x0a\xd9\x82\xdc\xc1\xb8\x13\xc1\x7a\x21\x43\x89\x2a\x17\x5c\xe1\x35\xae\x75\x50\x1f\xc3\x87\xa0\xe3\xba\x6d\xc5\x2e\x56\x24\x9a\x48\xf9\x42\x73\x1a\xda\x72\xe6\x16\x4d\xbc\x66\x24\x08\xaa\x24\xeb\x4c\x03\xe3\xc9\x63\xc9\xd4\xc8\x09\x2d\xe7\x8e\x3c\x5a\x33\xdc\x3a\x86\xdb\x36\x83\x49\xa7\x15\xcf\x6d\xc3\xe3\x7c\x72\x6b\xfc\x11\xb5\xfd\x50\xb2\xd4\x60\xda\xc6\x35\x67\xbb\x2d\x77\x7c\x5b\x93\x18\x61\x0c\x7e\xd8\x10\xe6\x54\x6c\xce\x96\x82\x8c\x35\x3e\x72\x4d\xd6\xc1\x96\x17\xab\xef\x46\x0f\x0c\x61\xdd\xa4\x40\x1b\xd1\xa5\xcd\xca\xce\x78\xc9\x54\x61\x4e\xa0\x3b\x23\x54\x4a\x7a\x7f\x2d\xde\x99\xd0\xa5\xd3\x14\x89\xf5\xc8\x59\x69\x6d\x97\xe8\x8d\x5f\x1c\x28\xa6\xae\x34\x8d\xef\x30\x19\x80\x96\x05\xba\x58\xd1\x4c\xa7\x38\x00\xff\x3c\x15\x2b\xf8\x3c\xcd\x95\xdf\x9a\x37\xa1\x70\xa5\xef\x0d\x41\xb5\xaf\x99\xe0\xfa\x8a\x7d\xc3\x01\x1c\x9f\x56\x4d\xe2\x54\xa4\x1d\x99\x26\x81\xa6\x26\x02\xfd\xfd\x93\x93\x13\xbf\x1d\x9a\x8b\xb7\x6b\xa6\x1a\x69\x95\x76\x73\xa1\xf2\x7b\xed\xc9\x1d\xaa\x37\xc4\xf6\x1a\xfb\x6b\x9a\xb2\x78\xe0\x32\x4d\x33\xbd\x0d\xab\x0d\xbf\x7f\x5a\x79\xa1\x5a\x9d\x4b\x96\xa4\x8c\xa3\xda\xa9\x72\x76\x62\x3e\x2d\xad\xb1\x69\xed\x06\xd0\x8f\x36\xe5\x64\x8c\x0b\xf9\xcb\x93\xc2\xf0\x8d\xf9\xf8\x9b\x9c\xee\x56\x3a\x00\xff\xc3\x87\x41\x96\x0d\x94\x6a\x6c\xf2\x0c\x73\xb4\xf6\x78\xdc\x89\xb4\x52\xcf\xb2\xeb\x83\x8c\x71\xdb\x72\x0f\x20\xea\x6d\xb8\xe5\x33\xce\xe9\x94\x69\x05\x39\x4a\x50\x18\x0b\x9e\xfc\xcf\x4b\xff\x55\x5f\x2c\x90\xcd\x17\x7a\x00\x2a\x96\x88\x3c\x74\x3f\xe1\x27\x88\xc2\xd7\x8e\xc0\xa6\xea\xb7\x12\x69\xa3\x6c\xc5\x12\xbd\x18\x80\xff\x26\xfa\xd1\xef\x41\x39\x59\x09\xf2\x5f\x9b\xd9\x0a\xa9\xc8\x07\xe0\xbf\x6c\x26\xcc\x25\x7a\x2e\x4d\x95\x19\x39\xbc\xcd\x06\x94\x96\xe2\xce\x38\x7d\x3f\x8e\xe3\xd6\x0e\xdc\xfc\x3f\x9d\xce\xfe\xae\x3d\x6c\x09\xf5\xf7\x67\xf6\xaf\x94\x62\x4d\xa3\x06\x30\xf6\xf7\x8f\xfb\x6f\x5e\x9d\x9f\x98\xce\x72\xff\x74\xf4\xf6\xfc\x65\x64\x87\xe7\xe7\xa3\x7e\xf4\xba\x1c\xbe\x7c\x7d\x7c\x6c\x87\x6f\x46\xc7\xaf\x7f\x8e\xfc\x89\x13\x42\x39\xcb\x6c\xd2\x6b\x30\xdb\x4e\xb2\xc8\xbb\xc1\x93\x14\xb2\x24\xeb\x47\x51\x1d\xd0\x48\x15\xe3\xf3\x01\xf8\xa2\xd0\x9d\x7c\x94\xe2\x1c\x79\xd2\xc8\xcc\x85\x62\x8e\xdd\xe7\x82\x63\x87\x56\x0b\x91\x6a\x96\xb7\xb2\xd7\x9f\x0c\x84\xfa\x92\xbd\x10\x2b\x6b\xba\x91\x48\xd0\x6d\xa7\x83\x91\xf1\xca\xfe\xc7\x6e\x26\x17\xac\xce\xc2\x65\x9f\x82\x92\xb5\xa3\x38\x1a\xc0\x77\xcb\xf8\x8e\xaa\x45\x89\x71\x7c\xda\x83\xd3\x49\xa3\xb6\xbf\x8b\xe6\xb8\x07\xc7\x2d\x9a\xe3\x47\xe4\xb4\x69\x4e\x1e\x91\xd3\xd6\x75\xba\x8b\xa6\xdf\x83\xfe\xa4\x8a\x25\x53\xef\xea\x3b\xb5\x8d\x7a\x18\xda\x67\xb7\x9d\x95\xcf\x9c\x08\xd7\x85\x54\x0f\x96\xe1\x1c\xf5\xfb\x14\xcd\xf0\xe7\xfb\x8f\x09\xf1\xeb\x26\xa7\xbc\xa0\xda\xdf\xa1\xe9\x3d\x89\x6b\xe1\xca\xfa\xe8\xee\x50\x47\x47\x30\x92\x48\x35\x42\x5c\x28\x2d\xb2\x32\x32\x2a\x3c\x76\xee\x93\x9d\x7a\xc7\xec\x85\xec\x51\xb5\x96\xf4\xc6\xb1\xbb\x7b\xd3\x06\x77\xc8\x38\x47\xf9\xe1\xfa\xf3\x27\x18\x82\xef\x9f\x59\xdd\x29\x52\x09\x94\xdf\x03\xae\x99\xd2\x8c\xcf\x37\x00\xd8\x33\x04\xc3\x0a\x74\xe8\x26\xce\x9a\xe5\x22\xb3\xa5\xde\x36\x4f\x73\xd4\x17\x45\x36\x45\x79\x39\x1b\xb9\x15\xd2\xbc\x57\x68\xd3\x29\xb4\x77\x10\xdb\x7d\x97\x9b\x20\xbe\x5d\x77\xc0\xed\x30\x8c\x53\xaa\xd4\x27\xa6\x74\x48\x93\xa4\x5a\xef\x81\x1b\xbc\x50\x59\x33\x9e\x0a\x99\xa0\xac\xae\x8b\x56\xd9\x54\x24\xf7\x4f\x29\x33\xeb\xbe\x03\xd7\x69\x08\xfb\xae\x21\x2c\x37\xb6\x75\x9f\x96\x62\xf5\x94\x54\xd9\xbe\x51\x5b\x53\x8d\x30\x4d\x9f\xe2\xa8\xaf\xb8\x35\x75\xa8\x4c\x98\x86\x1b\xd9\x0d\x86\xa5\x2f\xc6\x84\xc1\x0b\xe8\x07\xf0\x63\x39\x51\xb6\x9f\x93\xdd\x62\x6c\xd2\x36\xfe\x3e\x8e\xf2\xb5\xdf\x80\x4b\xe9\x14\xd3\x3f\x0c\xae\xa6\xb6\x6d\xfb\x48\x70\x8d\xf6\xed\xbe\xf2\xba\xf3\xf6\x27\x43\x45\x58\xc9\x23\xc5\xaa\x7c\xea\x1c\x2d\x58\x9a\x90\x1a\xd9\x23\xeb\xb5\x8e\x72\xdd\xba\xa8\x43\x21\xc5\xaa\x79\xb2\x75\x31\xd2\x5e\xb6\x0c\x3b\x03\xbf\x43\x65\xf8\x36\x5e\x7a\x36\x5f\xe5\x13\xaa\xb1\xf3\x1c\x66\x26\x42\x2d\x3e\x5e\x5d\x5e\xb9\xd7\xcc\xa0\x7c\xd9\x24\x51\x0f\xfa\xaf\xba\x77\x95\x27\x1e\x13\xbb\xb7\x47\x38\x30\xb6\xfb\xeb\xd5\xe5\x05\xf1\x8e\x12\x16\x6b\x77\x8b\x56\x47\xde\xa1\xa5\xee\x35\x57\xa9\xe6\xca\xe3\xfe\x9e\xf1\xee\x59\x68\x11\x8b\x2c\x4f\x51\x23\x69\xdf\x12\x00\x94\x28\x64\x8c\x03\xeb\xc5\xa6\x62\x3c\xb4\x9e\xd5\x1e\xfe\x1d\x00\x00\xff\xff\x71\xd4\x9e\x5b\xb0\x19\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 6576, mode: os.FileMode(436), modTime: time.Unix(1738763760, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xcd\x72\xdb\x36\x10\xbe\xe7\x29\xb6\xc8\xa5\x9d\x06\x84\x64\x27\x33\xad\x4b\xe9\xd0\x9f\xf4\x92\x66\xd2\xd6\x39\x75\x3a\x1a\x90\x58\x89\xb0\x40\x80\x05\x96\x92\x55\x8f\xdf\xbd\x03\x92\x92\x28\x5a\x72\xe4\x8e\x46\x07\x92\x8b\xc5\xb7\x1f\xf6\x07\x58\x28\xfd\x4a\xb9\x9c\x36\x15\x42\x41\xa5\x99\xbe\x4a\xe3\x03\x8c\xb4\x8b\x09\x43\xcb\xa6\xaf\x00\xd2\x02\xa5\x8a\x2f\x00\x69\x89\x24\x21\x2f\xa4\x0f\x48\x13\x56\xd3\x9c\x7f\xc7\xfa\x43\x56\x96\x38\x61\x2b\x8d\xeb\xca\x79\x62\x90\x3b\x4b\x68\x69\xc2\xd6\x5a\x51\x31\x51\xb8\xd2\x39\xf2\xe6\xe3\x0d\x68\xab\x49\x4b\xc3\x43\x2e\x0d\x4e\xc6\x6f\x20\x14\x5e\xdb\x25\x27\xc7\xe7\x9a\x26\xd6\x6d\xa1\x8d\xb6\x4b\xf0\x68\x26\x2c\xd0\xc6\x60\x28\x10\x89\x41\xe1\x71\x3e\x61\x05\x51\x15\x6e\x84\x08\x24\xf3\x65\x25\xa9\x48\x32\xe7\x28\x90\x97\x55\xae\x6c\x92\xbb\x52\xec\x04\xe2\x6d\xf2\x2e\xb9\x12\x79\x08\x7b\x59\x52\x6a\x9b\xe4\x21\x30\x78\x81\xb1\xdc\x29\x4c\xee\xfe\xa9\xd1\x6f\x1a\x0b\xb5\x16\xe3\x64\x7c\x95\x8c\x05\x15\x58\x62\x10\x99\x0c\x28\x5a\x05\x5e\xeb\x06\xbf\x83\x27\x4d\x06\xa7\xef\x8d\x5b\x17\xae\x0e\x98\x8a\x56\xd0\x0e\x36\x16\xdb\x77\x80\xd7\x79\x1d\xc8\x95\x33\x83\x0b\xb4\x0a\x1e\x3a\x31\x40\x29\xef\x79\x81\x7a\x51\xd0\x0d\xbc\x1d\x8d\xaa\xfb\x1f\x76\x43\x6e\x85\x7e\x6e\xdc\x9a\x6f\x6e\x40\xd6\xe4\xb6\x23\x8f\xdd\x33\x21\x99\x19\xe4\xa1\x04\xea\x23\x56\x52\x29\x6d\x17\x37\x30\x4a\xae\xde\x79\x2c\x0f\xa7\xa5\xa2\xe5\x05\x00\x31\x1d\xc4\x36\x1f\xd2\xcc\xa9\x4d\xc7\xdc\xca\x15\xe4\x46\x86\x30\x61\x56\xae\x32\xe9\xa1\x7d\x70\x25\xfd\x12\x02\xe9\x7c\xb9\xe1\xe4\x2a\xc8\x16\xad\x68\x6e\xf0\x9e\x97\x8a\x5b\xb7\xf6\xb2\x82\x8a\x8f\xd8\x76\xe1\xa9\x3c\x84\xe2\x99\x97\x56\x41\xee\x0c\x0f\x25\xbf\x6e\x5e\x4a\xc5\xaf\xa0\xf4\x7c\xb4\x0d\xcd\x6b\xd6\x77\xaa\xec\x68\x09\x2b\x57\xdd\xab\xd2\x3b\x86\x31\x2b\xa5\xb6\xe8\xf9\xdc\xd4\x5a\xed\x0d\xf7\x74\xbc\x5b\xef\xe4\xc3\xd9\x9d\xf9\x48\xde\x22\xa8\xf8\x95\x19\x97\x2f\xe3\xe2\x4c\x8c\x0b\x04\xad\x30\x3a\xa1\xe2\xe3\x1e\xca\x21\x4e\xa7\xc3\x5b\xe7\x1c\xa8\x01\xa4\x73\xe7\xcb\xa1\x48\xa3\x51\x01\xe9\x50\xdc\x1b\xd8\x22\xc7\xb9\x7c\xe1\x5d\x5d\xb1\xa1\x6e\x4c\xf0\x26\x9f\xa6\xb7\xba\x44\xf8\xfa\xf3\xed\x4f\xdf\xa4\xa2\x13\x3d\xd5\x3d\xe9\x90\xe3\x3a\xb9\x33\x47\x75\xa2\x55\x99\xa1\x81\xb9\xf3\x13\x46\xba\xc4\x59\x20\xe9\x89\x4d\xff\x8c\x8f\x54\x34\xa3\x27\x66\x6a\x5b\xd5\x04\x71\x8f\x9a\x30\x25\x09\xe3\x74\x6e\x5c\x2e\x0d\xeb\xf6\x9b\x1e\xe0\x81\x0b\x62\x9c\xbd\x33\x50\xf2\x71\x13\x09\xd0\xea\xd0\xfa\xb1\xe5\x08\xa5\x57\x17\x5c\x27\x5a\xc5\xa6\xbf\x58\x75\x91\x35\x46\xb0\x33\x57\xd8\xd8\x3d\x7f\x7d\x47\xc5\xa9\xd8\xa7\xdc\x45\x72\xee\xbd\x36\x84\xfe\x0b\xf9\x16\x97\x30\x6f\x14\xc3\x31\xa8\x13\xfc\x2f\x97\xa9\x59\x4d\xe4\x6c\x17\x8c\xf6\x83\xf5\x48\x7d\x32\x75\xd8\x05\x21\x23\x0b\x19\x59\x5e\x79\x5d\x4a\xbf\x69\xde\x43\x19\xc3\xc1\xa6\xdf\xa6\xa2\x9d\x7d\xc9\x30\x0c\x46\xfe\x57\x14\x7e\xf4\x28\x97\xca\xad\xed\x19\x81\xc8\xb6\xba\xc7\x62\x71\x9e\xdb\xcf\x75\x7c\x3c\xff\xd0\x60\x4e\x5d\xc6\xef\x4c\xb3\x43\x26\xa7\x2b\x00\xda\x13\x93\xb7\x30\x0c\xca\xda\x90\xae\x0c\x42\xd0\xff\xe2\x84\x3d\x3c\x40\xd2\xac\xfd\x67\xb7\xb6\x1f\xd0\xc2\xe3\xe3\x8e\xca\xc3\x03\x07\x2f\xed\x02\x21\x79\x1f\x7d\xfa\x6b\xf4\x61\x80\xc7\xc7\x13\x54\x01\x52\x57\x51\xe3\x69\x68\x0a\xbb\x85\xff\xd0\x54\xff\x33\xb8\xcf\x42\xb6\xa0\xda\x59\x58\x49\x53\x77\x8c\x3f\xca\x12\x1b\xc4\x3e\x7e\x2a\x5a\xc5\xbe\x99\xd8\x24\x3c\xc7\x57\x6c\x09\x9f\x3d\x29\x15\xad\x27\x4f\x44\xf5\xe4\x4e\x79\x99\xdc\xee\xef\x89\xa1\xce\x4a\x4d\x6c\xeb\x97\x3f\x6a\x0b\xbf\xc7\xe6\xaa\x4d\x8d\x6e\x74\x70\x5c\x1e\x45\x4e\xc5\xe1\xc1\x7a\x40\xea\xf0\xa3\x94\xda\x0e\xce\xfc\xef\xa1\x6c\x7a\x90\xd8\x5a\x35\x6d\x88\x59\xf0\xf1\x08\x2a\xe2\xd7\x50\xdd\xf3\xb7\xc3\x8e\x21\x92\x8b\xdd\x32\xcd\x94\x5e\xb1\xe9\xc0\x03\x7b\x95\x7e\xa3\x37\x50\x4b\x45\xe4\x31\x60\x78\x8c\xef\x0e\xb1\x69\xd6\x62\x13\x1e\x74\xa6\x8d\xa6\xcd\x4d\xa1\x95\xc2\x83\x4d\xec\x16\xcb\xca\x48\xc2\xa1\xcf\x06\xe5\xdc\x9b\x31\xf3\x6e\xfd\xd7\x6c\xf6\xf1\xf3\x6f\xb3\xd9\xdf\x4f\x2a\x78\xd8\x1f\x45\x07\x1d\xdb\x81\xba\x02\xef\xc1\x36\x41\xda\x03\x77\xb5\x7f\x62\xf0\x44\xe1\xb3\xe9\xab\x97\xd4\xef\x97\x2a\xf7\xec\x9a\x7d\x79\xb5\x3e\x5b\x72\xfd\x0a\x7d\x46\xf1\x54\x55\x1e\xaf\xaf\x33\x03\xd3\x2f\x36\xc2\xfb\xd3\x8d\xd4\x20\x42\xcd\xd2\x7b\x11\xea\x45\x76\x30\x74\x51\xba\x47\xcf\xe8\x2e\x0c\x9d\xc5\xc3\xe4\xc5\xd2\xad\xf0\x69\x26\x6d\xcf\xef\x80\xb9\xb3\x6a\x78\x82\xf3\x53\x27\xf8\x11\xee\x4f\x6b\x71\x28\xd8\x16\x6d\xc8\xbd\xae\x08\x82\xcf\x4f\x5f\x28\xbb\xab\xe3\x75\x32\x4e\xc6\xcd\x0d\xf5\x2e\x5e\x50\x53\xd1\xce\x9d\xbe\x04\x6a\x7f\x37\xdd\xdf\x47\xef\x02\x3b\x0f\xec\x05\xb7\xea\xbb\xe1\xa5\xfa\x6c\x23\xeb\xf5\x3a\x59\x04\x92\xa4\xf3\x06\xb9\xd9\x31\x83\x30\x4e\x2a\xf4\xe7\xc3\xe4\xca\xde\x85\x24\x37\xae\x56\x73\x23\x3d\x36\x58\xf2\x4e\xde\x0b\xa3\xb3\x20\x3e\xc9\x4a\x7e\x92\x3e\xa0\x78\x97\x5c\x27\x23\x51\xc9\xf8\xf3\x01\xcf\x23\x2b\xe6\xdb\xdb\xe5\x53\xdd\x54\xb4\x37\xe1\x54\x34\x7f\xa2\xfc\x17\x00\x00\xff\xff\x86\xa6\x4b\x9d\x54\x11\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4436, mode: os.FileMode(436), modTime: time.Unix(1738762988, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

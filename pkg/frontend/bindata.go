// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package frontend generated by go-bindata.// sources:
// assets/flowhouse.js
// assets/index.html
package frontend

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsFlowhouseJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5b\x73\xdb\xb8\x15\x7e\xd7\xaf\x38\x4b\xbb\x25\x18\x6b\x69\xca\x76\x92\x86\xae\xa6\x93\x75\xe2\xdd\x74\x9a\x38\xad\xbd\xed\x83\xa2\x7a\x60\xf2\x48\x82\x45\x02\x5c\x00\x94\xe4\x64\xfc\xdf\x3b\x00\x78\x95\x94\x6c\xdd\xed\xe3\x5a\x33\x16\x04\x9c\xcb\x87\x73\x27\x57\x54\xc2\x8c\x65\x1a\xa5\xba\x10\x25\xd7\x30\x86\xe8\x7c\x30\x38\x24\xa9\x48\xca\x1c\xb9\x0e\x42\x89\x34\x7d\x20\xb3\x92\x27\x9a\x09\x4e\x02\xf8\x32\x00\x30\x7c\x4a\x53\x69\x18\x66\x42\xe6\x54\xdf\xb0\x1c\x95\xa6\x79\x41\x38\xae\xe1\x0d\xd5\x48\x48\xbb\x0c\xe0\x18\x46\x51\x14\x05\xf0\x3d\xbc\x8a\x22\xf8\x1e\xda\xa3\x70\x8e\x96\xfb\xb3\xe0\x78\x35\x9b\x29\xd4\x24\x80\x67\xf0\x22\x0a\x9e\x39\x9e\xe0\x7c\x00\xc0\x66\x40\x0e\x89\x77\xa0\x59\x8e\xb7\x56\xb5\x17\x84\x2b\x9a\x91\x00\xc6\x63\xf0\x3c\x87\x0b\x60\x2f\x8d\x5d\x5b\x31\x8f\x83\x0a\x3d\xf2\xf4\x7f\xc0\xfe\x9b\x50\x23\x4f\x7f\x05\x73\x4b\x81\x3c\x6d\xf1\x9a\x73\xe7\xa5\x8f\x59\xa9\xbc\x20\x4c\x32\x96\x2c\x09\x4d\xd3\x4b\xbb\x6b\x29\x0f\x89\x67\x6e\xe3\x05\xa1\xe0\xc4\x57\xe5\x5d\xce\xb4\x3f\x04\xb7\xf8\x7b\x89\xf2\x21\x38\x37\xc2\xe6\x42\xcc\x33\x0c\x93\x05\x95\x5a\x85\x99\xa0\x29\xf1\x93\x52\x4a\xe4\x86\xdc\x02\xf2\x0b\x9a\x2c\xe9\x1c\x95\x1f\xc3\xc4\x4f\x84\x44\x4b\xed\x4f\x0d\x20\xab\x0c\x06\x00\x6b\xc6\x53\xb1\x0e\x05\x5f\x50\xb5\x48\x16\x94\xcf\xd1\x58\xb4\x0a\x14\x20\xf5\xed\xfa\x0a\x15\xea\x2b\xfe\x37\x41\xd3\x0b\x9a\x65\x77\x34\x59\x92\x54\xd2\xf5\xc5\xa2\xe7\xa0\xa7\xb0\x0c\x00\x0a\x51\x94\x19\xd5\x78\xc9\x30\x4b\x15\x09\xce\x07\x06\xe5\xa0\x81\xd2\x18\xaa\xc2\xd4\xda\xd3\x18\x93\x16\x05\xf2\x94\xb4\x9b\x37\x98\x17\x46\x9c\x17\x84\x0b\x9d\x67\xc4\xe4\x40\x91\xd1\x04\xc9\xf1\xed\xed\x87\x9f\xdf\xdf\xde\x1e\xcf\x87\xbd\xb4\x09\x1c\x8e\x56\xc4\xed\xcc\x40\xf9\xf4\x69\xe2\xc1\x51\x3f\xc1\x8e\xc0\xfb\xf4\x69\x6a\x7c\x68\x2d\x46\x76\xed\x65\x59\x3f\xd0\xdc\x58\xf3\x90\xe8\x05\x53\x55\xd0\x58\x1d\x00\x0a\x33\x4c\xf4\x16\x01\xd5\x5a\x12\x8f\xa5\x9e\x73\x4f\xa5\xf3\x43\x99\xc3\xb8\xc3\x10\xaa\xf2\x4e\x69\xc9\xf8\x9c\x58\xaa\xae\xb0\x30\xa3\x4a\xbf\xe3\x29\x6e\xae\x66\xc4\x9b\x78\x01\x1c\xc1\x68\xf8\x2b\x64\x53\x2f\xb0\x14\x35\xb6\x8e\x05\x56\x34\x2b\xb1\x67\x01\x83\xa6\xb9\xbe\x03\xcc\x69\x8e\xde\xb0\xbd\x72\x85\xde\x44\xe5\x3f\x0d\xbf\x22\x0d\xeb\x36\xd5\xe3\x8e\xcd\x25\xe6\x62\x85\xdf\x36\xba\x4d\x9c\x5d\x9b\x77\xa5\x88\x75\x25\xa2\x67\xfc\x56\x86\x53\x43\xba\x20\x4c\x41\x91\x68\x8b\x61\x47\xad\x21\xe8\xfe\x3e\x3a\xb2\xc4\x12\x75\x29\xb9\xf9\x3a\x1f\x3c\x76\xa2\xb4\xa0\x52\xe1\x47\x2a\x69\xae\x88\xd2\xd2\x41\xab\x88\x95\x96\xa1\x2a\x32\xa6\x89\xff\x47\xdf\x40\x48\xcb\xa4\x1b\x3b\x85\x65\x1b\x82\xfd\xae\x2f\x65\x50\xd9\x8d\x6b\xc3\x09\x63\xf7\xa3\x96\x33\xf6\x83\x30\xa7\x45\x47\x88\xf5\x58\xcd\xdc\xa8\x4e\x31\x11\x29\xfe\xfc\x8f\x77\x17\x22\x2f\x04\x47\xae\x1d\x61\x93\x14\xfe\x91\x3f\x04\x1f\xfc\xa0\x72\x5e\x55\x21\x9c\x36\x35\x69\x11\x4c\xa2\xe9\xb4\x46\xe1\x36\x46\x53\x47\x5a\xa9\x72\x1c\xd6\xae\x43\xf8\x62\xe4\xf4\xec\xb3\x95\xe5\x4d\x23\xfa\xc5\x14\x37\x18\x43\x26\x12\x6a\x28\xc3\x85\xc4\x59\x75\x4d\xef\xc0\x0b\x2a\x35\xa6\x16\x7f\x67\x69\xeb\x3b\x3a\xb5\xbd\xb6\x60\xcf\xdf\xfe\x52\x5a\x41\x0a\xc6\x6e\xa3\x63\x7b\xeb\x54\x21\x8d\xb5\x24\x30\xdb\x2f\x81\xc1\x9f\xb7\x18\xc3\x0c\xf9\x5c\x2f\xce\x81\x1d\x1d\x75\xdd\x81\xb5\xc4\x86\x72\xc2\xa6\x1d\x8f\x9c\x37\x94\x4b\x18\x03\x4e\xa2\x69\xbb\xb3\x82\xf1\x3e\x67\xe0\x64\x34\xad\xd3\xcf\x5c\x71\x69\x7b\xcb\x9d\x44\xba\x4c\xc5\x9a\x7b\xad\x43\x4d\x90\x37\xfb\x20\x0a\xa3\x7f\x62\x7d\x39\x36\xe1\xbe\x32\x21\xde\xa4\xa6\xef\x52\x1e\x53\xe3\xdc\x66\x5d\x01\x04\x48\x04\xd7\x8c\x97\x58\xb9\xdc\xfe\xdf\x82\xd0\xed\xc2\x3d\x0c\x3b\xed\x79\xf5\x64\xb1\xb6\x51\xee\x0a\x6d\xfb\xe7\xd7\x45\xb6\xe2\xc2\x9c\xea\x64\x41\x8e\xff\xdd\xad\xd9\xc7\x41\x2b\x77\x2f\xab\x1b\x99\x30\x4b\x6d\x11\x84\x71\xb7\xbb\x9c\x6f\x17\x93\x7e\x1b\x68\x98\x9a\x5a\x62\xa0\x2e\x9f\xce\xa6\x25\x9b\xcf\x51\x12\xcf\x35\x11\x6f\x57\x42\xbf\xfa\xee\x57\xbc\xaa\x1a\x6e\x37\xc9\x3a\xe3\x42\x95\x61\x2e\x29\x6d\xab\xf1\xcd\x80\xe1\x07\xa1\x42\xc9\x68\xc6\x3e\x57\x45\xb0\x97\x77\x30\x06\xef\xc0\x68\x75\x7c\x6d\x09\x9b\xd1\x4c\x61\x4f\x57\xd3\xc5\x9f\x96\xcb\xff\x4d\x2a\x1f\x86\xf4\x9e\x6e\x88\x3b\xd3\x0f\x05\xc6\xe0\xfd\xf8\xf6\xc6\x73\xfd\xac\x94\x59\x0c\xde\xb1\x15\xf0\x17\x83\xd5\xae\xdc\x59\x4a\x35\xbd\x71\x0c\x1a\x37\xba\xe2\x50\x65\x92\xa0\x52\x71\x33\xde\x10\x69\x08\x87\x66\x08\xd6\xa5\x1a\xc2\x66\x21\xdb\xb8\x31\xf0\xec\xb9\x09\xd8\x92\xa7\x38\x63\x1c\xd3\xf6\xdc\x79\xca\x4e\x37\xb7\x29\x5b\x19\x87\xe2\x46\x13\xef\x83\xb0\xea\x61\x26\x4a\x13\xc8\x0d\x75\x7d\xbd\x66\xe3\xb1\x29\xd1\x3c\x45\xe9\x6c\x68\x15\x3a\x9e\x47\x07\x1a\xa5\x14\xb2\x03\xb9\x87\x71\x2f\x82\xcd\x42\x86\x12\x55\x21\xb8\xc2\x1b\xdc\xe8\xa0\x49\xc3\xc7\xa0\xe7\xba\x5d\xc5\x2e\x56\x24\x9a\x48\xf9\x48\x0b\x1a\xda\x76\xe6\x0e\x4d\xbc\xe6\x24\x08\xea\x22\xeb\x4c\x03\x93\xe9\xd7\x8a\xa9\x91\x13\x5a\xce\x3d\x75\xb4\x61\xb8\x77\x0c\xf7\x5d\x06\x53\x4e\x6b\x9e\xfb\x96\xc7\xf9\xe4\xde\xf8\x23\xea\xfa\xa1\x62\x69\xc0\x74\x8d\x6b\x72\xbb\x2b\x77\x72\xdf\x90\x18\x61\x0c\xbe\xdb\x12\xe6\x54\x6c\xef\x56\x82\x8c\x35\xde\x71\x4d\x36\xc1\x8e\x17\xeb\xef\x56\x0f\x8c\x61\xd3\x96\x40\x1b\xd1\x95\xcd\xaa\xc9\x78\xc5\x54\x69\x32\xd0\xe5\x08\x95\x92\x3e\xdc\x88\x37\x26\x74\xe9\x5d\x86\xc4\x7a\xe4\xbc\xb2\xb6\x2b\xf4\xc6\x2f\x0e\x14\x53\xd7\x9a\x26\x4b\x4c\x63\xd0\xb2\x44\x17\x2b\x9a\xe9\x0c\x63\xf0\x2f\x33\xb1\x86\xf7\x77\x85\xf2\x3b\xfb\x26\x14\xae\xf5\x83\x21\xa8\xef\x35\x13\x5c\x5f\xb3\xcf\x18\xc3\xc9\x59\x3d\x24\xde\x89\xac\x27\xd3\x14\xd0\xcc\x44\xa0\x7f\x70\x7a\x7a\xea\x77\x43\x73\xf1\x7a\xc3\x54\x2b\xad\xd6\x6e\x1e\xa8\xfc\x61\x77\x73\x8f\xea\x2d\xb1\xc3\xd6\xfe\x9a\x66\x2c\x89\x5d\xa5\x69\xb7\x77\x61\x75\xe1\x8f\xce\x6a\x2f\xd4\xa7\x73\xc9\xd2\x8c\x71\x54\x7b\x55\xce\x4e\xcd\xa7\xa3\x35\x31\xa3\x5d\x0c\xa3\x68\x5b\x4e\xce\xb8\x90\x3f\x7e\x53\x18\xbe\x32\x1f\x7f\x9b\xd3\x3d\x95\xc6\xe0\xff\xf4\x53\x9c\xe7\xb1\x52\xad\x4d\x9e\x60\x8e\xce\x1d\x4f\x7a\x91\x56\xe9\x59\xf5\x7d\x90\x33\x6e\x47\xee\x18\xa2\xe1\x96\x5b\xde\xe3\x9c\xde\x31\xad\xa0\x40\x09\x0a\x13\xc1\xd3\xdf\xbd\xf4\x7f\xf5\xc5\x02\xd9\x7c\xa1\x63\x50\x89\x44\xe4\xa1\xfb\x09\xcf\x20\x0a\x5f\x3a\x02\x5b\xaa\x5f\x4b\xa4\xad\xb2\x35\x4b\xf5\x22\x06\xff\x4f\xcf\xff\xe0\x0f\xa1\xda\xac\x05\xf9\x2f\xcd\x6e\x9d\x98\x34\x59\xce\xa5\x69\x2a\x17\x0e\x5e\x8b\x57\x69\x29\x96\xc6\xc7\x07\x49\x92\x74\x00\xbb\xfd\x7f\x39\x15\xa3\x7d\x90\x77\x84\xfa\x07\x33\xfb\x57\x49\xb1\x96\x50\x31\x4c\xfc\x83\x93\xd1\xab\x17\x97\xa7\x66\x90\x3c\x38\xbb\x78\x7d\xf9\x3c\xb2\xcb\xcb\xcb\x8b\x51\xf4\xb2\x5a\x3e\x7f\x79\x72\x62\x97\xaf\x2e\x4e\x5e\xfe\x10\xf9\x53\x27\x84\x72\x96\xdb\x1a\xd7\x62\xb6\x83\x63\x59\xf4\x63\x25\x2d\x65\x45\x36\x8a\xa2\x26\x7e\x91\x2a\xc6\xe7\x31\xf8\xa2\xd4\xbd\xf2\x93\xe1\x1c\x79\xda\xca\x2c\x84\x62\x8e\xdd\xd7\xa2\x68\xcc\x40\x33\x36\xe7\x39\x9a\xc0\xf1\x13\xe4\x1a\xe5\xb7\x13\xb1\xeb\xe5\xe1\xfe\x90\xd8\x67\x49\x2d\x44\xa6\x59\xd1\x29\x87\xbf\x31\xb2\x9a\xa7\xf6\x85\x58\x5b\xe7\x5c\x88\x14\x9d\xc1\x7a\x56\x60\xbc\xf6\x70\x05\xb7\x10\xac\x29\xeb\xd5\xe0\x83\x92\x75\xd3\x22\x8a\xe1\x8b\x65\x7c\x43\xd5\xa2\xc2\x38\x39\x1b\xc2\xd9\xb4\x55\x3b\xda\x47\x73\x32\x84\x93\x0e\xcd\xc9\x57\xe4\x74\x69\x4e\xbf\x22\xa7\xab\xeb\x6c\x1f\xcd\x68\x08\xa3\x69\x6d\x63\xd3\x40\xed\xe3\x11\xc7\xf5\xfe\xf6\x69\xd2\xca\x8d\x32\xf5\x5b\xcf\x70\x8e\xfa\x6d\x86\x66\xf9\xc3\xc3\xbb\x94\xf8\xcd\xa4\xe4\x07\x41\x68\xe6\x56\xe2\xc6\xbf\xaa\xb7\x6e\x3d\xa9\x6e\xbf\x55\x4c\xa9\xc6\xde\xe3\xbc\xd9\x08\xb5\x78\x77\x7d\x75\xed\xde\xc6\x04\xd5\x9b\x19\x12\x0d\x61\xf4\xa2\x3f\x6b\x7d\xe3\x65\x48\x7f\xfa\x85\x43\x83\xfb\xaf\xd7\x57\x1f\x88\x77\x9c\xb2\x44\xbb\xa7\x00\x75\xec\x1d\x59\xea\x61\x3b\x0a\xb6\x23\x9b\xfb\x7b\xc2\x7b\x9b\x52\x8b\x44\xe4\x45\x86\x1a\x49\x77\xca\x01\x50\xa2\x94\x09\xc6\x76\x54\x69\x03\xf4\xb1\xf3\x5a\xe0\xf1\x3f\x01\x00\x00\xff\xff\x9e\xcd\xee\xd8\x70\x16\x00\x00")

func assetsFlowhouseJsBytes() ([]byte, error) {
	return bindataRead(
		_assetsFlowhouseJs,
		"assets/flowhouse.js",
	)
}

func assetsFlowhouseJs() (*asset, error) {
	bytes, err := assetsFlowhouseJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/flowhouse.js", size: 5744, mode: os.FileMode(436), modTime: time.Unix(1738761656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5f\x6f\xdb\x36\x10\x7f\xef\xa7\xb8\x71\x2f\x1b\x56\x8a\x71\xd3\x02\x5b\x21\xf9\x61\x7f\xba\x97\xae\xe8\xb6\xf6\x69\x18\x0c\x4a\x3c\x5b\x8c\x29\x52\x23\x4f\x76\xbc\x20\xdf\x7d\xa0\x24\x3b\xb2\x62\xa5\xce\x60\xe4\xc1\xd2\xf1\xf8\xbb\xbf\x3f\x91\x97\xf4\x2b\xe5\x0a\xda\xd5\x08\x25\x55\x66\xfe\x22\x8d\x3f\x60\xa4\x5d\x65\x0c\x2d\x9b\xbf\x00\x48\x4b\x94\x2a\x3e\x00\xa4\x15\x92\x84\xa2\x94\x3e\x20\x65\xac\xa1\x25\xff\x9e\x0d\x97\xac\xac\x30\x63\x1b\x8d\xdb\xda\x79\x62\x50\x38\x4b\x68\x29\x63\x5b\xad\xa8\xcc\x14\x6e\x74\x81\xbc\x7d\x79\x09\xda\x6a\xd2\xd2\xf0\x50\x48\x83\xd9\xec\x25\x84\xd2\x6b\xbb\xe6\xe4\xf8\x52\x53\x66\xdd\x1e\xda\x68\xbb\x06\x8f\x26\x63\x81\x76\x06\x43\x89\x48\x0c\x4a\x8f\xcb\x8c\x95\x44\x75\x78\x2b\x44\x20\x59\xac\x6b\x49\x65\x92\x3b\x47\x81\xbc\xac\x0b\x65\x93\xc2\x55\xe2\x20\x10\xaf\x93\x37\xc9\x2b\x51\x84\xf0\x20\x4b\x2a\x6d\x93\x22\x04\x06\xcf\x30\x56\x38\x85\xc9\xcd\x3f\x0d\xfa\x5d\x6b\xa1\xd1\x62\x96\xcc\x5e\x25\x33\x41\x25\x56\x18\x44\x2e\x03\x8a\x4e\x81\x37\xba\xc5\xef\xe1\x49\x93\xc1\xf9\x3b\xe3\xb6\xa5\x6b\x02\xa6\xa2\x13\xc4\x3c\x8b\x7d\xa2\xd3\xdc\xa9\x5d\xaf\x6f\xe5\x06\x0a\x23\x43\xc8\x98\x95\x9b\x5c\x7a\xe8\x7e\xb8\x92\x7e\x0d\x81\x74\xb1\xde\x71\x72\x35\xe4\xab\x4e\xb4\x34\x78\xcb\x2b\xc5\xad\xdb\x7a\x59\x43\xcd\xaf\x7a\xd3\x00\xa9\x3c\x86\xe2\xb9\x97\x56\x41\xe1\x0c\x0f\x15\xbf\x6e\x1f\x2a\xc5\x5f\x41\xe5\xf9\xd5\x3e\xe6\xaf\xd9\xd0\x5b\xd9\xbb\x25\xac\xdc\xf4\x8f\x4a\x1f\x3c\x8c\xe5\x96\xda\xa2\xe7\x4b\xd3\x68\xf5\x60\x78\xa0\xe3\xdd\xf6\x20\x1f\xef\xee\xcd\x47\xe7\x2d\x82\x8a\x6f\xb9\x71\xc5\x3a\x06\x67\xf4\xaa\x24\x08\x5a\x61\x4c\x42\xcd\x67\x03\x94\x63\x9c\x5e\x87\x77\xc9\x39\x52\x03\x48\x97\xce\x57\x63\x91\x46\xa3\x02\xd2\xb1\x78\xb0\xb0\x47\x8e\x7b\xf9\xca\xbb\xa6\x66\x63\xdd\xd8\x39\xb8\x42\xab\xe6\x9f\x74\x85\xf0\xcd\xe7\x4f\x3f\x7d\x9b\x8a\x5e\xf4\x58\x77\x32\x21\xa7\x75\x0a\x67\x4e\xea\x44\xab\x32\x47\x03\x4b\xe7\x33\x46\xba\xc2\x45\x20\xe9\x89\xcd\xff\x8c\x3f\xa9\x68\x57\x27\x76\x6a\x5b\x37\x04\x91\xfc\x19\x53\x92\x30\x6e\xe7\xc6\x15\xd2\xb0\x9e\xc8\x03\xc0\xa3\x14\xc4\x3a\x7b\x67\xa0\xe2\xb3\xb6\x12\xa0\xd5\xb1\xf5\x53\xe1\x08\xa5\x37\x17\x8c\x13\xad\x62\xf3\x5f\xac\xba\x48\x8c\x11\xec\xcc\x08\x5b\xbb\xe7\xc7\x77\x52\x9c\x8a\x87\x96\xbb\x48\xcf\xbd\xd3\x86\xd0\x7f\xa1\xdf\x62\x08\xcb\x56\x31\x9c\x82\x9a\xf0\xff\x72\x9d\x9a\x37\x44\xce\xf6\xc5\xe8\x5e\xd8\xc0\xa9\x8f\xa6\x09\x87\x22\xe4\x64\x21\x27\xcb\x6b\xaf\x2b\xe9\x77\xed\x73\xa8\x62\x39\xd8\xfc\xbb\x54\x74\xbb\x2f\x59\x86\xd1\xca\xff\xaa\xc2\x8f\x1e\xe5\x5a\xb9\xad\x3d\xa3\x10\xf9\x5e\xf7\x54\x2d\xce\x4b\xfb\xb9\x89\x07\x48\x03\x1a\x2c\xa8\xef\xf8\x83\x69\x76\xec\xc9\x34\x03\xa0\x68\x02\xb9\x8a\x77\x30\x0c\xaa\xc6\x90\xae\x0d\x42\xd0\xff\x62\xc6\xee\xee\x20\x69\x63\xff\xd9\x6d\xed\x7b\xb4\x70\x7f\x7f\x70\xe5\xee\x8e\x83\x97\x76\x85\x90\xbc\x8b\x39\xfd\x35\xe6\x30\xc0\xfd\xfd\x84\xab\x00\xa9\xab\xa9\xcd\x34\xb4\xc4\xee\xe0\xdf\xb7\xec\x7f\x02\xf7\x49\xc8\x0e\x54\x3b\x0b\x1b\x69\x9a\xde\xe3\x0f\xb2\xc2\x16\x71\x88\x9f\x8a\x4e\x71\x68\x06\xad\x7a\xd2\x5f\xb1\x77\xf8\xec\x4d\xa9\xe8\x32\x39\x51\xd5\xc9\x2f\xe5\x65\x7a\x7b\xf8\x4d\x0c\x4d\x5e\x69\x62\xfb\xbc\xfc\xd1\x58\xf8\x3d\xde\x5a\xba\xd6\xe8\x57\x47\xc7\xe5\x49\xe4\x54\x1c\x1f\xac\x47\x4e\x1d\xbf\x54\x52\xdb\xd1\x99\xff\x03\x54\xed\x1d\x44\x36\xe4\xda\x6b\x88\x59\xf1\xd9\x15\xd4\xc4\xaf\xa1\xbe\xe5\xaf\xc7\x37\x86\xe8\x5c\xbc\x86\xd2\x42\xe9\x0d\x9b\x8f\x8c\x45\x03\x23\xd3\xa7\x1c\x39\xa0\xb5\x17\xbd\x78\x6d\x0d\x3a\xd7\x46\xd3\xee\x6d\xa9\x95\xc2\xa3\xaf\xd3\x27\xac\x6a\x23\x09\xc7\xc9\x18\xf1\x74\xb0\x63\xe1\xdd\xf6\xaf\xc5\xe2\xc3\xe7\xdf\x16\x8b\xbf\x1f\x51\x73\x7c\xf1\x89\x91\x9f\xfa\xb4\xf4\xcc\x1d\xc0\xb6\xd9\x7f\x00\xee\x49\x3d\xb1\x38\xc1\x68\x36\x7f\xf1\x1c\x62\x7e\x89\x92\x67\x93\xf1\xf9\x34\x7c\x92\x4b\x43\xea\x3d\xa1\x38\x45\xb7\xd3\xc4\x39\xb3\x30\x43\x16\x11\xde\x4e\xdf\x90\x46\x15\x6a\x43\x1f\x54\x68\x50\xd9\xd1\xd2\x45\xdd\x3d\x79\xf8\xf6\x65\xe8\x2d\x1e\x37\x2f\x56\x6e\x83\x8f\x3b\x69\x7f\x30\x07\x2c\x9c\x55\xe3\xa3\x99\x4f\x1d\xcd\x27\x7c\x7f\xcc\xc5\xb1\x60\x4f\xda\x50\x78\x5d\x13\x04\x5f\x4c\x8f\x60\xfd\xb0\x75\x9d\xcc\x92\x59\x3b\xd3\xdd\xc4\x91\x2e\x15\xdd\xde\xf9\x73\xa0\x1e\xa6\xb9\x87\x09\xee\x26\xb0\xf3\xc0\x9e\x31\x87\xde\x8c\xc7\xd0\xb3\x8d\x6c\xb7\xdb\x64\x15\x48\x92\x2e\x5a\xe4\xf6\x53\x18\x84\x71\x52\xa1\x3f\x1f\xa6\x50\xf6\x26\x24\x85\x71\x8d\x5a\x1a\xe9\xb1\xc5\x92\x37\xf2\x56\x18\x9d\x07\xf1\x51\xd6\xf2\x63\x1c\xf5\xc5\x9b\xe4\x3a\xb9\x12\xb5\x8c\x7f\x3e\xe0\x79\xce\x8a\xe5\x7e\x6c\x7c\xac\x9b\x8a\x6e\xc4\x4d\x45\xfb\x6f\x87\xff\x02\x00\x00\xff\xff\x18\xa9\x6c\x44\x86\x10\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 4230, mode: os.FileMode(436), modTime: time.Unix(1738703795, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/flowhouse.js": assetsFlowhouseJs,
	"assets/index.html":   assetsIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"flowhouse.js": &bintree{assetsFlowhouseJs, map[string]*bintree{}},
		"index.html":   &bintree{assetsIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
